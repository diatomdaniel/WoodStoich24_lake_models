mutate("C:N" = (1/12.01)/(QN1/14.007),"C:P" = (1/12.001)/(QP1/30.974),
"N:P" = (QN1/14.007)/(QP1/30.974), NP_inflow = NPin_molar) %>%
select(`C:N`, `C:P`, `N:P`,Pin, NP_inflow, species, GPP) %>%
gather("seston", "value", -Pin, -NP_inflow, -species, -GPP) %>%
mutate(seston = factor(seston, levels = c("C:N", "C:P", "N:P"))) %>%
drop_na()
# subset for plotting
seston.average <- seston[seston$species == "average",]
seston.diatoms <- seston[seston$species == "diatoms",]
seston.greens <- seston[seston$species == "greens",]
seston.cyanos <- seston[seston$species == "cyanos",]
# consumption vctr
consump.vctr <- tibble(
model = rep(c("static", "dynamic"), each = 4),
species = rep(c("average", "diatoms", "greens", "cyanos"), 2),
"minQN_minQP" = rep(c(
((0.09/14.007)/(1/12.001))/((0.0105/30.974)/(1/12.001)),
((0.155/14.007)/(1/12.001))/((0.02/30.974)/(1/12.001)),
((0.025/14.007)/(1/12.001))/((0.001/30.974)/(1/12.001)),
((0.01/14.007)/(1/12.001))/((0.001/30.974)/(1/12.001))), 2),
half_sat_P = rep(c(0.005, 0.028, 0.026, 0.0165)/30.974 * 1000, 2),
half_sat_N = rep(c(0.064, 0.036, 0.033, 0.05)/14.007 * 1000,2))
# create seston summary w. minQN and minQP
consump.vctr.seston <- seston %>%
merge(consump.vctr, by = "species") %>%
group_by(species, seston, Pin) %>%
summarise(minQN_minQP = max(minQN_minQP),
CNP = max(value),
GPP = max(GPP),
half_sat_P = min(half_sat_P),
half_sat_N = min(half_sat_N))
# manual legend
species.legend = c("average", "diatoms","greens", "cyanos")
# plot GPP across supply N:P for each group
(gpp.plt <- ggplot() +
# # add in the consumption vctrs
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = minQN_minQP, yend = 0, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = 0, yend = GPP, col = species, group = Pin),
lwd = 0.75, lty = "dashed") +
# plot GPP
geom_line(data = gpp.sims, aes(x = NPin_molar, y = GPP,col = species,
group = interaction(species, Pin)), lwd = 0.75) +
geom_point(data = gpp.sims, aes(x = NPin_molar, y = GPP, fill = species, pch = species,
group = Pin), size = 2) +
scale_x_log10() + scale_y_log10() +
ggh4x::facet_grid2(Pin~model) +
scale_shape_manual(values = c(21, 22, 24, 25)) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
labs(x = "Load N:P (molar)",
y = expression("GPP (mg C L"^-1 ~ " day"^-1~")"),
pch = NULL, col = NULL))
# plot GPP across supply N:P for each group
(gpp.plt <- ggplot() +
# # add in the consumption vctrs
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = minQN_minQP, yend = 0, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = 0, yend = GPP, col = species, group = Pin),
lwd = 0.75, lty = "dashed") +
# plot GPP
geom_line(data = gpp.sims, aes(x = NPin_molar, y = GPP,col = species,
group = interaction(species, Pin)), lwd = 0.75) +
geom_point(data = gpp.sims, aes(x = NPin_molar, y = GPP, fill = species, pch = species,
group = Pin), size = 2) +
scale_x_log10() + scale_y_log10() +
ggh4x::facet_grid2(Pin~model) +
scale_shape_manual(values = c(21, 22, 24, 25)) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
labs(x = "Load N:P (molar)",
y = expression("GPP (mg C L"^-1 ~ " day"^-1~")"),
col = NULL))
# plot GPP across supply N:P for each group
(gpp.plt <- ggplot() +
# # add in the consumption vctrs
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = minQN_minQP, yend = 0, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = 0, yend = GPP, col = species, group = Pin),
lwd = 0.75, lty = "dashed") +
# plot GPP
geom_line(data = gpp.sims, aes(x = NPin_molar, y = GPP,col = species,
group = interaction(species, Pin)), lwd = 0.75) +
geom_point(data = gpp.sims, aes(x = NPin_molar, y = GPP, fill = species, pch = species,
group = Pin), size = 2) +
scale_x_log10() + scale_y_log10() +
ggh4x::facet_grid2(Pin~model) +
scale_shape_manual(values = c(21, 22, 24, 25)) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
labs(x = "Load N:P (molar)",
y = expression("GPP (mg C L"^-1 ~ " day"^-1~")")))
# plot GPP across supply N:P for each group
(gpp.plt <- ggplot() +
# # add in the consumption vctrs
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = minQN_minQP, yend = 0, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = 0, yend = GPP, col = species, group = Pin),
lwd = 0.75, lty = "dashed") +
# plot GPP
geom_line(data = gpp.sims, aes(x = NPin_molar, y = GPP,col = species,
group = interaction(species, Pin)), lwd = 0.75) +
geom_point(data = gpp.sims, aes(x = NPin_molar, y = GPP, fill = species, pch = species,
group = Pin), size = 2) +
scale_x_log10() + scale_y_log10() +
ggh4x::facet_grid2(Pin~model) +
scale_shape_manual(values = c(21, 22, 24, 25)) +
scale_color_viridis_d(name = NULL) +
scale_fill_viridis_d(name = NULL) +
labs(x = "Load N:P (molar)",
y = expression("GPP (mg C L"^-1 ~ " day"^-1~")")))
# plot GPP across supply N:P for each group
(gpp.plt <- ggplot() +
# # add in the consumption vctrs
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = minQN_minQP, yend = 0, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = 0, yend = GPP, col = species, group = Pin),
lwd = 0.75, lty = "dashed") +
# plot GPP
geom_line(data = gpp.sims, aes(x = NPin_molar, y = GPP,col = species,
group = interaction(species, Pin)), lwd = 0.75) +
geom_point(data = gpp.sims, aes(x = NPin_molar, y = GPP, fill = species, pch = species,
group = Pin), size = 2) +
scale_x_log10() + scale_y_log10() +
ggh4x::facet_grid2(Pin~model) +
scale_shape_manual(values = c(21, 22, 24, 25)) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
labs(x = "Load N:P (molar)",
y = expression("GPP (mg C L"^-1 ~ " day"^-1~")"),
fill = NULL))
# plot GPP across supply N:P for each group
(gpp.plt <- ggplot() +
# # add in the consumption vctrs
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = minQN_minQP, yend = 0, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = 0, yend = GPP, col = species, group = Pin),
lwd = 0.75, lty = "dashed") +
# plot GPP
geom_line(data = gpp.sims, aes(x = NPin_molar, y = GPP,col = species,
group = interaction(species, Pin)), lwd = 0.75) +
geom_point(data = gpp.sims, aes(x = NPin_molar, y = GPP, fill = species, pch = species,
group = Pin), size = 2) +
scale_x_log10() + scale_y_log10() +
ggh4x::facet_grid2(Pin~model) +
scale_shape_manual(values = c(21, 22, 24, 25)) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
labs(x = "Load N:P (molar)",
y = expression("GPP (mg C L"^-1 ~ " day"^-1~")"),
fill = NULL, col = NULL, pch = NULL))
# C:N
(cn.plt <- ggplot() +
# add in the consumption vctrs
geom_segment(data = consump.vctr.seston[consump.vctr.seston$seston == "C:N",],
aes(y = CNP, x = minQN_minQP, xend = minQN_minQP, yend = 0, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_segment(data = consump.vctr.seston[consump.vctr.seston$seston == "C:N",],
aes(y = CNP, x = minQN_minQP, xend = 0, yend = CNP, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_line(data = seston[seston$seston == "C:N",], aes(NP_inflow, value, col = species, group = interaction(species, Pin)),
lwd = 0.75) +
geom_point(data = seston[seston$seston == "C:N",], aes(NP_inflow, value, fill = species, pch = species, group = Pin), size = 2) +
scale_x_log10() + scale_y_log10() +
ggh4x::facet_grid2(Pin~., scales = "free", independent = "y") +
scale_shape_manual(values = c(21, 22, 23, 24)) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
labs(x = "Load N:P (molar)", y = "Phytoplankton C:N (molar)", fill = NULL, col = NULL, pch = NULL)) +
theme(strip.background = element_blank(),  # Remove the panel border
strip.text = element_blank()
))
# C:N
(cn.plt <- ggplot() +
# add in the consumption vctrs
geom_segment(data = consump.vctr.seston[consump.vctr.seston$seston == "C:N",],
aes(y = CNP, x = minQN_minQP, xend = minQN_minQP, yend = 0, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_segment(data = consump.vctr.seston[consump.vctr.seston$seston == "C:N",],
aes(y = CNP, x = minQN_minQP, xend = 0, yend = CNP, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_line(data = seston[seston$seston == "C:N",], aes(NP_inflow, value, col = species, group = interaction(species, Pin)),
lwd = 0.75) +
geom_point(data = seston[seston$seston == "C:N",], aes(NP_inflow, value, fill = species, pch = species, group = Pin), size = 2) +
scale_x_log10() + scale_y_log10() +
ggh4x::facet_grid2(Pin~., scales = "free", independent = "y") +
scale_shape_manual(values = c(21, 22, 23, 24)) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
labs(x = "Load N:P (molar)", y = "Phytoplankton C:N (molar)", fill = NULL, col = NULL, pch = NULL) +
theme(strip.background = element_blank(),  # Remove the panel border
strip.text = element_blank()
))
(cp.plt <- ggplot() +
# add in the consumption vctrs
geom_segment(data = consump.vctr.seston[consump.vctr.seston$seston == "C:P",],
aes(y = CNP, x = minQN_minQP, xend = minQN_minQP, yend = 0, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_segment(data = consump.vctr.seston[consump.vctr.seston$seston == "C:P",],
aes(y = CNP, x = minQN_minQP, xend = 0, yend = CNP, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_line(data = seston[seston$seston == "C:P",], aes(NP_inflow, value, col = species, group = interaction(species, Pin)),
lwd = 0.75) +
geom_point(data = seston[seston$seston == "C:P",], aes(NP_inflow, value, fill = species, pch = species, group = Pin), size = 2) +
scale_x_log10() + scale_y_log10() +
#ggh4x::facet_grid2(.~seston, scales = "free", independent = "y") +
ggh4x::facet_grid2(Pin~., scales = "free", independent = "y") +
scale_shape_manual(values = c(21, 22, 23, 24)) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
#guides(fill = "none", color = "none", pch = "none", alpha = "none") +
labs(x = "Load N:P (molar)", y = "Phytoplankton C:P (molar)", fill = NULL, col = NULL, pch = NULL) +
theme(strip.background = element_blank(),  # Remove the panel border
strip.text = element_blank()
))
(np.plt <- ggplot() +
# add in the consumption vctrs
geom_segment(data = consump.vctr.seston[consump.vctr.seston$seston == "N:P",],
aes(y = CNP, x = minQN_minQP, xend = minQN_minQP, yend = 0, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_segment(data = consump.vctr.seston[consump.vctr.seston$seston == "N:P",],
aes(y = CNP, x = minQN_minQP, xend = 0, yend = CNP, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_line(data = seston[seston$seston == "N:P",], aes(NP_inflow, value, col = species, group = interaction(species, Pin)),
lwd = 0.75) +
geom_point(data = seston[seston$seston == "N:P",], aes(NP_inflow, value, fill = species, pch = species, group = Pin), size = 2) +
scale_x_log10() + scale_y_log10() +
#ggh4x::facet_grid2(.~seston, scales = "free", independent = "y") +
ggh4x::facet_grid2(Pin~., scales = "free", independent = "y") +
scale_shape_manual(values = c(21, 22, 23, 24)) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
#guides(fill = "none", color = "none", pch = "none", alpha = "none") +
labs(x = "Load N:P (molar)", y = "Phytoplankton N:P (molar)", fill = NULL, col = NULL, pch = NULL))
cnp.plt <- ggarrange(plotlist = list(cn.plt, cp.plt, np.plt),
ncol = 3, labels = c("a", "b", "c"),
common.legend = T, legend = "bottom",
align = "hv")
cnp.plt
cnp.plt
save_plot("figures/seston_framework.png", cnp.plt, base_height = 5, base_width = 8)
save_plot("figures/seston_framework.png", cnp.plt, base_height = 8, base_width = 5)
save_plot("figures/seston_framework.png", cnp.plt, base_height = 6, base_width = 8)
# load traits used to fill lists
traits <- readr::read_csv("data4input/phyto_traits4models_21June2024.csv")[,-1]
traits
class(traits)
traits2 <- data.frame(
Trait = c("K_N_mgL", "K_P_mgL", "Qmax_mg_N_mg_C", "Qmax_mg_P_mg_C", "Qmin_mg_N_mg_C",
"Qmin_mg_P_mg_C", "Vmax_mg_N_mg_C", "Vmax_mg_P_mg_C", "umax_N", "umax_P", "K_light", "umax"),
diatoms = c(0.064, 0.005, 0.201, 0.146, 0.155, 0.02, 4.49, 0.608, 0.86, 0.61, 167.8, 0.455),
greens = c(0.036, 0.028, 0.068, 0.015, 0.025, 0.001, 0.416, 0.243, 1.32, 0.63, 165.25, 0.875),
cyanos = c(0.033, 0.026, 0.023, 0.008, 0.01, 0.001, 0.034, 0.113, 0.86, 0.655, 88.6, 0.64),
average = c(0.05, 0.0165, 0.1345, 0.0805, 0.09, 0.0105, 2.453, 0.4255, 1.09, 0.62, 166.525, 0.665)
)
class(traits2)
traits2 <- tibble::tibble(
Trait = c("K_N_mgL", "K_P_mgL", "Qmax_mg_N_mg_C", "Qmax_mg_P_mg_C", "Qmin_mg_N_mg_C",
"Qmin_mg_P_mg_C", "Vmax_mg_N_mg_C", "Vmax_mg_P_mg_C", "umax_N", "umax_P", "K_light", "umax"),
diatoms = c(0.064, 0.005, 0.201, 0.146, 0.155, 0.02, 4.49, 0.608, 0.86, 0.61, 167.8, 0.455),
greens = c(0.036, 0.028, 0.068, 0.015, 0.025, 0.001, 0.416, 0.243, 1.32, 0.63, 165.25, 0.875),
cyanos = c(0.033, 0.026, 0.023, 0.008, 0.01, 0.001, 0.034, 0.113, 0.86, 0.655, 88.6, 0.64),
average = c(0.05, 0.0165, 0.1345, 0.0805, 0.09, 0.0105, 2.453, 0.4255, 1.09, 0.62, 166.525, 0.665)
)
class(traits2)
### Code to store algae parameter vectors
# traits are from Olson et al 2024 in prep.
# trait values aggregated from Edwards et al 2015 https://figshare.com/articles/dataset/Data_Paper_Data_Paper/3562857?file=5635515
# create table with trait values
traits <- tibble::tibble(
Trait = c("K_N_mgL", "K_P_mgL", "Qmax_mg_N_mg_C", "Qmax_mg_P_mg_C", "Qmin_mg_N_mg_C",
"Qmin_mg_P_mg_C", "Vmax_mg_N_mg_C", "Vmax_mg_P_mg_C", "umax_N", "umax_P", "K_light", "umax"),
diatoms = c(0.064, 0.005, 0.201, 0.146, 0.155, 0.02, 4.49, 0.608, 0.86, 0.61, 167.8, 0.455),
greens = c(0.036, 0.028, 0.068, 0.015, 0.025, 0.001, 0.416, 0.243, 1.32, 0.63, 165.25, 0.875),
cyanos = c(0.033, 0.026, 0.023, 0.008, 0.01, 0.001, 0.034, 0.113, 0.86, 0.655, 88.6, 0.64),
average = c(0.05, 0.0165, 0.1345, 0.0805, 0.09, 0.0105, 2.453, 0.4255, 1.09, 0.62, 166.525, 0.665)
)
# average algae static model
static.algae <- c(
# lake parameters
SA= 1,		# lake surface area in km2
zmix = 2, # lake mixing depth in m
# varies by simulation
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
HRT = 365, # water residence time in days
# algae physiology parameters
umax1 = traits[12, "average"],
lA=0.1,			# mortality rate day-1
v=0.1,			# m d-1; sinking loss of algae
KP1 = traits[2, "average"] * 1000, # phosphorus half sat constant in mg P m^-3 f
QP1 = traits[6, "average"], # algae cell P quota in mg P mg^-1 C^-1
KN1 = traits[1, "average"] * 1000, # nitrogen half sat constant in mg N m^-3
QN1 = traits[5, "average"] # algae cell N quota in mg N mg^-1 C^-1
)
names(static.algae) <- c("SA", "zmix", "Pin", "Nin", "HRT", "umax1", "lA", "v",
"KP1",  "QP1", "KN1",  "QN1")
names(static.algae)
static.algae <- unlist(static.algae)
# diatoms static model
static.diatoms <- c(
# lake parameters
SA= 1,		# lake surface area in km2
zmix = 2, # lake mixing depth in m
# varies by simulation
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
HRT = 365, # water residence time in days
# algae physiology parameters
umax1 = traits[12, "diatoms"],
lA=0.1,			# mortality rate day-1
v=0.1,			# m d-1; sinking loss of algae
KP1 = traits[2, "diatoms"] * 1000, # phosphorus half sat constant in mg P m^-3 f
QP1 = traits[6, "diatoms"], # algae cell P quota in mg P mg^-1 C^-1
KN1 = traits[1, "diatoms"] * 1000, # nitrogen half sat constant in mg N m^-3
QN1 = traits[5, "diatoms"] # algae cell N quota in mg N mg^-1 C^-1
)
names(static.diatoms) <- c("SA", "zmix", "Pin", "Nin", "HRT", "umax1", "lA", "v",
"KP1",  "QP1", "KN1",  "QN1")
names(static.diatoms)
static.diatoms <- unlist(static.diatoms)
# green algae static model
static.greens <- c(
# lake parameters
SA= 1,		# lake surface area in km2
zmix = 2, # lake mixing depth in m
# varies by simulation
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
HRT = 365, # water residence time in days,
# algae physiology parameters
umax1 = traits[12, "greens"],
lA=0.1,			# mortality rate day-1
v=0.1,			# m d-1; sinking loss of algae
KP1 = traits[2, "greens"] * 1000, # phosphorus half sat constant in mg P m^-3 f
QP1 = traits[6, "greens"], # algae cell P quota in mg P mg^-1 C^-1
KN1 = traits[1, "greens"] * 1000, # nitrogen half sat constant in mg N m^-3
QN1 = traits[5, "greens"] # algae cell N quota in mg N mg^-1 C^-1
)
names(static.greens) <- c("SA", "zmix", "Pin", "Nin", "HRT", "umax1", "lA", "v",
"KP1",  "QP1", "KN1",  "QN1")
names(static.greens)
static.greens <- unlist(static.greens)
# cyanobacteria static model
static.cyanos <- c(
# lake parameters
SA= 1,		# lake surface area in km2
zmix = 2, # lake mixing depth in m
# varies by simulation
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
HRT = 365, # water residence time in days
# algae physiology parameters
umax1 = traits[12, "cyanos"],
lA=0.1,			# mortality rate day-1
v=0.1,			# m d-1; sinking loss of algae
KP1 = traits[2, "cyanos"] * 1000, # phosphorus half sat constant in mg P m^-3 f
QP1 = traits[6, "cyanos"], # algae cell P quota in mg P mg^-1 C^-1
KN1 = traits[1, "cyanos"] * 1000, # nitrogen half sat constant in mg N m^-3
QN1 = traits[5, "cyanos"] # algae cell N quota in mg N mg^-1 C^-1
)
names(static.cyanos) <- c("SA", "zmix", "Pin", "Nin", "HRT", "umax1", "lA", "v",
"KP1",  "QP1", "KN1",  "QN1")
names(static.cyanos)
static.cyanos <- unlist(static.cyanos)
# average algae dynamic model
dynamic.algae <- c(
# lake parameters
SA= 1,		# lake surface area in km2
zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
HRT = 365, # water residence time in days
# algae physiology parameters
umax1 = traits[12, "average"],
lA=0.1,			# mortality rate day-1
v= 0.1,			# m d-1; sinking loss of algae
KP1 = traits[2, "average"] * 1000, # phosphorus half sat constant in mg P m^-3 f
minQP1 = traits[6, "average"], # algae cell P quota in mg P mg^-1 C^-1 f
upP1 = traits[8, "average"], # max uptake rate P per day in mg P mg C^-1 day^-1
KN1 = traits[1, "average"] * 1000, # nitrogen half sat constant in mg N m^-3
minQN1 = traits[5, "average"], # algae cell N quota in mg N mg^-1 C^-1 f
upN1 = traits[7, "average"] # max uptake rate N per day in mg N mg C^-1 day^-1
)
names(dynamic.algae) <- c("SA", "zmix", "Pin", "Nin", "HRT",
"umax1", "lA", "v",
"KP1", "minQP1", "upP1", "KN1",
"minQN1", "upN1")
names(dynamic.algae)
dynamic.algae <- unlist(dynamic.algae)
# diatoms dynamic model
dynamic.diatoms <- c(
# lake parameters
SA= 1,		# lake surface area in km2
zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
HRT = 365, # water residence time in days
# algae physiology parameters
umax1 = traits[12, "diatoms"],
lA=0.1,			# mortality rate day-1
v= 0.1,			# m d-1; sinking loss of algae
KP1 = traits[2, "diatoms"] * 1000, # phosphorus half sat constant in mg P m^-3 f
minQP1 = traits[6, "diatoms"], # algae cell P quota in mg P mg^-1 C^-1 f
upP1 = traits[8, "diatoms"], # max uptake rate P per day in mg P mg C^-1 day^-1
KN1 = traits[1, "diatoms"] * 1000, # nitrogen half sat constant in mg N m^-3
minQN1 = traits[5, "diatoms"], # algae cell N quota in mg N mg^-1 C^-1 f
upN1 = traits[7, "diatoms"] # max uptake rate N per day in mg N mg C^-1 day^-1
)
names(dynamic.diatoms) <- c("SA", "zmix", "Pin", "Nin", "HRT",
"umax1", "lA", "v","KP1", "minQP1", "upP1", "KN1",
"minQN1", "upN1")
names(dynamic.diatoms)
dynamic.diatoms <- unlist(dynamic.diatoms)
# greens dynamic model
dynamic.greens <- c(
# lake parameters
SA= 1,		# lake surface area in km2
zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
HRT = 365, # water residence time in days
# algae physiology parameters
umax1 = traits[12, "greens"],
lA=0.1,			# mortality rate day-1
v= 0.1,			# m d-1; sinking loss of algae
KP1 = traits[2, "greens"] * 1000, # phosphorus half sat constant in mg P m^-3 f
minQP1 = traits[6, "greens"], # algae cell P quota in mg P mg^-1 C^-1 f
upP1 = traits[8, "greens"], # max uptake rate P per day in mg P mg C^-1 day^-1
KN1 = traits[1, "greens"] * 1000, # nitrogen half sat constant in mg N m^-3
minQN1 = traits[5, "greens"], # algae cell N quota in mg N mg^-1 C^-1 f
upN1 = traits[7, "greens"] # max uptake rate N per day in mg N mg C^-1 day^-1
)
names(dynamic.greens) <- c("SA", "zmix", "Pin", "Nin", "HRT",
"umax1", "lA", "v", "KP1", "minQP1", "upP1", "KN1",
"minQN1", "upN1")
names(dynamic.greens)
dynamic.greens <- unlist(dynamic.greens)
# cyanos dynamic model
dynamic.cyanos <- c(
# lake parameters
SA= 1,		# lake surface area in km2
zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
HRT = 365, # water residence time in days
# algae physiology parameters
umax1 = traits[12, "cyanos"],
lA=0.1,			# mortality rate day-1
v= 0.1,			# m d-1; sinking loss of algae
KP1 = traits[2, "cyanos"] * 1000, # phosphorus half sat constant in mg P m^-3 f
minQP1 = traits[6, "cyanos"], # algae cell P quota in mg P mg^-1 C^-1 f
upP1 = traits[8, "cyanos"], # max uptake rate P per day in mg P mg C^-1 day^-1
KN1 = traits[1, "cyanos"] * 1000, # nitrogen half sat constant in mg N m^-3
minQN1 = traits[5, "cyanos"], # algae cell N quota in mg N mg^-1 C^-1 f
upN1 = traits[7, "cyanos"] # max uptake rate N per day in mg N mg C^-1 day^-1
)
names(dynamic.cyanos) <- c("SA", "zmix", "Pin", "Nin", "HRT",
"umax1", "lA", "v", "KP1",
"minQP1", "upP1", "KN1", "minQN1", "upN1")
names(dynamic.cyanos)
dynamic.cyanos <- unlist(dynamic.cyanos)
# set wd
rm(list = ls())
setwd("C:/Users/DanielGschwentner/Documents/GitHub/WoodStoich24_lake_models")
###############################################################################
# Setup
#load packages
pck <- c("deSolve", "tidyverse", "cowplot", "ggthemes","ggpubr")
lapply(pck, require, character.only = T)
theme_set(theme_pubr() + theme(legend.position = "bottom"))
# Load algae parameters
source("algae_param_vctrs.R")
# Load models
# static model with fixed stoichiometry
source("models/static_liebig_no_light.R") # model 1 in Carly's framework
# Droop model
source("models/dynamic_liebig_no_light.R") # model 3 in Carly's framework
# set timesteps
times <- 1:2000 # updated to 2k for publication
################################################################################
# Simulations
# Changed sims to correspond to the "linear" segment of phytoplankton stoichiometry from Klausmeier et al 2004 (also reported in Meunier et al 2014: https://journals.plos.org/plosone/article/file?id=10.1371/journal.pone.0107737&type=printable)
# molar N:P = approx 20 to 40/50 = N:P mass of 9 to 20~ish
# set loads
# low, mid, high P supply --> trophic state
loads <- expand.grid(Pin = c(50, 100, 500),
NP_inflow = seq(5, 30, 1))
loads$Nin <- loads$Pin * loads$NP_inflow
# Static model
static.runs <-  lapply(list(static.algae, static.diatoms, static.greens, static.cyanos), function(x) {
params <- x
lapply(1:nrow(loads), function(i) {
params["Pin"] = loads[i, "Pin"]
params["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100, "P" = loads[i, "Pin"],"N" = loads[i, "Nin"])
run <- ode(y, times, parms = params, func = static.stoich)
return(run[max(times),])
})
})
