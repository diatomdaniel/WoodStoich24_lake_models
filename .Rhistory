umax1 = traits[12, "greens"],
lA=0.1,			# mortality rate day-1
v= 0.1,			# m d-1; sinking loss of algae
KLight = traits[11, "greens"], # light half sat constant
KP1 = traits[2, "greens"] * 1000, # phosphorus half sat constant in mg P m^-3 f
minQP1 = traits[6, "greens"], # algae cell P quota in mg P mg^-1 C^-1 f
upP1 = traits[4, "greens"], # max uptake rate P per day in mg P mg C^-1 day^-1
KN1 = traits[1, "greens"] * 1000, # nitrogen half sat constant in mg N m^-3
minQN1 = traits[5, "greens"], # algae cell N quota in mg N mg^-1 C^-1 f
upN1 = traits[3, "greens"] # max uptake rate N per day in mg N mg C^-1 day^-1
)
names(greens.droop) <- c("SA", "zmix", "Pin", "Nin", "I0", "kBg", "kA",
"umax1", "lA", "v", "KLight",
"KP1", "minQP1", "upP1", "KN1",
"minQN1", "upN1")
names(greens.droop)
greens.droop <- unlist(greens.droop)
### cyanobacteria
## michaelis menten model for green algae traits
cyanos.mich <- c(
# lake parameters
SA= 1,		# lake surface area in km2
zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
# light parameters
I0 = 400, # incident light
kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
# algae physiology parameters
umax1 = traits[12, "cyanos"],
lA=0.1,			# mortality rate day-1
v=0.1,			# m d-1; sinking loss of algae
KLight = traits[11, "cyanos"], # light half sat constant
KP1 = traits[2, "cyanos"] * 1000, # phosphorus half sat constant in mg P m^-3 f
QP1 = traits[6, "cyanos"], # algae cell P quota in mg P mg^-1 C^-1
KN1 = traits[1, "cyanos"] * 1000, # nitrogen half sat constant in mg N m^-3
QN1 = traits[5, "cyanos"] # algae cell N quota in mg N mg^-1 C^-1
)
names(cyanos.mich) <- c("SA", "zmix", "Pin", "Nin", "I0",
"kBg", "kA", "umax1", "lA", "v",
"KLight", "KP1",  "QP1", "KN1",  "QN1")
names(cyanos.mich)
cyanos.mich <- unlist(cyanos.mich)
## droop model for green algae traits
cyanos.droop <- c(
# lake parameters
SA= 1,		# lake surface area in km2
zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
# light parameters
I0 = 400, # surface light
kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
# algae physiology parameters
umax1 = traits[12, "cyanos"],
lA=0.1,			# mortality rate day-1
v= 0.1,			# m d-1; sinking loss of algae
KLight = traits[11, "cyanos"], # light half sat constant
KP1 = traits[2, "cyanos"] * 1000, # phosphorus half sat constant in mg P m^-3 f
minQP1 = traits[6, "cyanos"], # algae cell P quota in mg P mg^-1 C^-1 f
upP1 = traits[4, "cyanos"], # max uptake rate P per day in mg P mg C^-1 day^-1
KN1 = traits[1, "cyanos"] * 1000, # nitrogen half sat constant in mg N m^-3
minQN1 = traits[5, "cyanos"], # algae cell N quota in mg N mg^-1 C^-1 f
upN1 = traits[3, "cyanos"] # max uptake rate N per day in mg N mg C^-1 day^-1
)
names(cyanos.droop) <- c("SA", "zmix", "Pin", "Nin", "I0", "kBg", "kA",
"umax1", "lA", "v", "KLight",
"KP1", "minQP1", "upP1", "KN1",
"minQN1", "upN1")
names(cyanos.droop)
cyanos.droop <- unlist(cyanos.droop)
# nutrient loads
# P = 0.005 to 0.150 g m^-3 = 5 to 150 mg m^-3
# N = 0.005 to 0.150 g m^-3 = 5 to 150 mg m^-3
exp1.loads <- expand.grid(Pin = seq(5, 500,20),
Nin = seq(5, 1000, 20))
## michaelis-menten model
# apply over scenarios
exp1.mich <- lapply(1:nrow(exp1.loads), function(i) {
params.mich["Pin"] = exp1.loads[i, "Pin"]
params.mich["Nin"] = exp1.loads[i, "Nin"]
y <- c("A1" = 100,
"P" = exp1.loads[i, "Pin"],
"N" = exp1.loads[i, "Nin"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
exp1.mich <- do.call(rbind, exp1.mich)
exp1.mich <- as_data_frame(exp1.mich)
exp1.mich$Pin <- exp1.loads$Pin
exp1.mich$Nin <- exp1.loads$Nin
## droop model
# apply over scearions
exp1.droop <- lapply(1:nrow(exp1.loads), function(i) {
params.droop["Pin"] = exp1.loads[i, "Pin"]
params.droop["Nin"] = exp1.loads[i, "Nin"]
y <- c("A1" = 100,
"P" = exp1.loads[i, "Pin"],
"N" = exp1.loads[i, "Nin"],
"QP1" = 0.015,
"QN1" = 0.1)
run <- ode(y, times, parms = params.droop, func = droop.single)
return(run[max(times),])
})
exp1.droop <- do.call(rbind, exp1.droop)
exp1.droop <- as_data_frame(exp1.droop)
exp1.droop$Pin <- exp1.loads$Pin
exp1.droop$Nin <- exp1.loads$Nin
## combine data sets for plotting
exp1.data <- bind_rows(
exp1.mich %>% mutate(model = "Michaelis-Menten"),
exp1.droop %>% mutate(model = "Droop")
) %>%
mutate(model = factor(model, levels = c("Michaelis-Menten", "Droop")))
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)) +
scale_fill_viridis_b(option = "C"))
fig.exp1.gpp
View(traits)
0.016 * 1000
0.005*1000
wesanderson::wes_palette()
library(wesanderson)
wes_palettes
pck <- c("deSolve", "tidyverse", "cowplot", "wesandersen", "ggpubr", "ggtern")
lapply(pck, require, character.only = T)
theme_set(theme_cowplot() +
theme(legend.justification = "center",
legend.position = "bottom",
legend.text = element_text(),
legend.title = element_text()))
# load ODE models
# saved in external files for convenience
# Michalis-Menten model
source("models/mich_single_noLight.R") # michaelis menten kinetics, one algae species; model 1 in Carly's framework
# Droop model
source("models/droop_single_noLight.R") # droop model, one algae species; model 3 in Carly's framework
# load file with phytoplankton traits
traits <- read_csv("data4input/phyto_traits4models_21June2024.csv")[,-1]
# set up scenarios
times <- 1:10000
# nutrient loads
# P = 0.005 to 1 g m^-3 = 5 to 1000 mg m^-3
# N = 0.005 to 10 g m^-3 = 5 to 10,000 mg m^-3
exp1.loads <- expand.grid(Pin = seq(5, 1000,20),
Nin = seq(5, 10000, 20))
# nutrient loads
# P = 0.005 to 1 g m^-3 = 5 to 1000 mg m^-3
# N = 0.005 to 10 g m^-3 = 5 to 10,000 mg m^-3
exp1.loads <- expand.grid(Pin = seq(5, 1000, 50),
Nin = seq(5, 10000, 100))
# nutrient loads
# P = 0.005 to 1 g m^-3 = 5 to 1000 mg m^-3
# N = 0.005 to 10 g m^-3 = 5 to 10,000 mg m^-3
exp1.loads <- expand.grid(Pin = seq(5, 1000, 50),
Nin = seq(5, 10000, 100))
## michaelis-menten model
# apply over scenarios
exp1.mich <- lapply(1:nrow(exp1.loads), function(i) {
params.mich["Pin"] = exp1.loads[i, "Pin"]
params.mich["Nin"] = exp1.loads[i, "Nin"]
y <- c("A1" = 100,
"P" = exp1.loads[i, "Pin"],
"N" = exp1.loads[i, "Nin"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
# nutrient loads
# P = 0.005 to 1 g m^-3 = 5 to 1000 mg m^-3
# N = 0.005 to 10 g m^-3 = 5 to 10,000 mg m^-3
exp1.loads <- expand.grid(Pin = seq(5, 1000, 100),
Nin = seq(5, 10000, 500))
# nutrient loads
# P = 0.005 to 1 g m^-3 = 5 to 1000 mg m^-3
# N = 0.005 to 10 g m^-3 = 5 to 10,000 mg m^-3
exp1.loads <- expand.grid(Pin = seq(5, 1000, 100),
Nin = seq(5, 10000, 500))
## michaelis-menten model
# apply over scenarios
exp1.mich <- lapply(1:nrow(exp1.loads), function(i) {
params.mich["Pin"] = exp1.loads[i, "Pin"]
params.mich["Nin"] = exp1.loads[i, "Nin"]
y <- c("A1" = 100,
"P" = exp1.loads[i, "Pin"],
"N" = exp1.loads[i, "Nin"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
exp1.mich <- do.call(rbind, exp1.mich)
exp1.mich <- as_data_frame(exp1.mich)
exp1.mich$Pin <- exp1.loads$Pin
exp1.mich$Nin <- exp1.loads$Nin
## droop model
# apply over scearions
exp1.droop <- lapply(1:nrow(exp1.loads), function(i) {
params.droop["Pin"] = exp1.loads[i, "Pin"]
params.droop["Nin"] = exp1.loads[i, "Nin"]
y <- c("A1" = 100,
"P" = exp1.loads[i, "Pin"],
"N" = exp1.loads[i, "Nin"],
"QP1" = 0.015,
"QN1" = 0.1)
run <- ode(y, times, parms = params.droop, func = droop.single)
return(run[max(times),])
})
exp1.droop <- do.call(rbind, exp1.droop)
exp1.droop <- as_data_frame(exp1.droop)
exp1.droop$Pin <- exp1.loads$Pin
exp1.droop$Nin <- exp1.loads$Nin
## combine data sets for plotting
exp1.data <- bind_rows(
exp1.mich %>% mutate(model = "Michaelis-Menten"),
exp1.droop %>% mutate(model = "Droop")
) %>%
mutate(model = factor(model, levels = c("Michaelis-Menten", "Droop")))
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)) +
scale_fill_manual(values = wes_palette(10, name = "Zissou",
type = "continuous")))
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)) +
scale_fill_manual(values = wes_palette(10, name = "zissou",
type = "continuous")))
wes_palettes
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)) +
scale_fill_manual(values = wes_palette(10, name = "Zissou1",
type = "continuous")))
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)) +
scale_fill_manual(values = wes_palette(10, name = "Zissou1",
type = "discrete")))
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)) +
scale_fill_manual(values = wes_palette(5, name = "Zissou1",
type = "discrete")))
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)) +
scale_fill_jco())
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)) +
scale_fill_flatui())
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)) +
scale_fill_jco())
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)))
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)) +
scale_fill_viridis_b(option = "C"))
## plot N:P for experiment 1
# QN
fig.exp1.np1 <- exp1.data %>%
filter(model == "Droop") %>%
ggplot(aes(Pin, Nin, fill = 1/QN1)) +
geom_raster() +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = "Cell C:N mass") +
scale_fill_viridis_b())
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)) +
scale_fill_viridis_b())
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)) +
scale_fill_viridis_c())
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)) +
scale_fill_viridis_c())
## plot N:P for experiment 1
# QN
fig.exp1.np1 <- exp1.data %>%
filter(model == "Droop") %>%
ggplot(aes(Pin, Nin, fill = 1/QN1)) +
geom_raster() +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = "Cell C:N mass") +
scale_fill_viridis_b()
# QP
fig.exp1.np2 <- exp1.data %>%
filter(model == "Droop") %>%
ggplot(aes(Pin, Nin, fill = 1/QP1)) +
geom_raster() +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = "Cell C:P mass") +
scale_fill_viridis_c()
# N:P
fig.exp1.np3 <- exp1.data %>%
filter(model == "Droop") %>%
mutate(N_P_cell = QN1/QP1) %>%
ggplot(aes(Pin, Nin, fill = N_P_cell)) +
geom_raster() +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("Cell N:P mass")) +
scale_fill_viridis_c()
# merge to produce figure
fig.exp1.np <- ggarrange(
plotlist = list(fig.exp1.np1, fig.exp1.np2, fig.exp1.np3),
nrow = 1, ncol = 3, align = "hv", labels = c("a", "b", "c"))
fig.exp1.np
## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
ggplot(aes(Pin, Nin, fill = GPP)) +
geom_raster() +
facet_wrap(model~., ncol = 2, nrow = 1) +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("GPP mg C m"^-2 ~ "day"^-1)) +
scale_fill_viridis_c())
## plot N:P for experiment 1
# QN
fig.exp1.np1 <- exp1.data %>%
filter(model == "Droop") %>%
ggplot(aes(Pin, Nin, fill = 1/QN1)) +
geom_raster() +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = "Cell C:N mass") +
scale_fill_viridis_b()
# QP
fig.exp1.np2 <- exp1.data %>%
filter(model == "Droop") %>%
ggplot(aes(Pin, Nin, fill = 1/QP1)) +
geom_raster() +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = "Cell C:P mass") +
scale_fill_viridis_c()
# N:P
fig.exp1.np3 <- exp1.data %>%
filter(model == "Droop") %>%
mutate(N_P_cell = QN1/QP1) %>%
ggplot(aes(Pin, Nin, fill = N_P_cell)) +
geom_raster() +
geom_abline(intercept = 0, slope = 16*14.007/30.974,
lty = "dashed", col = "white", lwd = 1) +
labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
fill = expression("Cell N:P mass")) +
scale_fill_viridis_c()
# merge to produce figure
fig.exp1.np <- ggarrange(
plotlist = list(fig.exp1.np1, fig.exp1.np2, fig.exp1.np3),
nrow = 1, ncol = 3, align = "hv", labels = c("a", "b", "c"))
fig.exp1.np
# nutrient loads
# P = 0.005 to 0.150 g m^-3 = 5 to 150 mg m^-3
# N:P = 22.61, 13.57, 9.04, 7.24, 4.52, 2.26  by mass
exp2.loads <- expand.grid(Pin = seq(5, 1000,100),
NP_inflow = c(90.44, 22.61, 7.24, 2.26))
exp2.loads$Nin <- exp2.loads$Pin * exp2.loads$NP_inflow
## michaelis-menten model
# apply over scenarios
exp2.mich <- lapply(1:nrow(exp2.loads), function(i) {
params.mich["Pin"] = exp2.loads[i, "Pin"]
params.mich["Nin"] = exp2.loads[i, "Nin"]
y <- c("A1" = 100,
"P" = exp2.loads[i, "Pin"],
"N" = exp2.loads[i, "Nin"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
exp2.mich <- do.call(rbind, exp2.mich)
exp2.mich <- as_data_frame(exp2.mich)
exp2.mich$Pin <- exp2.loads$Pin
exp2.mich$NP_inflow <- exp2.loads$NP_inflow
## droop model
# apply over scearions
exp2.droop <- lapply(1:nrow(exp2.loads), function(i) {
params.droop["Pin"] = exp2.loads[i, "Pin"]
params.droop["Nin"] = exp2.loads[i, "Nin"]
y <- c("A1" = 100,
"P" = exp2.loads[i, "Pin"],
"N" = exp2.loads[i, "Nin"],
"QP1" = 0.015,
"QN1" = 0.1)
run <- ode(y, times, parms = params.droop, func = droop.single)
return(run[max(times),])
})
exp2.droop <- do.call(rbind, exp2.droop)
exp2.droop <- as_data_frame(exp2.droop)
exp2.droop$Pin <- exp2.loads$Pin
exp2.droop$NP_inflow <- exp2.loads$NP_inflow
## combine data sets for plotting
exp2.data <- bind_rows(
exp2.mich %>% mutate(model = "Michaelis-Menten"),
exp2.droop %>% mutate(model = "Droop")
) %>%
mutate(model = factor(model, levels = c("Michaelis-Menten", "Droop")))
x <- rep(1, 100)
x < rep(NA, 100)
x <- rep(NA, 100)
x[1] <- 1
for(i in 2:100) {x[i] = x[i-1] * 1.01}
x
x <- rep(NA, 100)
x[1] <- 1
for(i in 2:100) {x[i] = x[i-1] * 1.1}
x
x <- rep(NA, 365)
x[1] <- 1
for(i in 2:365) {x[i] = x[i-1] * 1.1}
x
