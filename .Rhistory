"Acton" = "0",
"EastLong" = "1",
"Feeagh" = "2",
"Harp" = "3",
"Langtjern" = "4",
"Lillinoah" = "5",
"Lillsjoliden" = "6",
"Mangstrettjarn" = "7",
"Mendota" = "8",
"Morris" = "9",
"Struptjarn" = "9",
"Trout" = "19",
"Vortsjarv" = "9"
)
))
(predicted.plt <- base.predictions.corman %>%
ggplot() +
geom_smooth(aes(log10(GPP), log10(est_GPP)), method = "lm", alpha = 0.3) +
geom_point(aes(log10(GPP), log10(est_GPP), pch = Lake), size = 2, alpha = 0.6) +
ggh4x::facet_grid2(model ~ species,  scales = "free", independent = "y") +
labs(x = expression("log"[10] ~ "(GPP mg C L"^-1 ~ "day"^-1 ~ ")"),
y = expression("log"[10] ~ "(modelled GPP mg C L"^-1 ~ "day"^-1 ~ ")")) +
scale_shape_manual(
values = c(
"Acton" = "0",
"EastLong" = "1",
"Feeagh" = "2",
"Harp" = "3",
"Langtjern" = "4",
"Lillinoah" = "5",
"Lillsjoliden" = "6",
"Mangstrettjarn" = "7",
"Mendota" = "8",
"Morris" = "9",
"Struptjarn" = "9",
"Trout" = "9",
"Vortsjarv" = "9"
)
))
(predicted.plt <- base.predictions.corman %>%
ggplot() +
geom_smooth(aes(log10(GPP), log10(est_GPP)), method = "lm", alpha = 0.3) +
geom_point(aes(log10(GPP), log10(est_GPP), pch = Lake), size = 2, alpha = 0.6) +
ggh4x::facet_grid2(model ~ species,  scales = "free", independent = "y") +
labs(x = expression("log"[10] ~ "(GPP mg C L"^-1 ~ "day"^-1 ~ ")"),
y = expression("log"[10] ~ "(modelled GPP mg C L"^-1 ~ "day"^-1 ~ ")")) +
scale_shape_manual(
values = c(
"Acton" = 0,
"EastLong" = 1,
"Feeagh" = 2,
"Harp" = 3,
"Langtjern" = 4,
"Lillinoah" = 5,
"Lillsjoliden" = 6,
"Mangstrettjarn" = 7,
"Mendota" = 8,
"Morris" = 9,
"Struptjarn" = 9,
"Trout" = 9,
"Vortsjarv" = 9
)
))
(predicted.plt <- base.predictions.corman %>%
ggplot() +
geom_smooth(aes(log10(GPP), log10(est_GPP)), method = "lm", alpha = 0.3) +
geom_point(aes(log10(GPP), log10(est_GPP), pch = Lake), size = 2 +
ggh4x::facet_grid2(model ~ species,  scales = "free", independent = "y") +
labs(x = expression("log"[10] ~ "(GPP mg C L"^-1 ~ "day"^-1 ~ ")"),
y = expression("log"[10] ~ "(modelled GPP mg C L"^-1 ~ "day"^-1 ~ ")")) +
scale_shape_manual(
values = c(
"Acton" = 0,
"EastLong" = 1,
"Feeagh" = 2,
"Harp" = 3,
"Langtjern" = 4,
"Lillinoah" = 5,
"Lillsjoliden" = 6,
"Mangstrettjarn" = 7,
"Mendota" = 8,
"Morris" = 9,
"Struptjarn" = 10,
"Trout" = 11,
"Vortsjarv" = 12
)
))
(predicted.plt <- base.predictions.corman %>%
ggplot() +
geom_smooth(aes(log10(GPP), log10(est_GPP)), method = "lm", alpha = 0.3) +
geom_point(aes(log10(GPP), log10(est_GPP), pch = Lake), size = 2) +
ggh4x::facet_grid2(model ~ species,  scales = "free", independent = "y") +
labs(x = expression("log"[10] ~ "(GPP mg C L"^-1 ~ "day"^-1 ~ ")"),
y = expression("log"[10] ~ "(modelled GPP mg C L"^-1 ~ "day"^-1 ~ ")")) +
scale_shape_manual(
values = c(
"Acton" = 0,
"EastLong" = 1,
"Feeagh" = 2,
"Harp" = 3,
"Langtjern" = 4,
"Lillinoah" = 5,
"Lillsjoliden" = 6,
"Mangstrettjarn" = 7,
"Mendota" = 8,
"Morris" = 9,
"Struptjarn" = 10,
"Trout" = 11,
"Vortsjarv" = 12
)
))
(predicted.plt <- base.predictions.corman %>%
ggplot() +
geom_smooth(aes(log10(GPP), log10(est_GPP)), method = "lm", alpha = 0.3) +
geom_point(aes(log10(GPP), log10(est_GPP), pch = Lake), size = 2) +
ggh4x::facet_grid2(model ~ species,  scales = "free", independent = "y") +
labs(x = expression("log"[10] ~ "(GPP mg C L"^-1 ~ "day"^-1 ~ ")"),
y = expression("log"[10] ~ "(modelled GPP mg C L"^-1 ~ "day"^-1 ~ ")"),
shape = NULL) +
scale_shape_manual(
values = c(
"Acton" = 0,
"EastLong" = 1,
"Feeagh" = 2,
"Harp" = 3,
"Langtjern" = 4,
"Lillinoah" = 5,
"Lillsjoliden" = 6,
"Mangstrettjarn" = 7,
"Mendota" = 8,
"Morris" = 9,
"Struptjarn" = 10,
"Trout" = 11,
"Vortsjarv" = 12
)
) +
theme(legend.position = "right"))
save_plot("figures/base_predictions_cormanGPP.png", base_height = 5, base_width = 8)
save_plot("figures/base_predictions_cormanGPP.png", predicted.plt, base_height = 5, base_width = 8)
save_plot("figures/base_predictions_cormanGPP.png", predicted.plt, base_height = 3, base_width = 10)
save_plot("figures/base_predictions_cormanGPP.png", predicted.plt, base_height = 4, base_width = 10)
# calculate rsq values
rsq <- expand.grid(model = c("static", "dynamic"),
species = c("average", "diatoms", "greens", "cyanos"))
rsq$rsq <- NA
i = 1
# calculate rsq values
rsq <- expand.grid(model = c("static", "dynamic"),
species = c("average", "diatoms", "greens", "cyanos"))
rsq$rsq <- NA
subset <- base.predictions.corman %>% filter(species = rsq[i, "species"]  & model = rsq[i, "model"])
subset <- base.predictions.corman %>% filter(species == rsq[i, "species"]  & model == rsq[i, "model"])
subset <- subset %>%
mutate(log10GPP = log10(GPP),
log10estGPP = log10(est_GPP)) %>%
mutate(ifelse(is.infinite(log10GPP), NA, log10GPP))
View(subset)
r <- summary(lm(log10estGPP ~ log10GPP, data = subset))$adj.rsquare
lm(log10estGPP ~ log10GPP, data = subset)
lm(log10estGPP ~ log10GPP, data = subset, na.rm = T)
subset <- subset %>%
mutate(log10GPP = log10(GPP),
log10estGPP = log10(est_GPP)) %>%
mutate(ifelse(is.infinite(log10GPP), NA, log10GPP)) %>%
drop_na(log10GPP)
View(subset)
subset <- subset %>%
mutate(log10GPP = log10(GPP),
log10estGPP = log10(est_GPP)) %>%
mutate(log10GPP = ifelse(is.infinite(log10GPP), NA, log10GPP))
View(subset)
r <- summary(lm(log10estGPP ~ log10GPP, data = subset))$adj.rsquare
r
summary(lm(log10estGPP ~ log10GPP, data = subset))
r <- summary(lm(log10estGPP ~ log10GPP, data = subset))
# calculate rsq values
rsq <- expand.grid(model = c("static", "dynamic"),
species = c("average", "diatoms", "greens", "cyanos"))
rsq$rsq <- NA
lapply(1:nrow(rsq), function(i) {
subset <- base.predictions.corman %>% filter(species == rsq[i, "species"]  & model == rsq[i, "model"])
subset <- subset %>%
mutate(log10GPP = log10(GPP),
log10estGPP = log10(est_GPP)) %>%
mutate(log10GPP = ifelse(is.infinite(log10GPP), NA, log10GPP))
r <- summary(lm(log10estGPP ~ log10GPP, data = subset))$adj.rs.quared
rsq[i, "rsq"] <- r
})
i = 1
subset <- base.predictions.corman %>% filter(species == rsq[i, "species"]  & model == rsq[i, "model"])
subset <- subset %>%
mutate(log10GPP = log10(GPP),
log10estGPP = log10(est_GPP)) %>%
mutate(log10GPP = ifelse(is.infinite(log10GPP), NA, log10GPP))
r <- summary(lm(log10estGPP ~ log10GPP, data = subset))$adj.rs.quared
r
r <- summary(lm(log10estGPP ~ log10GPP, data = subset))$adj.r.squared
r
rsq[i, "rsq"] <- r
View(rsq)
# calculate rsq values
rsq <- expand.grid(model = c("static", "dynamic"),
species = c("average", "diatoms", "greens", "cyanos"))
rsq$rsq <- NA
lapply(1:nrow(rsq), function(i) {
subset <- base.predictions.corman %>% filter(species == rsq[i, "species"]  & model == rsq[i, "model"])
subset <- subset %>%
mutate(log10GPP = log10(GPP),
log10estGPP = log10(est_GPP)) %>%
mutate(log10GPP = ifelse(is.infinite(log10GPP), NA, log10GPP))
r <- summary(lm(log10estGPP ~ log10GPP, data = subset))$adj.r.squared
rsq[i, "rsq"] <- r
})
View(rsq)
rsq$rsq <- NA
r <- lapply(1:nrow(rsq), function(i) {
subset <- base.predictions.corman %>% filter(species == rsq[i, "species"]  & model == rsq[i, "model"])
subset <- subset %>%
mutate(log10GPP = log10(GPP),
log10estGPP = log10(est_GPP)) %>%
mutate(log10GPP = ifelse(is.infinite(log10GPP), NA, log10GPP))
r <- summary(lm(log10estGPP ~ log10GPP, data = subset))$adj.r.squared
return(r)
})
rsq$rsq <- unlist(r)
View(rsq)
rsq$rsq <- round(unlist(r), 2)
View(rsq)
# print  rmse
base.rmse
View(base.rmse)
apply(base.rmse, 2, round, 2)
apply(base.rmse[,-1], 2, round, 2)
traits
static.grid.search <- expand.grid(
KP1 = traits["K_P_mgL", "average"] * 1000,
KN1 =  traits["K_N_mgL", "average"] * 1000,
miNQP1 =  seq(0.01, 0.1, 0.1),
minQN1 = seq(0.01, 0.1, 0.1),
umax1 = seq(0.1, 1, 0.1)
)
static.grid.search <- expand.grid(
KP1 = traits["K_P_mgL", "average"] * 1000,
KN1 =  traits["K_N_mgL", "average"] * 1000,
miNQP1 =  seq(0.01, 0.1, 0.01),
minQN1 = seq(0.01, 0.1, 0.01),
umax1 = seq(0.1, 1, 0.01)
)
static.grid.search <- expand.grid(
KP1 = traits["K_P_mgL", "average"] * 1000,
KN1 =  traits["K_N_mgL", "average"] * 1000,
miNQP1 =  seq(0.01, 0.2, 0.01),
minQN1 = seq(0.01, 0.2, 0.01),
umax1 = seq(0.1, 1, 0.01)
)
static.grid.search <- expand.grid(
KP1 = traits["K_P_mgL", "average"] * 1000,
KN1 =  traits["K_N_mgL", "average"] * 1000,
miNQP1 =  seq(0.01, 0.2, 0.02),
minQN1 = seq(0.01, 0.2, 0.02),
umax1 = seq(0.1, 1, 0.01)
)
# repeat grid nrow(corman2) times
static.grid.search <- static.grid.search %>%
slice(rep(1:n(), each = nrow(corman2)))
View(static.grid.search)
trait
`traits`
traits$average["K_P_mgL"] * 1000
traits$average["K_P_mgL"]
static.grid.search <- expand.grid(
KP1 = traits[2, "average"] * 1000,
KN1 =  traits[1, "average"] * 1000,
miNQP1 =  seq(0.01, 0.2, 0.02),
minQN1 = seq(0.01, 0.2, 0.02),
umax1 = seq(0.1, 1, 0.01)
)
# repeat grid nrow(corman2) times
static.grid.search <- static.grid.search %>%
slice(rep(1:n(), each = nrow(corman2)))
View(static.grid.search)
traits[2, "average"] * 1000
traits[1, "average"] * 1000
static.grid.search <- expand.grid(
KP1 = 16.5
KN1 =  50,
static.grid.search <- expand.grid(
KP1 = 16.5,
KN1 =  50,
miNQP1 =  seq(0.01, 0.2, 0.02),
minQN1 = seq(0.01, 0.2, 0.02),
umax1 = seq(0.1, 1, 0.01)
)
# repeat grid nrow(corman2) times
static.grid.search <- static.grid.search %>%
slice(rep(1:n(), each = nrow(corman2)))
static.grid.search <- expand.grid(
KP1 = 16.5,
KN1 =  50,
miNQP1 =  seq(0.01, 0.2, 0.02),
minQN1 = seq(0.01, 0.2, 0.02),
umax1 = seq(0.1, 1, 0.01)
)
# repeat grid nrow(corman2) times
static.grid.search2 <- static.grid.search %>%
slice(rep(1:n(), each = nrow(corman2)))
static.grid.search <- expand.grid(
KP1 = 16.5,
KN1 =  50,
miNQP1 =  seq(0.01, 0.2, 0.02),
minQN1 = seq(0.01, 0.2, 0.02),
umax1 = seq(0.1, 1, 0.01)
)
# repeat grid nrow(corman2) times
static.grid.search2 <- static.grid.search %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
static.grid.search2$Lake <- rep(corman2$Lake, nrow(static.grid.search))
static.grid.search2$GPP <- rep(corman2$GPP, nrow(static.grid.search))
static.grid.search2$TN_load <- rep(corman2$TN_load, nrow(static.grid.search))
static.grid.search2$TP_load <- rep(corman2$TP_load, nrow(static.grid.search))
static.grid.search2$SA <- rep(corman2$SA, nrow(static.grid.search))
static.grid.search2$DOC_mgL <- rep(corman2$DOC_mgL, nrow(static.grid.search))
static.grid.search2$z <- rep(corman2$z, nrow(static.grid.search))
#takes over an hour to run!!
(start <- Sys.time())
mm.grid <- lapply(1:nrow(grid.new), function(i){
# indexing
params.mich["SA"] = grid.new[i, "SA"]
params.mich["DOC"] = grid.new[i, "DOC_mgL"]
params.mich["z"] = grid.new[i, "z_m"]
params.mich["KP1"] = grid.new[i, "KP1"]
params.mich["KN1"] = grid.new[i, "KN1"]
params.mich["QP1"] = grid.new[i, "minQP1"]
params.mich["QN1"] = grid.new[i, "minQN1"]
params.mich["Pin"] = grid.new[i, "TP_load"]
params.mich["Nin"] = grid.new[i, "TN_load"]
# starting values
y <- c("A1" = 100, "P" = grid.new[i, "TP_load"], "N" = grid.new[i, "TN_load"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
static.grid.search <- expand.grid(
KP1 = 16.5,
KN1 =  50,
miNQP1 =  seq(0.01, 0.2, 0.02),
minQN1 = seq(0.01, 0.2, 0.02),
umax1 = seq(0.1, 1, 0.01)
)
# repeat grid nrow(corman2) times
static.grid.search2 <- static.grid.search %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
static.grid.search2$Lake <- rep(corman2$Lake, nrow(static.grid.search))
static.grid.search2$GPP <- rep(corman2$GPP, nrow(static.grid.search))
static.grid.search2$TN_in <- rep(corman2$TN_in, nrow(static.grid.search))
static.grid.search2$TP_in <- rep(corman2$TP_in, nrow(static.grid.search))
static.grid.search2$SA <- rep(corman2$SA, nrow(static.grid.search))
static.grid.search2$DOC_mgL <- rep(corman2$DOC_mgL, nrow(static.grid.search))
static.grid.search2$z <- rep(corman2$z, nrow(static.grid.search))
View(static.grid.search2)
static.grid.search <- expand.grid(
KP1 = 16.5,
KN1 =  50,
miNQP1 =  seq(0.01, 0.2, 0.02),
minQN1 = seq(0.01, 0.2, 0.02),
umax1 = seq(0.1, 1, 0.01)
)
# repeat grid nrow(corman2) times
static.grid.search2 <- static.grid.search %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
static.grid.search2$Lake <- rep(corman2$Lake, nrow(static.grid.search))
static.grid.search2$GPP <- rep(corman2$GPP, nrow(static.grid.search))
static.grid.search2$TN_in <- rep(corman2$TN_in, nrow(static.grid.search))
static.grid.search2$TP_in <- rep(corman2$TP_in, nrow(static.grid.search))
static.grid.search2$SA <- rep(corman2$SA, nrow(static.grid.search))
static.grid.search2$DOC_mgL <- rep(corman2$DOC_mgL, nrow(static.grid.search))
static.grid.search2$z <- rep(corman2$z, nrow(static.grid.search))
#takes over an hour to run!!
(start <- Sys.time())
static.grid.search.out <- lapply(1:nrow(static.grid.search2), function(i){
# indexing
static.algae["SA"] = static.grid.search2[i, "SA"]
static.algae["DOC"] = static.grid.search2[i, "DOC_mgL"]
static.algae["z"] = static.grid.search2[i, "z"]
static.algae["KP1"] = static.grid.search2[i, "KP1"]
static.algae["KN1"] = static.grid.search2[i, "KN1"]
static.algae["QP1"] = static.grid.search2[i, "minQP1"]
static.algae["QN1"] = static.grid.search2[i, "minQN1"]
static.algae["umax1"] = static.grid.search2[i, "umax1"]
static.algae["Pin"] = static.grid.search2[i, "TP_in"]
static.algae["Nin"] = static.grid.search2[i, "TN_in"]
# starting values
y <- c("A1" = 100, "P" = static.grid.search2[i, "TP_in"], "N" = static.grid.search2[i, "TN_in"])
run <- ode(y, times, parms = params.mich, func = static.stoich.zmix)
return(run[max(times),])
})
static.grid.search <- expand.grid(
KP1 = 16.5,
KN1 =  50,
minQP1 =  seq(0.01, 0.2, 0.02),
minQN1 = seq(0.01, 0.2, 0.02),
umax1 = seq(0.1, 1, 0.01)
)
# repeat grid nrow(corman2) times
static.grid.search2 <- static.grid.search %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
static.grid.search2$Lake <- rep(corman2$Lake, nrow(static.grid.search))
static.grid.search2$GPP <- rep(corman2$GPP, nrow(static.grid.search))
static.grid.search2$TN_in <- rep(corman2$TN_in, nrow(static.grid.search))
static.grid.search2$TP_in <- rep(corman2$TP_in, nrow(static.grid.search))
static.grid.search2$SA <- rep(corman2$SA, nrow(static.grid.search))
static.grid.search2$DOC_mgL <- rep(corman2$DOC_mgL, nrow(static.grid.search))
static.grid.search2$z <- rep(corman2$z, nrow(static.grid.search))
#takes over an hour to run!!
(start <- Sys.time())
static.grid.search.out <- lapply(1:nrow(static.grid.search2), function(i){
# indexing
static.algae["SA"] = static.grid.search2[i, "SA"]
static.algae["DOC"] = static.grid.search2[i, "DOC_mgL"]
static.algae["z"] = static.grid.search2[i, "z"]
static.algae["KP1"] = static.grid.search2[i, "KP1"]
static.algae["KN1"] = static.grid.search2[i, "KN1"]
static.algae["QP1"] = static.grid.search2[i, "minQP1"]
static.algae["QN1"] = static.grid.search2[i, "minQN1"]
static.algae["umax1"] = static.grid.search2[i, "umax1"]
static.algae["Pin"] = static.grid.search2[i, "TP_in"]
static.algae["Nin"] = static.grid.search2[i, "TN_in"]
# starting values
y <- c("A1" = 100, "P" = static.grid.search2[i, "TP_in"], "N" = static.grid.search2[i, "TN_in"])
run <- ode(y, times, parms = params.mich, func = static.stoich.zmix)
return(run[max(times),])
})
static.grid.search <- expand.grid(
KP1 = 16.5,
KN1 =  50,
minQP1 =  seq(0.01, 0.2, 0.02),
minQN1 = seq(0.01, 0.2, 0.02),
umax1 = seq(0.1, 1, 0.01)
)
# repeat grid nrow(corman2) times
static.grid.search2 <- static.grid.search %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
static.grid.search2$Lake <- rep(corman2$Lake, nrow(static.grid.search))
static.grid.search2$GPP <- rep(corman2$GPP, nrow(static.grid.search))
static.grid.search2$TN_in <- rep(corman2$TN_in, nrow(static.grid.search))
static.grid.search2$TP_in <- rep(corman2$TP_in, nrow(static.grid.search))
static.grid.search2$SA <- rep(corman2$SA, nrow(static.grid.search))
static.grid.search2$DOC_mgL <- rep(corman2$DOC_mgL, nrow(static.grid.search))
static.grid.search2$z <- rep(corman2$z, nrow(static.grid.search))
#takes over an hour to run!!
(start <- Sys.time())
static.grid.search.out <- lapply(1:nrow(static.grid.search2), function(i){
# indexing
static.algae["SA"] = static.grid.search2[i, "SA"]
static.algae["DOC"] = static.grid.search2[i, "DOC_mgL"]
static.algae["z"] = static.grid.search2[i, "z"]
static.algae["KP1"] = static.grid.search2[i, "KP1"]
static.algae["KN1"] = static.grid.search2[i, "KN1"]
static.algae["QP1"] = static.grid.search2[i, "minQP1"]
static.algae["QN1"] = static.grid.search2[i, "minQN1"]
static.algae["umax1"] = static.grid.search2[i, "umax1"]
static.algae["Pin"] = static.grid.search2[i, "TP_in"]
static.algae["Nin"] = static.grid.search2[i, "TN_in"]
# starting values
y <- c("A1" = 100, "P" = static.grid.search2[i, "TP_in"], "N" = static.grid.search2[i, "TN_in"])
run <- ode(y, times, parms = static.algae, func = static.stoich.zmix)
return(run[max(times),])
})
# convert to df
static.grid.search.out <- do.call(rbind, static.grid.search.out)
#takes over an hour to run!!
(start <- Sys.time())
static.grid.search.out <- lapply(1:nrow(static.grid.search2), function(i){
print(i)
# indexing
static.algae["SA"] = static.grid.search2[i, "SA"]
static.algae["DOC"] = static.grid.search2[i, "DOC_mgL"]
static.algae["z"] = static.grid.search2[i, "z"]
static.algae["KP1"] = static.grid.search2[i, "KP1"]
static.algae["KN1"] = static.grid.search2[i, "KN1"]
static.algae["QP1"] = static.grid.search2[i, "minQP1"]
static.algae["QN1"] = static.grid.search2[i, "minQN1"]
static.algae["umax1"] = static.grid.search2[i, "umax1"]
static.algae["Pin"] = static.grid.search2[i, "TP_in"]
static.algae["Nin"] = static.grid.search2[i, "TN_in"]
# starting values
y <- c("A1" = 100, "P" = static.grid.search2[i, "TP_in"], "N" = static.grid.search2[i, "TN_in"])
run <- ode(y, times, parms = static.algae, func = static.stoich.zmix)
return(run[max(times),])
})
static.grid.search <- expand.grid(
KP1 = 16.5,
KN1 =  50,
minQP1 =  seq(0.01, 0.2, 0.02),
minQN1 = seq(0.01, 0.2, 0.02),
umax1 = seq(0.1, 1, 0.02)
)
# repeat grid nrow(corman2) times
static.grid.search2 <- static.grid.search %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
static.grid.search2$Lake <- rep(corman2$Lake, nrow(static.grid.search))
static.grid.search2$GPP <- rep(corman2$GPP, nrow(static.grid.search))
static.grid.search2$TN_in <- rep(corman2$TN_in, nrow(static.grid.search))
static.grid.search2$TP_in <- rep(corman2$TP_in, nrow(static.grid.search))
static.grid.search2$SA <- rep(corman2$SA, nrow(static.grid.search))
static.grid.search2$DOC_mgL <- rep(corman2$DOC_mgL, nrow(static.grid.search))
static.grid.search2$z <- rep(corman2$z, nrow(static.grid.search))
