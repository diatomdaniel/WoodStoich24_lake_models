(cnp.plt <- ggplot() +
# add in the consumption vctrs ala Tilmann
geom_segment(data = consump.vctr.seston,
aes(y = CNP, x = minQN_minQP, xend = minQN_minQP, yend = 0, col = species, group = Pin),
lwd = 1, lty = "dashed") +
geom_segment(data = consump.vctr.seston,
aes(y = CNP, x = minQN_minQP, xend = 0, yend = CNP, col = species, group = Pin),
lwd = 1, lty = "dashed") +
# data
# geom_line(data = seston.average, aes(NP_inflow, value, col = Pin, group = Pin), lwd = 1) +
# geom_point(data = seston.average, aes(NP_inflow, value, fill = Pin, group = Pin), pch = 21, size = 2) +
# geom_line(data = seston.diatoms, aes(NP_inflow, value, col = Pin, group = Pin), lwd = 1) +
# geom_point(data = seston.diatoms, aes(NP_inflow, value, fill = Pin, group = Pin), pch = 22, size = 2) +
# geom_line(data = seston.greens, aes(NP_inflow, value, col = Pin, group = Pin), lwd = 1) +
# geom_point(data = seston.greens, aes(NP_inflow, value, fill = Pin, group = Pin), pch = 23, size = 2) +
# geom_line(data = seston.cyanos, aes(NP_inflow, value, col = Pin, group = Pin), lwd = 1) +
# geom_point(data = seston.cyanos, aes(NP_inflow, value, fill = Pin, group = Pin), pch = 24, size = 2) +
geom_line(data = seston, aes(NP_inflow, value, col = species, group = interaction(species, Pin)),
lwd = 0.75) +
geom_point(data = seston, aes(NP_inflow, value, fill = species, pch = species, group = Pin), size = 2) +
scale_x_log10() + scale_y_log10() +
#ggh4x::facet_grid2(.~seston, scales = "free", independent = "y") +
ggh4x::facet_grid2(I0 + Pin ~seston, scales = "free", independent = "y") +
scale_shape_manual(values = c(21, 22, 23, 24)) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
#guides(fill = "none", color = "none", pch = "none", alpha = "none") +
labs(x = "N:P inflow mass", y = "C:N:P", col = "species", shape = "species"))
# plot GPP across CNP for each species
# quick edit to consumption vctr.
consump.vctr.seston <- consump.vctr.seston %>% mutate(minQN_minQP = ifelse(seston == "N:P", minQN_minQP, NA))
(gpp.cnp.plt <- ggplot() +
# # add in the consumption vctrs ala Tilmann
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = minQN_minQP, yend = 0, col = species, group = Pin),
lwd = 0.75, lty = "dashed") +
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = 0, yend = GPP, col = species, group = Pin),
lwd = 0.75, lty = "dashed") +
# data
# geom_line(data = seston.average, aes(value, GPP, col = Pin, group = Pin), lwd = 1) +
# geom_point(data = seston.average, aes(value, GPP, fill = Pin, group = Pin, alpha = log(NP_inflow)), pch = 21, size = 2) +
# geom_line(data = seston.diatoms, aes(value, GPP, col = Pin, group = Pin), lwd = 1) +
# geom_point(data = seston.diatoms, aes(value, GPP, fill = Pin, group = Pin, alpha = log(NP_inflow)), pch = 22, size = 2) +
# geom_line(data = seston.greens, aes(value, GPP, col = Pin, group = Pin), lwd = 1) +
# geom_point(data = seston.greens, aes(value, GPP, fill = Pin, group = Pin, alpha = log(NP_inflow)), pch = 23, size = 2) +
# geom_line(data = seston.cyanos, aes(value, GPP, col = Pin, group = Pin), lwd = 1) +
# geom_point(data = seston.cyanos, aes(value, GPP, fill = Pin, group = Pin, alpha = log(NP_inflow)), pch = 24, size = 2) +
geom_line(data = seston, aes(value, GPP, col = species, alpha = NP_inflow, group = interaction(species, Pin)),
lwd = 0.75) +
geom_point(data = seston, aes(value, GPP, fill = species, pch = species, alpha = NP_inflow, group = interaction(species, Pin)),
size = 2) +
scale_x_log10() + scale_y_log10() +
#ggh4x::facet_grid2(.~seston) +
ggh4x::facet_grid2(I0 + Pin~seston) +
scale_shape_manual(values = c(21, 22, 24, 25)) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
#guides(fill = "none", color = "none", pch = "none", alpha = "none") +
scale_alpha(range=c(0.5,1), na.value = 0) +
labs(x = "C:N:P molar", y = "GPP mg C L^-1 day_1", col = "species", size = "Inflow log(N:P) mass"))
(gpp.cnp.plt <- ggplot() +
# # add in the consumption vctrs ala Tilmann
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = minQN_minQP, yend = 0, col = species, group = Pin),
lwd = 0.75, lty = "dashed") +
geom_segment(data = consump.vctr.seston,
aes(y = GPP, x = minQN_minQP, xend = 0, yend = GPP, col = species, group = Pin),
lwd = 0.75, lty = "dashed") +
# data
# geom_line(data = seston.average, aes(value, GPP, col = Pin, group = Pin), lwd = 1) +
# geom_point(data = seston.average, aes(value, GPP, fill = Pin, group = Pin, alpha = log(NP_inflow)), pch = 21, size = 2) +
# geom_line(data = seston.diatoms, aes(value, GPP, col = Pin, group = Pin), lwd = 1) +
# geom_point(data = seston.diatoms, aes(value, GPP, fill = Pin, group = Pin, alpha = log(NP_inflow)), pch = 22, size = 2) +
# geom_line(data = seston.greens, aes(value, GPP, col = Pin, group = Pin), lwd = 1) +
# geom_point(data = seston.greens, aes(value, GPP, fill = Pin, group = Pin, alpha = log(NP_inflow)), pch = 23, size = 2) +
# geom_line(data = seston.cyanos, aes(value, GPP, col = Pin, group = Pin), lwd = 1) +
# geom_point(data = seston.cyanos, aes(value, GPP, fill = Pin, group = Pin, alpha = log(NP_inflow)), pch = 24, size = 2) +
geom_line(data = seston, aes(value, GPP, col = species, alpha = NP_inflow, group = interaction(species, Pin)),
lwd = 0.75) +
geom_point(data = seston, aes(value, GPP, fill = species, pch = species, alpha = NP_inflow, group = interaction(species, Pin)),
size = 2) +
scale_x_log10() + scale_y_log10() +
#ggh4x::facet_grid2(.~seston) +
ggh4x::facet_grid2(I0 + Pin~seston, scales = "free", independent = "y") +
scale_shape_manual(values = c(21, 22, 24, 25)) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
#guides(fill = "none", color = "none", pch = "none", alpha = "none") +
scale_alpha(range=c(0.5,1), na.value = 0) +
labs(x = "C:N:P molar", y = "GPP mg C L^-1 day_1", col = "species", size = "Inflow log(N:P) mass"))
#load packages
pck <- c("deSolve", "tidyverse", "cowplot", "ggthemes","ggpubr")
lapply(pck, require, character.only = T)
setwd("light experiment")
# Load algae parameters
source("algae_param_vctrs_light.R")
# Load models
# static model with fixed stoichiometry
source("static_liebig_zmix_light.R") # model 1 in Carly's framework
# Droop model
source("dynamic_liebig_zmix_light.R") # model 3 in Carly's framework
# set timesteps
times <- 1:1000 # for troubleshooting, initial runs
################################################################################
# Simulations
# set loads
# low, mid, high P supply --> trophic state
loads <- expand.grid(Pin = c(50, 100, 500),
NP_inflow = c(1, 2, 3, 7.23, seq(5, 100, 5)),
I0 = c(100, 500))
loads$Nin <- loads$Pin * loads$NP_inflow
dynamic.algae
y <- c(A = 100, P = 100, N = 300, QN = 0.01, QP = 0.01)
dynamic.algae["Nin"] = 300
dynamic.algae["Pin"] = 100
times <- 1:1000
# Droop model
source("models/dynamic_liebig_no_light.R") # model 3 in Carly's framework
run <- ode( y = y, times = times, parms = dynamic.algae,
model = dynamic.stoich.zmix)
run <- ode( y = y, times = times, parms = dynamic.algae,
func = dynamic.stoich.zmix)
getwd()
setwd("C:/Users/DanielGschwentner/Documents/GitHub/WoodStoich24_lake_models")
# Droop model
source("models/dynamic_liebig_no_light.R") # model 3 in Carly's framework
run <- ode( y = y, times = times, parms = dynamic.algae,
func = dynamic.stoich)
dynamic.algae
rm(list = ls())
# Setup
#load packages
pck <- c("deSolve", "tidyverse", "cowplot", "ggthemes","ggpubr")
lapply(pck, require, character.only = T)
# Load algae parameters
source("algae_param_vctrs.R")
# Load models
# static model with fixed stoichiometry
source("models/static_liebig_no_light.R") # model 1 in Carly's framework
# Droop model
source("models/dynamic_liebig_no_light.R") # model 3 in Carly's framework
# set timesteps
times <- 1:1000 # for troubleshooting, initial runs
################################################################################
# Simulations
# set loads
# low, mid, high P supply --> trophic state
loads <- expand.grid(Pin = c(50, 100, 500),
NP_inflow = c(1, 2, 3, 7.23, seq(5, 100, 5)))
loads$Nin <- loads$Pin * loads$NP_inflow
x = 1
i = 3
params <- x
params["Pin"] = loads[i, "Pin"]
params["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100, "P" = loads[i, "Pin"],"N" = loads[i, "Nin"], "QP1" = 0.015, "QN1" = 0.1)
run <- ode(y, times, parms = params, func = dynamic.stoich)
View(run)
dynamic.runs <-  lapply(list(dynamic.algae, dynamic.diatoms, dynamic.greens, dynamic.cyanos), function(x) {
params <- x
lapply(1:nrow(loads), function(i) {
params["Pin"] = loads[i, "Pin"]
params["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100, "P" = loads[i, "Pin"],"N" = loads[i, "Nin"], "QP1" = 0.015, "QN1" = 0.1)
run <- ode(y, times, parms = params, func = dynamic.stoich)
return(run[max(times),])
})
})
dynamic.runs <-  lapply(list(dynamic.algae, dynamic.diatoms, dynamic.greens, dynamic.cyanos), function(x) {
params <- x
lapply(1:nrow(loads), function(i) {
params["Pin"] = loads[i, "Pin"]
params["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100, "P" = loads[i, "Pin"],"N" = loads[i, "Nin"], "QP1" = 0.015, "QN1" = 0.1)
run <- ode(y, times, parms = params, func = dynamic.stoich)
#return(run[max(times),])
return(run)
})
})
# extract from list and convert to data-frame
dynamic.runs.average <- as_data_frame(do.call(rbind, dynamic.runs[[1]]))
View(dynamic.runs.average)
loads <- expand.grid(Pin = c(100),
NP_inflow = 7.23)
loads$Nin <- loads$Pin * loads$NP_inflow
dynamic.runs <-  lapply(list(dynamic.algae, dynamic.diatoms, dynamic.greens, dynamic.cyanos), function(x) {
params <- x
lapply(1:nrow(loads), function(i) {
params["Pin"] = loads[i, "Pin"]
params["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100, "P" = loads[i, "Pin"],"N" = loads[i, "Nin"], "QP1" = 0.015, "QN1" = 0.1)
run <- ode(y, times, parms = params, func = dynamic.stoich)
#return(run[max(times),])
return(run)
})
})
# extract from list and convert to data-frame
dynamic.runs.average <- as_data_frame(do.call(rbind, dynamic.runs[[1]]))
View(dynamic.runs.average)
y <- c(A = 100, P = 100, N = 300, QN = 0.01, QP = 0.01)
dynamic.algae["Nin"] = 300
dynamic.algae["Pin"] = 100
times <- 1:1000
run <- ode( y = y, times = times, parms = dynamic.algae,
func = dynamic.stoich)
y <- c("A" = 100, "P" = 100, "N" = 300, "QN" = 0.01, "QP" = 0.01)
dynamic.algae["Nin"] = 300
dynamic.algae["Pin"] = 100
times <- 1:1000
run <- ode( y = y, times = times, parms = dynamic.algae,
func = dynamic.stoich)
y <- c("A" = 100, "P" = 100, "N" = 300, "QP1" = 0.015, "QN1" = 0.01)
dynamic.algae["Nin"] = 300
dynamic.algae["Pin"] = 100
times <- 1:1000
run <- ode( y = y, times = times, parms = dynamic.algae,
func = dynamic.stoich)
#load packages
pck <- c("deSolve", "tidyverse", "cowplot", "ggthemes","ggpubr")
lapply(pck, require, character.only = T)
# Load algae parameters
source("algae_param_vctrs.R")
# Load models
# static model with fixed stoichiometry
source("models/static_liebig_no_light.R") # model 1 in Carly's framework
# Droop model
source("models/dynamic_liebig_no_light.R") # model 3 in Carly's framework
# set timesteps
times <- 1:1000 # for troubleshooting, initial runs
y <- c("A" = 100, "P" = 100, "N" = 300, "QP1" = 0.015, "QN1" = 0.01)
dynamic.algae["Nin"] = 300
dynamic.algae["Pin"] = 100
times <- 1:1000
run <- ode( y = y, times = times, parms = dynamic.algae,
func = dynamic.stoich)
View(run)
dynamic.stoich()
dynamic.stoich
dynamic.algae
dynamic.runs <-  lapply(list(dynamic.algae, dynamic.diatoms, dynamic.greens, dynamic.cyanos), function(x) {
params <- x
lapply(1:nrow(loads), function(i) {
params["Pin"] = loads[i, "Pin"]
params["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100, "P" = loads[i, "Pin"],"N" = loads[i, "Nin"], "QP1" = 0.015, "QN1" = 0.1)
run <- ode(y, times, parms = params, func = dynamic.stoich)
#return(run[max(times),])
return(run)
})
})
# extract from list and convert to data-frame
dynamic.runs.average <- as_data_frame(do.call(rbind, dynamic.runs[[1]]))
dynamic.runs.diatoms <- as_data_frame(do.call(rbind, dynamic.runs[[2]]))
dynamic.runs.greens <- as_data_frame(do.call(rbind, dynamic.runs[[3]]))
dynamic.runs.cyanos <- as_data_frame(do.call(rbind, dynamic.runs[[4]]))
View(dynamic.runs.greens)
View(dynamic.runs.diatoms)
y <- c("A1" = 100, "P" = 100, "N" = 300, "QP1" = 0.015, "QN1" = 0.01)
times <- 1:1000
run <- ode( y = y, times = times, parms = dynamic.algae,
func = dynamic.stoich)
View(run)
# Plotting of O2/GPP from CPBS Cattle Tanks
# Field Limnology2024
library(tidyverse)
library(lubridate)
library(cowplot)
library(ggsci)
library(patchwork)
theme_set(theme_cowplot() + theme(legend.position = "bottom", legend.justification = "center"))
# Set wd
setwd("C://Users/DanielGschwentner/OneDrive - University of Nebraska-Lincoln/Teaching/Limnology 2024/Lab 4 GPP measurements")
setwd("C://Users/DanielGschwentner/OneDrive - University of Nebraska-Lincoln/Teaching/Limnology 2024")
# Set wd
setwd("C://Users/DanielGschwentner/OneDrive - University of Nebraska-Lincoln/Teaching/Limnology 2024/Lab 4 GPP measurements")
# Set wd
setwd("C://Users/DanielGschwentner/OneDrive - University of Nebraska-Lincoln/Teaching/Limnology 2024/Lab 5 GPP measurements")
# Plotting of O2/GPP from CPBS Cattle Tanks
# Field Limnology2024
library(tidyverse)
library(lubridate)
library(cowplot)
library(ggsci)
library(patchwork)
theme_set(theme_cowplot() + theme(legend.position = "bottom", legend.justification = "center"))
# Set wd
setwd("C://Users/DanielGschwentner/OneDrive - University of Nebraska-Lincoln/Teaching/Limnology 2024/Lab 5 GPP measurements")
(files <- list.files(pattern = ".TXT"))
files
# load files
DOT1 <- read_csv(files[1], skip = 6)
DOT1 <- DOT1[-1,]
DOT2 <- read_csv(files[2], skip = 6)
DOT2 <- DOT2[-1,]
DOT3 <- read_csv(files[3], skip = 6)
DOT3 <- DOT3[-1,]
DOT4 <- read_csv(files[4], skip = 6)
DOT4 <- DOT4[-1,]
DOT5 <- read_csv(files[5], skip = 6)
DOT5 <- DOT4[-1,]
DOT6 <- read_csv(files[6], skip = 6)
DOT6 <- DOT4[-1,]
DOT7 <- read_csv(files[7], skip = 6)
DOT7 <- DOT4[-1,]
# conversions and clean data
clean <- function(data, Lake, Set, Location) {
data$Temperature <- as.numeric(data$Temperature)
data$`Dissolved Oxygen` <- as.numeric(data$`Dissolved Oxygen`)
data$`Dissolved Oxygen Saturation` <- as.numeric(data$`Dissolved Oxygen Saturation`)
data$`Central Standard Time` <- ymd_hms(data$`Central Standard Time`)
data$Lake <- Lake
data$Set <- Set
data$Location <- Location
# simple metabolism calculation : roC DO/ roc time
data$deltaO2 <- c(NA,diff(data$`Dissolved Oxygen`))/c(NA, diff(data$`Central Standard Time`)/60)
return(data)
}
DOT1 <- clean(DOT1, Lake = "Far Lake", Set = 1, Location = "Bottom")
DOT2 <- clean(DOT2, Lake = "Far Lake", Set = 1, Location = "Surface")
DOT3 <- clean(DOT3, Lake = "Far Lake", Set = 2, Location = "Surface")
DOT4 <- clean(DOT4, Lake = "Pillar Lake", Set = 1, Location = "Bottom")
DOT5 <- clean(DOT5, Lake = "Pillar Lake", Set = 1, Location = "Surface")
DOT6 <- clean(DOT6, Lake = "Pillar Lake", Set = 2, Location = "Bottom")
DOT7 <- clean(DOT7, Lake = "Pillar Lake", Set = 2, Location = "Surface")
# merge
miniDOTS <- bind_rows(DOT1, DOT2, DOT3, DOT4, DOT5, DOT6, DOT7)
# add day/night info
miniDOTS <- miniDOTS %>%
mutate(day_night = ifelse(hour(`Central Standard Time`) %in% c(21, 22, 23, 0, 1, 2, 3, 4 ,5), "Night", "Day"))
# plot data to get a feel
(temp <- miniDOTS %>%
ggplot() +
geom_line(aes(`Central Standard Time`, Temperature, group = Set, col = Location), lwd = .75) +
facet_wrap(Lake~.) +
labs(x = NULL, y = "Temperature degC", col = "Top-bottom"))
(do_ppm <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, `Dissolved Oxygen`, group = Set, col = Location)) +
geom_line(lwd = .75) +
facet_wrap(Lake~.) +
labs(x = NULL, y = expression("O"[2] ~ "mgL"^-1), col = "Cattle tank #"))
(do_sat <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, `Dissolved Oxygen Saturation`, group = NAME, col = cattle_tank)) +
geom_line(lwd = .75) +
labs(x = NULL,  y = expression("O"[2] ~ "%"), col = "Cattle tank #"))
# plot data to get a feel
(temp <- miniDOTS %>%
ggplot() +
geom_line(aes(`Central Standard Time`, Temperature, group = Set, col = Location), lwd = .75) +
facet_wrap(Lake~.) +
labs(x = NULL, y = "Temperature degC", col = "Top-bottom"))
(do_ppm <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, `Dissolved Oxygen`, group = Set, col = Location)) +
geom_line(lwd = .75) +
facet_wrap(Lake~.) +
labs(x = NULL, y = expression("O"[2] ~ "mgL"^-1), col = "Cattle tank #"))
View(DOT1)
View(miniDOTS)
(dO2.1 <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, deltaO2, group = NAME, col = cattle_tank)) +
geom_line(lwd = .75, alpha = 0.8) +
labs(x = NULL, y = expression( Delta ~  "mg O"[2] ~ " L"^-1 ~ "hr"^-1), col = "Cattle tank #"))
(do_sat <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, `Dissolved Oxygen Saturation`, group = NAME, col = cattle_tank)) +
geom_line(lwd = .75) +
labs(x = NULL,  y = expression("O"[2] ~ "%"), col = "Cattle tank #"))
(do_ppm <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, `Dissolved Oxygen`, group = Set, col = Location)) +
geom_line(lwd = .75) +
facet_wrap(Lake~Location) +
labs(x = NULL, y = expression("O"[2] ~ "mgL"^-1), col = "Cattle tank #"))
(do_ppm <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, `Dissolved Oxygen`, group = Set, col = Location)) +
geom_line(lwd = .75) +
facet_wrap(Lake~Location) +
labs(x = NULL, y = expression("O"[2] ~ "mgL"^-1), col = "Top/bottom"))
(do_ppm <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, `Dissolved Oxygen`, group = Set, col = Location)) +
geom_line(lwd = .75) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = expression("O"[2] ~ "mgL"^-1), col = "Top/bottom"))
# plot data to get a feel
(temp <- miniDOTS %>%
ggplot() +
geom_line(aes(`Central Standard Time`, Temperature, group = Set, col = Location), lwd = .75) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = "Temperature degC", col = "Top-bottom"))
(do_sat <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, `Dissolved Oxygen Saturation`, group = Set, col = Location)) +
geom_line(lwd = .75) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = expression("O"[2] ~ "mgL"^-1), col = "Top/bottom"))
(do_sat <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, `Dissolved Oxygen Saturation`, group = Set, col = Location)) +
geom_line(lwd = .75) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = expression("O"[2] ~ "%"), col = "Top/bottom"))
# plot data to get a feel
(temp <- miniDOTS %>%
ggplot() +
geom_line(aes(`Central Standard Time`, Temperature, group = Set, col = Location), lwd = .5) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = "Temperature degC", col = "Top/bottom"))
# plot data to get a feel
(temp <- miniDOTS %>%
ggplot() +
geom_line(aes(`Central Standard Time`, Temperature, group = Set), lwd = .5) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = "Temperature degC", col = "Top/bottom"))
(do_ppm <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, `Dissolved Oxygen`, group = Set)) +
geom_line(lwd = .75) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = expression("O"[2] ~ "mgL"^-1), col = "Top/bottom"))
# plot data to get a feel
(temp <- miniDOTS %>%
ggplot() +
geom_line(aes(`Central Standard Time`, Temperature, group = Set, col = Location), lwd = .5) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = "Temperature degC", col = "Top/bottom"))
(do_ppm <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, `Dissolved Oxygen`, group = Set, col = Location)) +
geom_line(lwd = .75) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = expression("O"[2] ~ "mgL"^-1), col = "Top/bottom"))
(do_sat <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, `Dissolved Oxygen Saturation`, group = Set, col = Location)) +
geom_line(lwd = .75) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = expression("O"[2] ~ "%"), col = "Top/bottom"))
fig <- ggpubr::ggarrange(plotlist = list(temp, do_ppm, do_sat), nrow = 3, align = "hv", common.legend = T)
fig
files
# Set wd
setwd("C://Users/DanielGschwentner/OneDrive - University of Nebraska-Lincoln/Teaching/Limnology 2024/Lab 5 GPP measurements")
(files <- list.files(pattern = ".TXT"))
files
# load files
DOT1 <- read_csv(files[1], skip = 6)
DOT1 <- DOT1[-1,]
DOT2 <- read_csv(files[2], skip = 6)
DOT2 <- DOT2[-1,]
DOT3 <- read_csv(files[3], skip = 6)
DOT3 <- DOT3[-1,]
DOT4 <- read_csv(files[4], skip = 6)
DOT4 <- DOT4[-1,]
DOT5 <- read_csv(files[5], skip = 6)
DOT5 <- DOT5[-1,]
DOT6 <- read_csv(files[6], skip = 6)
DOT6 <- DOT6[-1,]
DOT7 <- read_csv(files[7], skip = 6)
DOT7 <- DOT7[-1,]
# conversions and clean data
clean <- function(data, Lake, Set, Location) {
data$Temperature <- as.numeric(data$Temperature)
data$`Dissolved Oxygen` <- as.numeric(data$`Dissolved Oxygen`)
data$`Dissolved Oxygen Saturation` <- as.numeric(data$`Dissolved Oxygen Saturation`)
data$`Central Standard Time` <- ymd_hms(data$`Central Standard Time`)
data$Lake <- Lake
data$Set <- Set
data$Location <- Location
# simple metabolism calculation : roC DO/ roc time
data$deltaO2 <- c(NA,diff(data$`Dissolved Oxygen`))/c(NA, diff(data$`Central Standard Time`)/60)
return(data)
}
DOT1 <- clean(DOT1, Lake = "Far Lake", Set = 1, Location = "Bottom")
DOT2 <- clean(DOT2, Lake = "Far Lake", Set = 1, Location = "Surface")
DOT3 <- clean(DOT3, Lake = "Far Lake", Set = 2, Location = "Surface")
DOT4 <- clean(DOT4, Lake = "Pillar Lake", Set = 1, Location = "Bottom")
DOT5 <- clean(DOT5, Lake = "Pillar Lake", Set = 1, Location = "Surface")
DOT6 <- clean(DOT6, Lake = "Pillar Lake", Set = 2, Location = "Bottom")
DOT7 <- clean(DOT7, Lake = "Pillar Lake", Set = 2, Location = "Surface")
# merge
miniDOTS <- bind_rows(DOT1, DOT2, DOT3, DOT4, DOT5, DOT6, DOT7)
# add day/night info
miniDOTS <- miniDOTS %>%
mutate(day_night = ifelse(hour(`Central Standard Time`) %in% c(21, 22, 23, 0, 1, 2, 3, 4 ,5), "Night", "Day"))
# plot data to get a feel
# plot data to get a feel
(temp <- miniDOTS %>%
ggplot() +
geom_line(aes(`Central Standard Time`, Temperature, group = Set, col = Location), lwd = .5) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = "Temperature degC", col = "Top/bottom"))
(do_ppm <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, `Dissolved Oxygen`, group = Set, col = Location)) +
geom_line(lwd = .75) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = expression("O"[2] ~ "mgL"^-1), col = "Top/bottom"))
(do_sat <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, `Dissolved Oxygen Saturation`, group = Set, col = Location)) +
geom_line(lwd = .75) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = expression("O"[2] ~ "%"), col = "Top/bottom"))
fig <- ggpubr::ggarrange(plotlist = list(temp, do_ppm, do_sat), nrow = 3, align = "hv", common.legend = T)
fig
(dO2.1 <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, deltaO2, group = NAME, group = Set, col = Location)) +
geom_line(lwd = .75) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = expression( Delta ~  "mg O"[2] ~ " L"^-1 ~ "hr"^-1), col = "Top/bottom"))
(dO2.1 <- miniDOTS %>%
ggplot(aes(`Central Standard Time`, deltaO2, group = Set, col = Location)) +
geom_line(lwd = .75) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = expression( Delta ~  "mg O"[2] ~ " L"^-1 ~ "hr"^-1), col = "Top/bottom"))
(dO2.2 <- miniDOTS %>%
filter(abs(deltaO2) < 10) %>%
ggplot(aes(`Central Standard Time`, deltaO2, group = Set, col = Location)) +
geom_line(lwd = .75) +
facet_wrap(Lake~Location, ncol = 4) +
labs(x = NULL, y = expression( Delta ~  "mg O"[2] ~ " L"^-1 ~ "hr"^-1), col = "Top/bottom"))
