mich.menten.1
mich.menten.1 <- sim.mich %>%
filter(Pin > 4, Nin > 4) %>%
ggplot(aes(Pin/1000, Nin/1000, fill = change2baseline)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_grid(scenario ~ param) +
#scale_fill_viridis_c(option = "H") +
# scale_fill_viridis_b(breaks = c(
#   -100, -50, 0, 10, 50, 100, 500, 1000
# ), option = "H") +
#scale_fill_gradient2(low = "red", high = "blue", mid = "grey") +
labs(x = "P in ppm", y = "N in ppm", fill = "% change")
mich.menten.1
mich.menten.1 <- sim.mich %>%
filter(Pin > 5, Nin > 5) %>%
ggplot(aes(Pin/1000, Nin/1000, fill = change2baseline)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_grid(scenario ~ param) +
#scale_fill_viridis_c(option = "H") +
# scale_fill_viridis_b(breaks = c(
#   -100, -50, 0, 10, 50, 100, 500, 1000
# ), option = "H") +
#scale_fill_gradient2(low = "red", high = "blue", mid = "grey") +
labs(x = "P in ppm", y = "N in ppm", fill = "% change")
mich.menten.1
# timesteps
times <- 1:2000
# loads
# Olson&Jones use 20 to 500 for P. Use similar values/
loads <- expand.grid(Pin = seq(20, 500, 50 ) ,
Nin = seq(20,1000,50) )
params.mich <- c(
# lake parameters
SA= 1,		# lake surface area in km2
zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
# light parameters
I0 = 400, # incident light
kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
# algae physiology parameters
umax1 = traits[12, "average"],
lA=0.1,			# mortality rate day-1
v=0.1,			# m d-1; sinking loss of algae
KLight = traits[11, "average"], # light half sat constant
KP1 = traits[2, "average"] * 1000, # phosphorus half sat constant in mg P m^-3 f
QP1 = traits[6, "average"], # algae cell P quota in mg P mg^-1 C^-1
KN1 = traits[1, "average"] * 1000, # nitrogen half sat constant in mg N m^-3
QN1 = traits[5, "average"] # algae cell N quota in mg N mg^-1 C^-1
)
names(params.mich) <- c("SA", "zmix", "Pin", "Nin", "I0",
"kBg", "kA", "umax1", "lA", "v",
"KLight", "KP1",  "QP1", "KN1",  "QN1")
names(params.mich)
params.mich <- unlist(params.mich)
params.droop <- c(
# lake parameters
SA= 1,		# lake surface area in km2
zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
# light parameters
I0 = 400, # surface light
kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
# algae physiology parameters
umax1 = traits[12, "average"],
lA=0.1,			# mortality rate day-1
v= 0.1,			# m d-1; sinking loss of algae
KLight = traits[11, "average"], # light half sat constant
KP1 = traits[2, "average"] * 1000, # phosphorus half sat constant in mg P m^-3 f
minQP1 = traits[6, "average"], # algae cell P quota in mg P mg^-1 C^-1 f
upP1 = traits[4, "average"], # max uptake rate P per day in mg P mg C^-1 day^-1
KN1 = traits[1, "average"] * 1000, # nitrogen half sat constant in mg N m^-3
minQN1 = traits[5, "average"], # algae cell N quota in mg N mg^-1 C^-1 f
upN1 = traits[3, "average"] # max uptake rate N per day in mg N mg C^-1 day^-1
)
names(params.droop) <- c("SA", "zmix", "Pin", "Nin", "I0", "kBg", "kA",
"umax1", "lA", "v", "KLight",
"KP1", "minQP1", "upP1", "KN1",
"minQN1", "upN1")
names(params.droop)
params.droop <- unlist(params.droop)
baselines.mich <- lapply(1:nrow(loads), function(i) {
params.mich["Pin"] = loads[i, "Pin"]
params.mich["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100,
"P" = loads[i, "Pin"],
"N" = loads[i, "Nin"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
baselines.mich <- do.call(rbind, baselines.mich)
baselines.mich <- as_data_frame(baselines.mich)
baselines.mich$Pin <- loads$Pin
baselines.mich$Nin <- loads$Nin
baselines.droop <- lapply(1:nrow(loads), function(i) {
params.droop["Pin"] = loads[i, "Pin"]
params.droop["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100,
"P" = loads[i, "Pin"],
"N" = loads[i, "Nin"],
"QP1" = 0.015,
"QN1" = 0.1)
run <- ode(y, times, parms = params.droop, func = droop.single)
return(run[max(times),])
})
baselines.droop <- do.call(rbind, baselines.droop)
baselines.droop <- as_data_frame(baselines.droop)
baselines.droop$Pin <- loads$Pin
baselines.droop$Nin <- loads$Nin
# iterate over parameters
sim.mich.1 <- lapply(list("KP1","QP1", "KN1", "QN1"), function(f) {
params.mich[f] <- params.mich[f] * 1.1
# iterate over loads
sim.1 <- lapply(1:nrow(loads), function(i) {
params.mich["Pin"] = loads[i, "Pin"]
params.mich["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100, "P" = loads[i, "Pin"], "N" = loads[i, "Nin"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
# add meta-data
sim.1 <- do.call(rbind, sim.1)
sim.1 <- as_data_frame(sim.1)
sim.1$Pin <- loads$Pin
sim.1$Nin <- loads$Nin
# add info on the parameter that was varied
sim.1$param <- f
return(sim.1)
})
baselines.mich <- lapply(1:nrow(loads), function(i) {
params.mich["Pin"] = loads[i, "Pin"]
params.mich["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100,
"P" = loads[i, "Pin"],
"N" = loads[i, "Nin"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
baselines.mich <- do.call(rbind, baselines.mich)
baselines.mich <- as_data_frame(baselines.mich)
baselines.mich$Pin <- loads$Pin
baselines.mich$Nin <- loads$Nin
baselines.droop <- lapply(1:nrow(loads), function(i) {
params.droop["Pin"] = loads[i, "Pin"]
params.droop["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100,
"P" = loads[i, "Pin"],
"N" = loads[i, "Nin"],
"QP1" = 0.015,
"QN1" = 0.1)
run <- ode(y, times, parms = params.droop, func = droop.single)
return(run[max(times),])
})
baselines.droop <- do.call(rbind, baselines.droop)
baselines.droop <- as_data_frame(baselines.droop)
baselines.droop$Pin <- loads$Pin
baselines.droop$Nin <- loads$Nin
# iterate over parameters
sim.mich.1 <- lapply(list("KP1","QP1", "KN1", "QN1"), function(f) {
params.mich[f] <- params.mich[f] * 1.1
# iterate over loads
sim.1 <- lapply(1:nrow(loads), function(i) {
params.mich["Pin"] = loads[i, "Pin"]
params.mich["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100, "P" = loads[i, "Pin"], "N" = loads[i, "Nin"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
# add meta-data
sim.1 <- do.call(rbind, sim.1)
sim.1 <- as_data_frame(sim.1)
sim.1$Pin <- loads$Pin
sim.1$Nin <- loads$Nin
# add info on the parameter that was varied
sim.1$param <- f
return(sim.1)
})
sim.mich.1 <- do.call(rbind, sim.mich.1)
sim.mich.1$scenario <- "+10%"
# iterate over parameters
sim.mich.2 <- lapply(list("KP1", "QP1", "KN1", "QN1"), function(f) {
params.mich[f] <- params.mich[f] * 0.9
# iterate over loads
sim.1 <- lapply(1:nrow(loads), function(i) {
params.mich["Pin"] = loads[i, "Pin"]
params.mich["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100, "P" = loads[i, "Pin"], "N" = loads[i, "Nin"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
# add meta-data
sim.1 <- do.call(rbind, sim.1)
sim.1 <- as_data_frame(sim.1)
sim.1$Pin <- loads$Pin
sim.1$Nin <- loads$Nin
sim.1$param <- f
return(sim.1)
})
sim.mich.2 <- do.call(rbind, sim.mich.2)
sim.mich.2$scenario <- "-10%"
# merge scenarios
sim.mich <- rbind(sim.mich.1, sim.mich.2)
colnames(sim.mich) <- c("time", "A1.sim", "P.sim", "N.sim", "GPP.sim",
"Pin", "Nin", "param", "scenario")
sim.mich <- merge(sim.mich, baselines.mich,
by = c("Pin", "Nin", "time"))
# calculate percent change relative to baseline
sim.mich$change2baseline <- sim.mich$GPP.sim * 100/sim.mich$GPP - 100
# determine min/max change
# note that this code doesn't tell us about direction of change, only the magnitude
sim.mich.metrics <- sim.mich %>%
mutate(change2baseline2 =  abs(change2baseline)) %>%
pivot_wider(id_cols = c(Pin, Nin, scenario),
names_from = param,
values_from = change2baseline2)
colnames(sim.mich.metrics)
sim.mich.metrics[,-c(1, 2, 3)] <- apply(sim.mich.metrics[,-c(1, 2, 3)], 2, abs)
# drop first two rows as they contain NANs
sim.mich.metrics <- sim.mich.metrics[-c(1, 2),]
sim.mich.metrics$max.change <- colnames(sim.mich.metrics[-c(1,2,3)])[apply(sim.mich.metrics[,-c(1,2,3)], 1, which.max)]
# iterate over parameters
sim.droop.1 <- lapply(list("KP1","KN1", "upP1", "upN1",
"minQP1", "minQN1"), function(f) {
params.droop[f] <- params.droop[f] * 1.1
# iterate over loads
sim.1 <- lapply(1:nrow(loads), function(i) {
params.droop["Pin"] = loads[i, "Pin"]
params.droop["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100, "P" = loads[i, "Pin"], "N" = loads[i, "Nin"],
"QP1" = 0.015,"QN1" = 0.1)
run <- ode(y, times, parms = params.droop, func = droop.single)
return(run[max(times),])
})
# add meta-data
sim.1 <- do.call(rbind, sim.1)
sim.1 <- as_data_frame(sim.1)
sim.1$Pin <- loads$Pin
sim.1$Nin <- loads$Nin
# add info on the parameter that was varied
sim.1$param <- f
return(sim.1)
})
sim.droop.1 <- do.call(rbind, sim.droop.1)
sim.droop.1$scenario <- "+10%"
# iterate over parameters
sim.droop.2 <- lapply(list("KP1","KN1", "upP1", "upN1",
"minQP1", "minQN1"), function(f) {
params.droop[f] <- params.droop[f] * 0.9
# iterate over loads
sim.1 <- lapply(1:nrow(loads), function(i) {
params.droop["Pin"] = loads[i, "Pin"]
params.droop["Nin"] = loads[i, "Nin"]
y <- c("A1" = 100, "P" = loads[i, "Pin"], "N" = loads[i, "Nin"],
"QP1" = 0.015,"QN1" = 0.1)
run <- ode(y, times, parms = params.droop, func = droop.single)
return(run[max(times),])
})
# add meta-data
sim.1 <- do.call(rbind, sim.1)
sim.1 <- as_data_frame(sim.1)
sim.1$Pin <- loads$Pin
sim.1$Nin <- loads$Nin
# add info on the parameter that was varied
sim.1$param <- f
return(sim.1)
})
sim.droop.2 <- do.call(rbind, sim.droop.2)
sim.droop.2$scenario <- "-10%"
# merge scenarios
sim.droop <- rbind(sim.droop.1, sim.droop.2)
colnames(sim.droop) <- c("time", "A1.sim", "P.sim", "N.sim", "GPP.sim",
"QP.sim", "QN.sim", "Pin", "Nin",
"param", "scenario")
sim.droop <- merge(sim.droop, baselines.droop,
by = c("Pin", "Nin", "time"))
# calculate percent change relative to baseline
# for algal biomass
sim.droop$change2baseline.gpp <- sim.droop$GPP.sim * 100/sim.droop$GPP - 100
# for cell P content
sim.droop$change2baseline.QP <- sim.droop$QP.sim * 100/sim.droop$QP1 - 100
# for cell N content
sim.droop$change2baseline.QN <- sim.droop$QN.sim * 100/sim.droop$QN1 - 100
# determine min/max change
# note that this code doesn't tell us about direction of change, only the magnitude
sim.droop.metrics.gpp <- sim.droop %>%
mutate(change2baseline2 =  abs(change2baseline.gpp)) %>%
pivot_wider(id_cols = c(Pin, Nin, scenario),
names_from = param,
values_from = change2baseline2)
colnames(sim.droop.metrics.gpp)
sim.droop.metrics.gpp[,-c(1, 2, 3)] <- apply(sim.droop.metrics.gpp[,-c(1, 2, 3)], 2, abs)
sim.droop.metrics.gpp$max.change <- colnames(sim.droop.metrics.gpp[-c(1,2,3)])[apply(sim.droop.metrics.gpp[,-c(1,2,3)], 1, which.max)]
# for QP
sim.droop.metrics.QP <- sim.droop %>%
mutate(change2baseline2 =  abs(change2baseline.QP)) %>%
pivot_wider(id_cols = c(Pin, Nin, scenario),
names_from = param,
values_from = change2baseline2)
colnames(sim.droop.metrics.QP)
sim.droop.metrics.QP[,-c(1, 2, 3)] <- apply(sim.droop.metrics.QP[,-c(1, 2, 3)], 2, abs)
sim.droop.metrics.QP$max.change <- colnames(sim.droop.metrics.QP[-c(1,2,3)])[apply(sim.droop.metrics.QP[,-c(1,2,3)], 1, which.max)]
# for QN
sim.droop.metrics.QN <- sim.droop %>%
mutate(change2baseline2 =  abs(change2baseline.QN)) %>%
pivot_wider(id_cols = c(Pin, Nin, scenario),
names_from = param,
values_from = change2baseline2)
colnames(sim.droop.metrics.QN)
sim.droop.metrics.QN[,-c(1, 2, 3)] <- apply(sim.droop.metrics.QN[,-c(1, 2, 3)], 2, abs)
sim.droop.metrics.QN$max.change <- colnames(sim.droop.metrics.QN[-c(1,2,3)])[apply(sim.droop.metrics.QN[,-c(1,2,3)], 1, which.max)]
mich.menten.1 <- sim.mich %>%
ggplot(aes(Pin/1000, Nin/1000, fill = change2baseline)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_grid(scenario ~ param) +
#scale_fill_viridis_c(option = "H") +
# scale_fill_viridis_b(breaks = c(
#   -100, -50, 0, 10, 50, 100, 500, 1000
# ), option = "H") +
#scale_fill_gradient2(low = "red", high = "blue", mid = "grey") +
labs(x = "P in ppm", y = "N in ppm", fill = "% change")
mich.menten.1
View(sim.mich)
mich.menten.1 <- sim.mich %>%
filter(Pin > 20, Nin > 20) %>%
ggplot(aes(Pin/1000, Nin/1000, fill = change2baseline)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_grid(scenario ~ param) +
#scale_fill_viridis_c(option = "H") +
# scale_fill_viridis_b(breaks = c(
#   -100, -50, 0, 10, 50, 100, 500, 1000
# ), option = "H") +
#scale_fill_gradient2(low = "red", high = "blue", mid = "grey") +
labs(x = "P in ppm", y = "N in ppm", fill = "% change")
mich.menten.1 <- sim.mich %>%
filter(Pin > 20, Nin > 20) %>%
ggplot(aes(Pin/1000, Nin/1000, fill = change2baseline)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_grid(scenario ~ param) +
#scale_fill_viridis_c(option = "H") +
# scale_fill_viridis_b(breaks = c(
#   -100, -50, 0, 10, 50, 100, 500, 1000
# ), option = "H") +
#scale_fill_gradient2(low = "red", high = "blue", mid = "grey") +
labs(x = "P in ppm", y = "N in ppm", fill = "% change")
mich.menten.1
mich.menten.1 <- sim.mich %>%
filter(Pin > 20, Nin > 20) %>%
ggplot(aes(Pin/1000, Nin/1000, fill = change2baseline)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_grid(scenario ~ param) +
#scale_fill_viridis_c(option = "H") +
# scale_fill_viridis_b(breaks = c(
#   -100, -50, 0, 10, 50, 100, 500, 1000
# ), option = "H") +
scale_fill_gradient2(low = "red", high = "blue", mid = "grey") +
labs(x = "P in ppm", y = "N in ppm", fill = "% change")
mich.menten.1
mich.menten.1 <- sim.mich %>%
filter(Pin > 20, Nin > 20) %>%
ggplot(aes(Pin/1000, Nin/1000, fill = change2baseline)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_grid(scenario ~ param) +
#scale_fill_viridis_c(option = "H") +
# scale_fill_viridis_b(breaks = c(
#   -100, -50, 0, 10, 50, 100, 500, 1000
# ), option = "H") +
scale_fill_gradient2(low = "red", high = "blue") +
labs(x = "P in ppm", y = "N in ppm", fill = "% change")
mich.menten.1
mich.menten.1 <- sim.mich %>%
filter(Pin > 20, Nin > 20) %>%
ggplot(aes(Pin/1000, Nin/1000, fill = change2baseline)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_grid(scenario ~ param) +
#scale_fill_viridis_c(option = "H") +
# scale_fill_viridis_b(breaks = c(
#   -100, -50, 0, 10, 50, 100, 500, 1000
# ), option = "H") +
scale_fill_viridis_b() +
labs(x = "P in ppm", y = "N in ppm", fill = "% change")
mich.menten.1
mich.menten.1 <- sim.mich %>%
filter(Pin > 20, Nin > 20) %>%
ggplot(aes(Pin/1000, Nin/1000, fill = change2baseline)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_grid(scenario ~ param) +
#scale_fill_viridis_c(option = "H") +
# scale_fill_viridis_b(breaks = c(
#   -100, -50, 0, 10, 50, 100, 500, 1000
# ), option = "H") +
scale_fill_viridis_c() +
labs(x = "P in ppm", y = "N in ppm", fill = "% change")
mich.menten.1
mich.menten.2 <- sim.mich.metrics %>%
ggplot(aes(Pin, Nin, fill = max.change)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_wrap(scenario~.,ncol = 2) +
scale_fill_viridis_d(option = "H") +
scale_x_continuous(breaks = c(10, 250, 500)) +
labs(x = "P in ppm", y = "N in ppm", fill = "max. change")
mich.menten.2
View(sim.mich)
mich.menten.1 <- sim.mich %>%
filter(Pin > 20, Nin > 20) %>%
ggplot(aes(Pin, Nin, fill = change2baseline)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_grid(scenario ~ param) +
#scale_fill_viridis_c(option = "H") +
# scale_fill_viridis_b(breaks = c(
#   -100, -50, 0, 10, 50, 100, 500, 1000
# ), option = "H") +
scale_fill_viridis_c() +
labs(x = "P in ppm", y = "N in ppm", fill = "% change")
mich.menten.1
mich.menten.1 <- sim.mich %>%
#filter(Pin > 20, Nin > 20) %>%
ggplot(aes(Pin, Nin, fill = change2baseline)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_grid(scenario ~ param) +
#scale_fill_viridis_c(option = "H") +
# scale_fill_viridis_b(breaks = c(
#   -100, -50, 0, 10, 50, 100, 500, 1000
# ), option = "H") +
scale_fill_viridis_c() +
labs(x = "P in ppm", y = "N in ppm", fill = "% change")
mich.menten.1
mich.menten.2 <- sim.mich.metrics %>%
ggplot(aes(Pin, Nin, fill = max.change)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_wrap(scenario~.,ncol = 2) +
scale_fill_viridis_d(option = "H") +
scale_x_continuous(breaks = c(10, 250, 500)) +
labs(x = "P in ppm", y = "N in ppm", fill = "max. change")
mich.menten.2
droop.gpp <- sim.droop %>%
ggplot(aes(Pin, Nin, fill = change2baseline.gpp)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_grid(scenario ~ param) +
#scale_fill_viridis_c(option = "H") +
scale_fill_viridis_b(breaks = c(
-100, -50, 0, 10, 50, 100, 500, 1000
), option = "H") +
scale_x_continuous(breaks = c(10, 250, 500)) +
labs(x = "P in ppm", y = "N in ppm", fill = "% change")
droop.gpp
droop.QP <- sim.droop %>%
ggplot(aes(Pin, Nin, fill = change2baseline.QP)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_grid(scenario ~ param) +
#scale_fill_viridis_c(option = "H") +
scale_fill_viridis_b(breaks = c(
-100, -50, 0, 10, 50, 100, 500, 1000
), option = "H") +
scale_x_continuous(breaks = c(10, 250, 500)) +
labs(x = "P in ppm", y = "N in ppm", fill = "% change")
droop.QP
droop.QN <- sim.droop %>%
ggplot(aes(Pin, Nin, fill = change2baseline.QN)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_grid(scenario ~ param) +
#scale_fill_viridis_c(option = "H") +
scale_fill_viridis_b(breaks = c(
-100, -50, 0, 10, 50, 100, 500, 1000
), option = "H") +
scale_x_continuous(breaks = c(10, 250, 500)) +
labs(x = "P in ppm", y = "N in ppm", fill = "% change")
droop.QN
droop.max.gpp <- sim.droop.metrics.gpp %>%
ggplot(aes(Pin, Nin, fill = max.change)) +
geom_raster() +
geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
lwd = 1, lty = "dashed", col = "white") +
facet_wrap(scenario~., ncol = 2) +
scale_fill_viridis_d(option = "H") +
scale_x_continuous(breaks = c(10, 250, 500)) +
labs(x = "P in ppm", y = "N in ppm", fill = "max. change")
droop.max.gpp
