(old.new.wrt <- corman.vol %>%
ggplot(aes(HRT.old, HRT, fill = ratio.mixed.hypo), size = 2, pch = 21) +
geom_point() +
geom_abline(slope = 1, intercept = 0, lty = "dashed") +
scale_fill_viridis_b() +
labs(x = "HRT total (days)", y = "HRT mixed layer (days)", fill = "Ratio epilimnion to total volume"))
# quick comparison of old to new WRT
(old.new.wrt <- corman.vol %>%
ggplot(aes(HRT.old, HRT, fill = ratio.mixed.hypo), size = 2, pch = 21) +
geom_point() +
geom_abline(slope = 1, intercept = 0, lty = "dashed") +
scale_fill_viridis_b() +
labs(x = "HRT total (days)", y = "HRT mixed layer (days)", fill = "Ratio epilimnion to total volume") +
theme(legend.position = "bottom"))
library(tidyverse)
# load data sets
# GPP
corman.gpp <- read_csv("data4input/Corman2023 metabolism result.csv")
# stream nutrients
corman.stream.nutrients  <- read_csv("data4input/Corman2023 stream nutrients.csv")
# volume and DOC created from S1 T1 and T1 in paper
# no DOC for Lillinonah! used median DOC of the data set = 11.8
corman.vol <- tibble(
Lake = c("Acton", "Crampton", "EastLong", "Feeagh", "Harp", "Langtjern", "Lillinonah", "Lillsjoliden",
"Mangstrettjarn", "Mendota", "Morris", "Nastjarn", "Ovre", "Struptjarn", "Trout", "Vortsjarv"),
z = c(3.9, 5.03, 4.04, 14.50, 13.30, 2, 13, 3.8, 5.3, 12.80, 2.42, 4.20, 4, 3.80, 14.60, 2.80),
SA = c(2.5, 0.26, 0.03, 3.92, 0.71, 0.23, 6.26, 0.01, 0.02, 39.60, 0.06, 0.01, 0.05, 0.03, 15.70, 270),
DOC_mgL = c(4.3, 4.6, 10.6, 5.6, 5.2, 11.8, 11.8, 15.5, 11.9, 4.7, 17.3, 8.2, 23.2, 19.9, 2.8, 11.9),
HRT.lake = c(0.2, 3.5, 0.8, 0.5, 2.7, 0.2, 0.1, 0.8, 1, 4.5, 0.5, 1.5, 0.1, 1.7, 5.3, 1)) %>%
mutate(volume_m3 = SA * 1e6 * z,
HRT.lake = HRT.lake * 365 )
# scaling of WRT
corman.vol <- corman.vol %>%
mutate(zmix = 10^(0.515 * log10(DOC_mgL) + 0.115 * log10(2 * sqrt(SA/pi + 0.991))),
zmix = ifelse(zmix > z, z, zmix),
v.mixed.layer_m3 = SA * 1e6 * zmix,
ratio.mixed.hypo = v.mixed.layer_m3/volume_m3,
HRT = HRT.lake*ratio.mixed.hypo # scale WRT by ratio of mixed layer to complete volue
)
# quick comparison of old to new WRT
(old.new.wrt <- corman.vol %>%
ggplot(aes(HRT.lake, HRT, fill = ratio.mixed.hypo), size = 2, pch = 21) +
geom_point() +
geom_abline(slope = 1, intercept = 0, lty = "dashed") +
scale_fill_viridis_b() +
labs(x = "HRT total (days)", y = "HRT mixed layer (days)", fill = "Ratio epilimnion to total volume") +
theme(legend.position = "bottom"))
# quick summary
summary(lm(HRT ~ HRT.lake, data = corman.vol))
View(corman.vol)
source("clean_corman.R")
# to df for data input
in.grid <- as.data.frame(corman2)
#load packages
pck <- c("deSolve", "tidyverse", "cowplot", "ggthemes","ggpubr")
lapply(pck, require, character.only = T)
# Load algae parameters
source("algae_param_vctrs.R")
# Load models
# static model with fixed stoichiometry
source("models/static_liebig_zmix.R") # model 1 in Carly's framework
# Droop model
source("models/dynamic_liebig_zmix.R") # model 3 in Carly's framework
# set timesteps
times <- 1:1000 # for troubleshooting, initial runs
################################################################################
### base predictions w. median values
# static model
(start <- Sys.time())
corman.static <-  lapply(list(static.algae, static.diatoms, static.greens, static.cyanos), function(x) {
params <- x
lapply(1:nrow(in.grid), function(i) {
params["Pin"] = in.grid[i, "TP_in"]
params["Nin"] = in.grid[i, "TN_in"]
params["DOC"] = in.grid[i, "DOC_mgL"]
params["z"] = in.grid[i, "z"]
params["SA"] = in.grid[i, "SA"]
params["HRT"] = in.grid[i, "HRT"]
y <- c("A1" = 100, "P" =in.grid[i, "TP_in"], "N" = in.grid[i, "TN_in"])
run <- ode(y, times, parms = params, func = static.stoich.zmix)
return(run[max(times),])
})
})
(end <- Sys.time())
time.elapsed <- (end - start)/60/60
print(paste0("Time elapsed = ", time.elapsed, " hours!"))
# extract from list and convert to data-frame
corman.static.average <- as_data_frame(do.call(rbind, corman.static[[1]]))
corman.static.diatoms <- as_data_frame(do.call(rbind, corman.static[[2]]))
corman.static.greens <- as_data_frame(do.call(rbind, corman.static[[3]]))
corman.static.cyanos <- as_data_frame(do.call(rbind, corman.static[[4]]))
# create summary data frame
static.out <- corman2
static.out$average <- corman.static.average$GPP
static.out$diatoms <- corman.static.diatoms$GPP
static.out$greens <- corman.static.greens$GPP
static.out$cyanos <- corman.static.cyanos$GPP
static.out$model <- "static"
# dynamic model
(start <- Sys.time())
corman.dynamic <-  lapply(list(dynamic.algae, dynamic.diatoms, dynamic.greens, dynamic.cyanos), function(x) {
params <- x
lapply(1:nrow(in.grid), function(i) {
params["Pin"] = in.grid[i, "TP_in"]
params["Nin"] = in.grid[i, "TN_in"]
params["DOC"] = in.grid[i, "DOC_mgL"]
params["z"] = in.grid[i, "z"]
params["SA"] = in.grid[i, "SA"]
params["HRT"] = in.grid[i, "HRT"]
y <- c("A1" = 100, "P" =in.grid[i, "TP_in"], "N" = in.grid[i, "TN_in"],
"QP1" = 0.015, "QN1" = 0.1)
run <- ode(y, times, parms = params, func = dynamic.stoich.zmix)
return(run[max(times),])
})
})
(end <- Sys.time())
time.elapsed <- (end - start)/60/60
print(paste0("Time elapsed = ", time.elapsed, " hours!"))
# extract from list and convert to data-frame
corman.dynamic.average <- as_data_frame(do.call(rbind, corman.dynamic[[1]]))
corman.dynamic.diatoms <- as_data_frame(do.call(rbind, corman.dynamic[[2]]))
corman.dynamic.greens <- as_data_frame(do.call(rbind, corman.dynamic[[3]]))
corman.dynamic.cyanos <- as_data_frame(do.call(rbind, corman.dynamic[[4]]))
# create summary data frame
dynamic.out <- corman2
dynamic.out$average <- corman.dynamic.average$GPP
dynamic.out$diatoms <- corman.dynamic.diatoms$GPP
dynamic.out$greens <- corman.dynamic.greens$GPP
dynamic.out$cyanos <- corman.dynamic.cyanos$GPP
dynamic.out$model <- "dynamic"
################################################################################
# Plot base predictions
base.predictions.corman <- bind_rows(static.out, dynamic.out)
base.predictions.corman$model <- factor(base.predictions.corman$model, levels = c("static", "dynamic"))
# wide to long
base.predictions.corman <- base.predictions.corman %>%
gather("species", "est_GPP", -Lake, -c(1:13), -model) %>%
mutate(species = factor(species, levels = c("average", "diatoms", "greens", "cyanos")))
# create summary/RMSE across species and models
base.rmse <- base.predictions.corman %>%
mutate(sqe = (est_GPP - GPP)^2) %>%
group_by(model, species) %>%
summarize(rmse = sqrt(mean(sqe))) %>%
pivot_wider(id_cols = model, names_from = species, values_from = rmse)
# print  rmse
base.rmse
base.rmse[,-1] <- apply(base.rmse[,-1], 2, round, 2)
# calculate rsq values
rsq <- expand.grid(model = c("static", "dynamic"),
species = c("average", "diatoms", "greens", "cyanos"))
rsq$rsq <- NA
r <- lapply(1:nrow(rsq), function(i) {
subset <- base.predictions.corman %>% filter(species == rsq[i, "species"]  & model == rsq[i, "model"])
subset <- subset %>%
mutate(log10GPP = log10(GPP),
log10estGPP = log10(est_GPP)) %>%
mutate(log10GPP = ifelse(is.infinite(log10GPP), NA, log10GPP))
r <- summary(lm(log10estGPP ~ log10GPP, data = subset))$adj.r.squared
return(r)
})
rsq$rsq <- round(unlist(r), 2)
### Plot base predictions
(predicted.plt <- base.predictions.corman %>%
ggplot() +
geom_smooth(aes(GPP, est_GPP), method = "lm", alpha = 0.3) +
geom_point(aes(GPP, est_GPP, pch = Lake), size = 2) +
ggh4x::facet_grid2(model ~ species,  scales = "free", independent = "y") +
scale_x_log10() + scale_y_log10() +
labs(x = "Measured GPP mg C L^-1 day^-1",
y = "Modelled GPP mg C L^-1 day^-1",
shape = NULL) +
scale_shape_manual(
values = c(
"Acton" = 0,
"EastLong" = 1,
"Feeagh" = 2,
"Harp" = 3,
"Langtjern" = 4,
"Lillinoah" = 5,
"Lillsjoliden" = 6,
"Mangstrettjarn" = 7,
"Mendota" = 8,
"Morris" = 9,
"Struptjarn" = 10,
"Trout" = 11,
"Vortsjarv" = 12
)
) +
theme(legend.position = "right"))
# load Corman data (needs to be run first!
source("clean_corman.R")
# to df for data input
in.grid <- as.data.frame(corman2)
#load packages
pck <- c("deSolve", "tidyverse", "cowplot", "ggthemes","ggpubr")
lapply(pck, require, character.only = T)
# Load algae parameters
source("algae_param_vctrs.R")
# Load models
# static model with fixed stoichiometry
source("models/static_liebig_zmix.R") # model 1 in Carly's framework
# Droop model
source("models/dynamic_liebig_zmix.R") # model 3 in Carly's framework
# set timesteps
times <- 1:1000 # for troubleshooting, initial runs
(start <- Sys.time())
corman.static <-  lapply(list(static.algae, static.diatoms, static.greens, static.cyanos), function(x) {
params <- x
lapply(1:nrow(in.grid), function(i) {
params["Pin"] = in.grid[i, "TP_in"]
params["Nin"] = in.grid[i, "TN_in"]
params["DOC"] = in.grid[i, "DOC_mgL"]
params["z"] = in.grid[i, "z"]
params["SA"] = in.grid[i, "SA"]
params["HRT"] = in.grid[i, "HRT"]
y <- c("A1" = 100, "P" =in.grid[i, "TP_in"], "N" = in.grid[i, "TN_in"])
run <- ode(y, times, parms = params, func = static.stoich.zmix)
return(run[max(times),])
})
})
(end <- Sys.time())
time.elapsed <- (end - start)/60/60
print(paste0("Time elapsed = ", time.elapsed, " hours!"))
# extract from list and convert to data-frame
corman.static.average <- as_data_frame(do.call(rbind, corman.static[[1]]))
corman.static.diatoms <- as_data_frame(do.call(rbind, corman.static[[2]]))
corman.static.greens <- as_data_frame(do.call(rbind, corman.static[[3]]))
corman.static.cyanos <- as_data_frame(do.call(rbind, corman.static[[4]]))
View(corman.static.greens)
View(corman.static.diatoms)
# create summary data frame
static.out <- corman2
static.out$average <- corman.static.average$GPP
static.out$diatoms <- corman.static.diatoms$GPP
static.out$greens <- corman.static.greens$GPP
static.out$cyanos <- corman.static.cyanos$GPP
static.out$model <- "static"
View(static.out)
View(static.out)
# dynamic model
(start <- Sys.time())
corman.dynamic <-  lapply(list(dynamic.algae, dynamic.diatoms, dynamic.greens, dynamic.cyanos), function(x) {
params <- x
lapply(1:nrow(in.grid), function(i) {
params["Pin"] = in.grid[i, "TP_in"]
params["Nin"] = in.grid[i, "TN_in"]
params["DOC"] = in.grid[i, "DOC_mgL"]
params["z"] = in.grid[i, "z"]
params["SA"] = in.grid[i, "SA"]
params["HRT"] = in.grid[i, "HRT"]
y <- c("A1" = 100, "P" =in.grid[i, "TP_in"], "N" = in.grid[i, "TN_in"],
"QP1" = 0.015, "QN1" = 0.1)
run <- ode(y, times, parms = params, func = dynamic.stoich.zmix)
return(run[max(times),])
})
})
(end <- Sys.time())
time.elapsed <- (end - start)/60/60
print(paste0("Time elapsed = ", time.elapsed, " hours!"))
# extract from list and convert to data-frame
corman.dynamic.average <- as_data_frame(do.call(rbind, corman.dynamic[[1]]))
corman.dynamic.diatoms <- as_data_frame(do.call(rbind, corman.dynamic[[2]]))
corman.dynamic.greens <- as_data_frame(do.call(rbind, corman.dynamic[[3]]))
corman.dynamic.cyanos <- as_data_frame(do.call(rbind, corman.dynamic[[4]]))
# create summary data frame
dynamic.out <- corman2
dynamic.out$average <- corman.dynamic.average$GPP
dynamic.out$diatoms <- corman.dynamic.diatoms$GPP
dynamic.out$greens <- corman.dynamic.greens$GPP
dynamic.out$cyanos <- corman.dynamic.cyanos$GPP
dynamic.out$model <- "dynamic"
# Plot base predictions
base.predictions.corman <- bind_rows(static.out, dynamic.out)
base.predictions.corman$model <- factor(base.predictions.corman$model, levels = c("static", "dynamic"))
View(base.predictions.corman)
View(base.predictions.corman)
# wide to long
base.predictions.corman <- base.predictions.corman %>%
gather("species", "est_GPP", -Lake, -c(1:16), -model) %>%
mutate(species = factor(species, levels = c("average", "diatoms", "greens", "cyanos")))
### Plot base predictions
(predicted.plt <- base.predictions.corman %>%
ggplot() +
geom_smooth(aes(GPP, est_GPP), method = "lm", alpha = 0.3) +
geom_point(aes(GPP, est_GPP, pch = Lake), size = 2) +
ggh4x::facet_grid2(model ~ species,  scales = "free", independent = "y") +
scale_x_log10() + scale_y_log10() +
labs(x = "Measured GPP mg C L^-1 day^-1",
y = "Modelled GPP mg C L^-1 day^-1",
shape = NULL) +
scale_shape_manual(
values = c(
"Acton" = 0,
"EastLong" = 1,
"Feeagh" = 2,
"Harp" = 3,
"Langtjern" = 4,
"Lillinoah" = 5,
"Lillsjoliden" = 6,
"Mangstrettjarn" = 7,
"Mendota" = 8,
"Morris" = 9,
"Struptjarn" = 10,
"Trout" = 11,
"Vortsjarv" = 12
)
) +
theme(legend.position = "right"))
# create summary/RMSE across species and models
base.rmse <- base.predictions.corman %>%
mutate(sqe = (est_GPP - GPP)^2) %>%
group_by(model, species) %>%
summarize(rmse = sqrt(mean(sqe))) %>%
pivot_wider(id_cols = model, names_from = species, values_from = rmse)
# print  rmse
base.rmse
base.rmse[,-1] <- apply(base.rmse[,-1], 2, round, 2)
# calculate rsq values
rsq <- expand.grid(model = c("static", "dynamic"),
species = c("average", "diatoms", "greens", "cyanos"))
rsq$rsq <- NA
r <- lapply(1:nrow(rsq), function(i) {
subset <- base.predictions.corman %>% filter(species == rsq[i, "species"]  & model == rsq[i, "model"])
subset <- subset %>%
mutate(log10GPP = log10(GPP),
log10estGPP = log10(est_GPP)) %>%
mutate(log10GPP = ifelse(is.infinite(log10GPP), NA, log10GPP))
r <- summary(lm(log10estGPP ~ log10GPP, data = subset))$adj.r.squared
return(r)
})
rsq$rsq <- round(unlist(r), 2)
View(rsq)
View(rsq)
### Plot base predictions
(predicted.plt <- base.predictions.corman %>%
ggplot() +
geom_smooth(aes(GPP, est_GPP), method = "lm", alpha = 0.3) +
geom_point(aes(GPP, est_GPP, pch = Lake), size = 2) +
ggh4x::facet_grid2(model ~ species,  scales = "free", independent = "y") +
scale_x_log10() + scale_y_log10() +
labs(x = "Measured GPP mg C L^-1 day^-1",
y = "Modelled GPP mg C L^-1 day^-1",
shape = NULL) +
scale_shape_manual(
values = c(
"Acton" = 0,
"EastLong" = 1,
"Feeagh" = 2,
"Harp" = 3,
"Langtjern" = 4,
"Lillinoah" = 5,
"Lillsjoliden" = 6,
"Mangstrettjarn" = 7,
"Mendota" = 8,
"Morris" = 9,
"Struptjarn" = 10,
"Trout" = 11,
"Vortsjarv" = 12
)
) +
theme(legend.position = "right"))
### Plot base predictions
(predicted.plt <- base.predictions.corman %>%
filter(Lake != "Feeagh") %>%
ggplot() +
geom_smooth(aes(GPP, est_GPP), method = "lm", alpha = 0.3) +
geom_point(aes(GPP, est_GPP, pch = Lake), size = 2) +
ggh4x::facet_grid2(model ~ species,  scales = "free", independent = "y") +
scale_x_log10() + scale_y_log10() +
labs(x = "Measured GPP mg C L^-1 day^-1",
y = "Modelled GPP mg C L^-1 day^-1",
shape = NULL) +
scale_shape_manual(
values = c(
"Acton" = 0,
"EastLong" = 1,
"Feeagh" = 2,
"Harp" = 3,
"Langtjern" = 4,
"Lillinoah" = 5,
"Lillsjoliden" = 6,
"Mangstrettjarn" = 7,
"Mendota" = 8,
"Morris" = 9,
"Struptjarn" = 10,
"Trout" = 11,
"Vortsjarv" = 12
)
) +
theme(legend.position = "right"))
### Plot base predictions
(predicted.plt <- base.predictions.corman %>%
filter(Lake != "Feeagh" & Lake != "Acton") %>%
ggplot() +
geom_smooth(aes(GPP, est_GPP), method = "lm", alpha = 0.3) +
geom_point(aes(GPP, est_GPP, pch = Lake), size = 2) +
ggh4x::facet_grid2(model ~ species,  scales = "free", independent = "y") +
scale_x_log10() + scale_y_log10() +
labs(x = "Measured GPP mg C L^-1 day^-1",
y = "Modelled GPP mg C L^-1 day^-1",
shape = NULL) +
scale_shape_manual(
values = c(
"Acton" = 0,
"EastLong" = 1,
"Feeagh" = 2,
"Harp" = 3,
"Langtjern" = 4,
"Lillinoah" = 5,
"Lillsjoliden" = 6,
"Mangstrettjarn" = 7,
"Mendota" = 8,
"Morris" = 9,
"Struptjarn" = 10,
"Trout" = 11,
"Vortsjarv" = 12
)
) +
theme(legend.position = "right"))
### Plot base predictions
(predicted.plt <- base.predictions.corman %>%
filter(Lake != "Feeagh" & Lake != "Acton" & Lake != "Langtjern" & Lake != "Trout") %>%
ggplot() +
geom_smooth(aes(GPP, est_GPP), method = "lm", alpha = 0.3) +
geom_point(aes(GPP, est_GPP, pch = Lake), size = 2) +
ggh4x::facet_grid2(model ~ species,  scales = "free", independent = "y") +
scale_x_log10() + scale_y_log10() +
labs(x = "Measured GPP mg C L^-1 day^-1",
y = "Modelled GPP mg C L^-1 day^-1",
shape = NULL) +
scale_shape_manual(
values = c(
"Acton" = 0,
"EastLong" = 1,
"Feeagh" = 2,
"Harp" = 3,
"Langtjern" = 4,
"Lillinoah" = 5,
"Lillsjoliden" = 6,
"Mangstrettjarn" = 7,
"Mendota" = 8,
"Morris" = 9,
"Struptjarn" = 10,
"Trout" = 11,
"Vortsjarv" = 12
)
) +
theme(legend.position = "right"))
rsq$rsq <- NA
r <- lapply(1:nrow(rsq), function(i) {
subset <- base.predictions.corman %>% filter(species == rsq[i, "species"]  & model == rsq[i, "model"]) %>%  filter(Lake != "Feeagh" & Lake != "Acton" & Lake != "Langtjern" & Lake != "Trout")
subset <- subset %>%
mutate(log10GPP = log10(GPP),
log10estGPP = log10(est_GPP)) %>%
mutate(log10GPP = ifelse(is.infinite(log10GPP), NA, log10GPP))
r <- summary(lm(log10estGPP ~ log10GPP, data = subset))$adj.r.squared
return(r)
})
rsq$rsq <- round(unlist(r), 2)
View(rsq)
View(rsq)
### Plot base predictions
(predicted.plt <- base.predictions.corman %>%
#filter(Lake != "Feeagh" & Lake != "Acton" & Lake != "Langtjern" & Lake != "Trout") %>%
ggplot() +
geom_smooth(aes(GPP, est_GPP), method = "lm", alpha = 0.3) +
geom_point(aes(GPP, est_GPP, pch = Lake), size = 2) +
ggh4x::facet_grid2(model ~ species,  scales = "free", independent = "y") +
scale_x_log10() + scale_y_log10() +
labs(x = "Measured GPP mg C L^-1 day^-1",
y = "Modelled GPP mg C L^-1 day^-1",
shape = NULL) +
scale_shape_manual(
values = c(
"Acton" = 0,
"EastLong" = 1,
"Feeagh" = 2,
"Harp" = 3,
"Langtjern" = 4,
"Lillinoah" = 5,
"Lillsjoliden" = 6,
"Mangstrettjarn" = 7,
"Mendota" = 8,
"Morris" = 9,
"Struptjarn" = 10,
"Trout" = 11,
"Vortsjarv" = 12
)
) +
theme(legend.position = "right"))
# calculate rsq values
rsq <- expand.grid(model = c("static", "dynamic"),
species = c("average", "diatoms", "greens", "cyanos"),
Lake = unique(corman2$Lake))
rsq$rsq <- NA
r <- lapply(1:nrow(rsq), function(i) {
subset <- base.predictions.corman %>% filter(species == rsq[i, "species"]  & model == rsq[i, "model"] & Lake ==rsq[i, "Lake"])
subset <- subset %>%
mutate(log10GPP = log10(GPP),
log10estGPP = log10(est_GPP)) %>%
mutate(log10GPP = ifelse(is.infinite(log10GPP), NA, log10GPP))
r <- summary(lm(log10estGPP ~ log10GPP, data = subset))$adj.r.squared
return(r)
})
rsq$rsq <- round(unlist(r), 2)
View(rsq)
rsq %>% pivot_wider(id_cols = c(Lake, model), names_from = species, values_from = rsq)
rsq.long <- rsq %>% pivot_wider(id_cols = c(Lake, model), names_from = species, values_from = rsq)
View(rsq.long)
View(rsq)
rsq %>% ggplot(aes(Lake, rsq, col = species)) + geom_point() + facet_wrap(model~.)
View(corman2)
