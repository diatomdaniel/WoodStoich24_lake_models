QN1 = NA # algae cell N quota in mg N mg^-1 C^-1
)
names(params.mich) <- c("SA", "zmix", "Pin", "Nin", "I0",
"kBg", "kA", "umax1", "lA", "v",
"KLight", "KP1",  "QP1", "KN1",  "QN1")
names(params.mich)
params.mich <- unlist(params.mich)
## droop model for mean phytoplankton traits
params.droop <- c(
# lake parameters
SA= 1,		# lake surface area in km2
zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
# light parameters
I0 = 400, # surface light
kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
# algae physiology parameters
umax1 = 0.665,
lA=0.1,			# mortality rate day-1
v= 0.1,			# m d-1; sinking loss of algae
KLight = 155.53, # light half sat constant
KP1 = NA, # phosphorus half sat constant in mg P m^-3 f
minQP1 = NA, # algae cell P quota in mg P mg^-1 C^-1 f
upP1 = NA, # max uptake rate P per day in mg P mg C^-1 day^-1
KN1 = NA, # nitrogen half sat constant in mg N m^-3
minQN1 = NA, # algae cell N quota in mg N mg^-1 C^-1 f
upN1 = NA # max uptake rate N per day in mg N mg C^-1 day^-1
)
names(params.droop) <- c("SA", "zmix", "Pin", "Nin", "I0", "kBg", "kA",
"umax1", "lA", "v", "KLight",
"KP1", "minQP1", "upP1", "KN1",
"minQN1", "upN1")
names(params.droop)
params.droop <- unlist(params.droop)
best.run <- lapply(1:nrow(corman2), function(i){
# indexing
params.mich["KP1"] = pull(best.parm[1, "KP1"])
params.mich["KN1"] = pull(best.parm[1, "KN1"])
params.mich["QP1"] = pull(best.parm[1, "minQP1"])
params.mich["QN1"] = pull(best.parm[1, "minQN1"])
params.mich["Pin"] = pull(corman2[i, "TP_load"])
params.mich["Nin"] = pull(corman2[i, "TN_load"])
# starting values
y <- c("A1" = 100, "P" = grid.new[i, "TP_load"], "N" = grid.new[i, "TN_load"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
# convert to df
best.run <- do.call(rbind, best.run)
best.run <- as_data_frame(best.run)
View(best.run)
# combine with original df
best.run <- bind_cols(best.run, corman2)
best.run %>%
ggplot() +
geom_point(aes(TP_load, TN_load, col = GPP))
View(best.run)
best.run %>%
ggplot() +
geom_point(aes(TP_load, TN_load, col = GPP)) +
geom_point(aes(TP_load, TN_load, col = A1))
best.run %>%
ggplot() +
#geom_point(aes(TP_load, TN_load, col = GPP)) +
geom_point(aes(TP_load, TN_load, col = A1))
best.run %>%
ggplot() +
geom_point(aes(GPP, A1))
(Kp.rmse <- grid.new.rmse %>%
ggplot(aes(KP1, RMSE)) + geom_point() +
labs(x = expression("K"["P"]), y = "RMSE"))
(Kp.rmse <- grid.new.rmse %>%
ggplot(aes(KP1, RMSE)) + geom_point() +
labs(x = expression("K"["P"] ~ " ug L"^-1), y = "RMSE"))
(Kp.rmse <- grid.new.rmse %>%
ggplot(aes(KP1, RMSE)) + geom_point(alpha = 0.8) +
labs(x = expression("K"["P"] ~ " ug L"^-1), y = "RMSE"))
(Kp.rmse <- grid.new.rmse %>%
ggplot(aes(KP1, RMSE)) + geom_point(alpha = 0.3) +
labs(x = expression("K"["P"] ~ " ug L"^-1), y = "RMSE"))
(QN.rmse <- grid.new.rmse %>%
ggplot(aes(minQP1, RMSE)) + geom_point(alpha = 0.3) +
labs(x = expression("min Q"["P"] ~ " mg P (mg C)"^-1), y = "RMSE"))
(QN.rmse <- grid.new.rmse %>%
ggplot(aes(minQN1, RMSE)) + geom_point(alpha = 0.3) +
labs(x = expression("minQ"["N"] ~ "in mg N (mg C)"^-1), y = "RMSE"))
pck <- c("deSolve", "tidyverse", "cowplot", "ggsci", "ggpubr", "ggtern", "patchwork")
lapply(pck, require, character.only = T)
Kp.rmse <- grid.new.rmse %>%
ggplot(aes(KP1, RMSE)) + geom_point(alpha = 0.3) +
labs(x = expression("K"["P"] ~ " ug L"^-1), y = "RMSE")
Kn.rmse <- grid.new.rmse %>%
ggplot(aes(KN1, RMSE)) + geom_point(alpha = 0.3) +
labs(x = expression("K"["N"] ~ " ug L"^-1), y = "RMSE")
QP.rmse <- grid.new.rmse %>%
ggplot(aes(minQP1, RMSE)) + geom_point(alpha = 0.3) +
labs(x = expression("minQ"["P"] ~ "in mg P (mg C)"^-1), y = "RMSE")
QN.rmse <- grid.new.rmse %>%
ggplot(aes(minQN1, RMSE)) + geom_point(alpha = 0.3) +
labs(x = expression("minQ"["N"] ~ "in mg N (mg C)"^-1), y = "RMSE")
Kp.rmse + Kn.rmse + QP.rmse + QN.rmse + plot_layout(ncol = 4)
# grids take too long to run, gonna save to r data file and reload for convenience
saveRDS(mm.grid, "temporary_model_files/corman2023_MM_gridsearch")
# grids take too long to run, gonna save to r data file and reload for convenience
#saveRDS(mm.grid, "temporary_model_files/corman2023_MM_gridsearch")
load("temporary_model_files/corman2023_MM_gridsearch")
# grids take too long to run, gonna save to r data file and reload for convenience
save(mm.grid, "temporary_model_files/corman2023_MM_gridsearch")
# grids take too long to run, gonna save to r data file and reload for convenience
save(mm.grid, "temporary_model_files/corman2023_MM_gridsearch.Rdata")
# grids take too long to run, gonna save to r data file and reload for convenience
save(mm.grid,file = "temporary_model_files/corman2023_MM_gridsearch.Rdata")
load("temporary_model_files/corman2023_MM_gridsearch.Rdata")
rm(mm.grid)
load("temporary_model_files/corman2023_MM_gridsearch.Rdata")
View(mm.grid)
best.run.plt <- best.run %>%
ggplot() +
geom_point(aes(GPP, A1)) +
labs(x = "Measured GPP mg C L"^-1)
best.run.plt <- best.run %>%
ggplot() +
geom_point(aes(GPP, A1)) +
geom_abline(slope = 1, intercept = 0, lty = "dashed") +
labs(x = expression("Measured GPP mg C L"^-1),
y = expression("Modelled GPP mg C m"^-1))
best.run.plt
View(best.run)
best.run.plt <- best.run %>%
mutate(TN_TP_load = (TN_load/14.007)/(TP_load/30.974)) +
ggplot() +
geom_point(aes(GPP, A1, col = TN_TP_load)) +
geom_abline(slope = 1, intercept = 0, lty = "dashed") +
labs(x = expression("Measured GPP mg C L"^-1),
y = expression("Modelled GPP mg C m"^-1))
best.run.plt <- best.run %>%
mutate(TN_TP_load = (TN_load/14.007)/(TP_load/30.974)) %>%
ggplot() +
geom_point(aes(GPP, A1, col = TN_TP_load)) +
geom_abline(slope = 1, intercept = 0, lty = "dashed") +
labs(x = expression("Measured GPP mg C L"^-1),
y = expression("Modelled GPP mg C m"^-1))
best.run.plt
best.run.plt <- best.run %>%
mutate(TN_TP_load = (TN_load/14.007)/(TP_load/30.974)) %>%
ggplot() +
geom_point(aes(GPP, A1, col = TN_TP_load), size = 2) +
geom_abline(slope = 1, intercept = 0, lty = "dashed") +
labs(x = expression("Measured GPP mg C L"^-1),
y = expression("Modelled GPP mg C m"^-1))
best.run.plt
best.run.plt <- best.run %>%
mutate(TN_TP_load = (TN_load/14.007)/(TP_load/30.974)) %>%
ggplot() +
geom_point(aes(GPP, A1, col = TN_TP_load), size = 4) +
geom_abline(slope = 1, intercept = 0, lty = "dashed") +
labs(x = expression("Measured GPP mg C L"^-1),
y = expression("Modelled GPP mg C m"^-1))
best.run.plt <- best.run %>%
mutate(TN_TP_load = (TN_load/14.007)/(TP_load/30.974)) %>%
ggplot() +
geom_point(aes(GPP, A1, col = TN_TP_load), size = 4) +
geom_abline(slope = 1, intercept = 0, lty = "dashed") +
labs(x = expression("Measured GPP mg C L"^-1),
y = expression("Modelled GPP mg C m"^-1)) +
ggsci::scale_fill_jco()
best.run.plt
best.run.plt <- best.run %>%
mutate(TN_TP_load = (TN_load/14.007)/(TP_load/30.974)) %>%
ggplot() +
geom_point(aes(GPP, A1, col = TN_TP_load), size = 4) +
geom_abline(slope = 1, intercept = 0, lty = "dashed") +
labs(x = expression("Measured GPP mg C L"^-1),
y = expression("Modelled GPP mg C m"^-1)) +
ggsci::scale_col_jco()
best.run.plt <- best.run %>%
mutate(TN_TP_load = (TN_load/14.007)/(TP_load/30.974)) %>%
ggplot() +
geom_point(aes(GPP, A1, col = TN_TP_load), size = 2.5) +
geom_abline(slope = 1, intercept = 0, lty = "dashed") +
labs(x = expression("Measured GPP mg C L"^-1),
y = expression("Modelled GPP mg C m"^-1)) +
ggsci::scale_color_jco()
best.run.plt
best.run.plt <- best.run %>%
mutate(TN_TP_load = (TN_load/14.007)/(TP_load/30.974)) %>%
ggplot() +
geom_point(aes(GPP, A1, col = TN_TP_load), size = 2.5) +
geom_abline(slope = 1, intercept = 0, lty = "dashed") +
labs(x = expression("Measured GPP mg C L"^-1),
y = expression("Modelled GPP mg C m"^-1)) +
scale_col_viridis_b(option = "C")
best.run.plt <- best.run %>%
mutate(TN_TP_load = (TN_load/14.007)/(TP_load/30.974)) %>%
ggplot() +
geom_point(aes(GPP, A1, col = TN_TP_load), size = 2.5) +
geom_abline(slope = 1, intercept = 0, lty = "dashed") +
labs(x = expression("Measured GPP mg C L"^-1),
y = expression("Modelled GPP mg C m"^-1)) +
scale_color_viridis_b(option = "C")
best.run.plt
best.run.plt <- best.run %>%
mutate(TN_TP_load = (TN_load/14.007)/(TP_load/30.974)) %>%
ggplot() +
geom_point(aes(GPP, A1, col = TN_TP_load), size = 2.5) +
geom_abline(slope = 1, intercept = 0, lty = "dashed") +
labs(x = expression("Measured GPP mg C L"^-1),
y = expression("Modelled GPP mg C m"^-1),
col = "Load TN:TP molar") +
scale_color_viridis_b(option = "C")
best.run.plt
# michaelis menten grid
grid <- expand.grid(
KP1 = seq(1, 20, 1),
KN1 = seq(10, 50, 5),
minQN1 = seq(0.1, 1, 0.1),
minQP1 = seq(0.1, 1, 0.1) #,
# upP1 = seq(0.01, 0.05, 0.05),
# upN1 = seq(0.01, 0.05, 0.05)
)
# repeat grid nrow(corman2) times
grid.new <- grid %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
grid.new$Lake <- rep(corman2$Lake, nrow(grid))
grid.new$GPP <- rep(corman2$GPP, nrow(grid))
grid.new$TN_load <- rep(corman2$TN_load, nrow(grid))
grid.new$TP_load <- rep(corman2$TP_load, nrow(grid))
# droop grid
grid.droop <- expand.grid(
KP1 = seq(1, 20, 1),
KN1 = seq(10, 50, 5),
minQN1 = seq(0.1, 1, 0.1),
minQP1 = seq(0.1, 1, 0.1),
upP1 = seq(0.01, 0.05, 0.05),
upN1 = seq(0.01, 0.05, 0.05)
)
# repeat grid nrow(corman2) times
grid.droop.new <- grid.droop %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
grid.droop.new$Lake <- rep(corman2$Lake, nrow(grid.droop))
grid.droop.new$GPP <- rep(corman2$GPP, nrow(grid.droop))
grid.droop.new$TN_load <- rep(corman2$TN_load, nrow(grid.droop))
grid.droop.new$TP_load <- rep(corman2$TP_load, nrow(grid.droop))
# michaelis menten grid
grid <- expand.grid(
KP1 = seq(1, 20, 1),
KN1 = seq(10, 50, 5),
minQN1 = seq(0.1, 1, 0.1),
minQP1 = seq(0.1, 1, 0.1) #,
# upP1 = seq(0.01, 0.05, 0.05),
# upN1 = seq(0.01, 0.05, 0.05)
)
# repeat grid nrow(corman2) times
grid.new <- grid %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
grid.new$Lake <- rep(corman2$Lake, nrow(grid))
grid.new$GPP <- rep(corman2$GPP, nrow(grid))
grid.new$TN_load <- rep(corman2$TN_load, nrow(grid))
grid.new$TP_load <- rep(corman2$TP_load, nrow(grid))
# droop grid
grid.droop <- expand.grid(
KP1 = seq(1, 20, 1),
KN1 = seq(10, 50, 5),
minQN1 = seq(0.1, 1, 0.1),
minQP1 = seq(0.1, 1, 0.1),
upP1 = seq(0.01, 0.05, 0.05),
upN1 = seq(0.01, 0.05, 0.05)
)
# repeat grid nrow(corman2) times
grid.droop.new <- grid.droop %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
grid.droop.new$Lake <- rep(corman2$Lake, nrow(grid.droop))
grid.droop.new$GPP <- rep(corman2$GPP, nrow(grid.droop))
grid.droop.new$TN_load <- rep(corman2$TN_load, nrow(grid.droop))
grid.droop.new$TP_load <- rep(corman2$TP_load, nrow(grid.droop))
View(grid.droop)
#takes over an hour to run!!
droop.grid <- lapply(1:nrow(grid.droop.new.new), function(i){
# indexing
params.droop["KP1"] = grid.droop.new[i, "KP1"]
params.droop["KN1"] = grid.droop.new[i, "KN1"]
params.droop["QP1"] = grid.droop.new[i, "minQP1"]
params.droop["QN1"] = grid.droop.new[i, "minQN1"]
params.droop["upP1"] = grid.droop.new[i, "upP1"]
params.droop["upN1"] = grid.droop.new[i, "upN1"]
params.droop["Pin"] = grid.droop.new[i, "TP_load"]
params.droop["Nin"] = grid.droop.new[i, "TN_load"]
# starting values
y <- c("A1" = 100, "P" = grid.droop.new[i, "TP_load"],
"N" = grid.droop.new[i, "TN_load"])
run <- ode(y, times, parms = params.droop, func = droop.single)
return(run[max(times),])
})
#takes over an hour to run!!
droop.grid <- lapply(1:nrow(grid.droop.new), function(i){
# indexing
params.droop["KP1"] = grid.droop.new[i, "KP1"]
params.droop["KN1"] = grid.droop.new[i, "KN1"]
params.droop["QP1"] = grid.droop.new[i, "minQP1"]
params.droop["QN1"] = grid.droop.new[i, "minQN1"]
params.droop["upP1"] = grid.droop.new[i, "upP1"]
params.droop["upN1"] = grid.droop.new[i, "upN1"]
params.droop["Pin"] = grid.droop.new[i, "TP_load"]
params.droop["Nin"] = grid.droop.new[i, "TN_load"]
# starting values
y <- c("A1" = 100, "P" = grid.droop.new[i, "TP_load"],
"N" = grid.droop.new[i, "TN_load"])
run <- ode(y, times, parms = params.droop, func = droop.single)
return(run[max(times),])
})
#takes over an hour to run!!
droop.grid <- lapply(1:nrow(grid.droop.new), function(i){
# indexing
params.droop["KP1"] = grid.droop.new[i, "KP1"]
params.droop["KN1"] = grid.droop.new[i, "KN1"]
params.droop["QP1"] = grid.droop.new[i, "minQP1"]
params.droop["QN1"] = grid.droop.new[i, "minQN1"]
params.droop["upP1"] = grid.droop.new[i, "upP1"]
params.droop["upN1"] = grid.droop.new[i, "upN1"]
params.droop["Pin"] = grid.droop.new[i, "TP_load"]
params.droop["Nin"] = grid.droop.new[i, "TN_load"]
# starting values
y <- c("A1" = 100, "P" = grid.droop.new[i, "TP_load"],
"N" = grid.droop.new[i, "TN_load"],
"QP1" = 0.015,
"QN1" = 0.1)
run <- ode(y, times, parms = params.droop, func = droop.single)
return(run[max(times),])
})
#takes over an hour to run!!
droop.grid <- lapply(1:nrow(grid.droop.new), function(i){
# indexing
params.droop["KP1"] = grid.droop.new[i, "KP1"]
params.droop["KN1"] = grid.droop.new[i, "KN1"]
params.droop["QP1"] = grid.droop.new[i, "minQP1"]
params.droop["QN1"] = grid.droop.new[i, "minQN1"]
params.droop["upP1"] = grid.droop.new[i, "upP1"]
params.droop["upN1"] = grid.droop.new[i, "upN1"]
params.droop["Pin"] = grid.droop.new[i, "TP_load"]
params.droop["Nin"] = grid.droop.new[i, "TN_load"]
# starting values
y <- c("A1" = 100, "P" = grid.droop.new[i, "TP_load"],
"N" = grid.droop.new[i, "TN_load"],
"QP1" = 0.015,
"QN1" = 0.1)
run <- ode(y, times, parms = params.droop, func = droop.single)
return(run[max(times),])
})
i = 10
# indexing
params.droop["KP1"] = grid.droop.new[i, "KP1"]
params.droop["KN1"] = grid.droop.new[i, "KN1"]
params.droop["QP1"] = grid.droop.new[i, "minQP1"]
params.droop["QN1"] = grid.droop.new[i, "minQN1"]
params.droop["upP1"] = grid.droop.new[i, "upP1"]
params.droop["upN1"] = grid.droop.new[i, "upN1"]
params.droop["Pin"] = grid.droop.new[i, "TP_load"]
params.droop["Nin"] = grid.droop.new[i, "TN_load"]
params.droop
#takes over an hour to run!!
droop.grid <- lapply(1:nrow(grid.droop.new), function(i){
# indexing
params.droop["KP1"] = grid.droop.new[i, "KP1"]
params.droop["KN1"] = grid.droop.new[i, "KN1"]
params.droop["minQP1"] = grid.droop.new[i, "minQP1"]
params.droop["minQN1"] = grid.droop.new[i, "minQN1"]
params.droop["upP1"] = grid.droop.new[i, "upP1"]
params.droop["upN1"] = grid.droop.new[i, "upN1"]
params.droop["Pin"] = grid.droop.new[i, "TP_load"]
params.droop["Nin"] = grid.droop.new[i, "TN_load"]
# starting values
y <- c("A1" = 100, "P" = grid.droop.new[i, "TP_load"],
"N" = grid.droop.new[i, "TN_load"],
"QP1" = 0.015,
"QN1" = 0.1)
run <- ode(y, times, parms = params.droop, func = droop.single)
return(run[max(times),])
})
# convert to df
droop.grid <- do.call(rbind, droop.grid)
droop.grid <- as_data_frame(droop.grid)
# grids take too long to run, gonna save to r data file and reload for convenience
save(droop.grid,file = "temporary_model_files/corman2023_droop_gridsearch.Rdata")
load("temporary_model_files/corman2023_droop_gridsearch.Rdata")
# add to grid
grid.droop.new$est_GPP <- droop.grid$A1
# add ID label to group
grid.droop.new$group.ID <- rep(1:nrow(grid.droop), each= nrow(corman2))
# calculate RMSE
grid.droop.new.rmse <- grid.droop.new %>%
group_by(group.ID, KP1, KN1, minQN1, minQP1, upP1, upN1) %>%
summarise(RMSE = sqrt((mean(GPP) - mean(est_GPP))^2))
# check distribution of RMSE
hist(grid.droop.new.rmse$RMSE)
which.min(grid.droop.new.rmse$RMSE)
# select best parameters
best.parm.droop <- grid.droop.new.rmse[which.min(grid.droop.new.rmse$RMSE), ]
View(best.parm.droop)
Kp.droop.rmse <- grid.droop.new.rmse %>%
ggplot(aes(KP1, RMSE)) + geom_point(alpha = 0.3) +
labs(x = expression("K"["P"] ~ " ug L"^-1), y = "RMSE")
Kn..droop.rmse <- grid.droop.new.rmse %>%
ggplot(aes(KN1, RMSE)) + geom_point(alpha = 0.3) +
labs(x = expression("K"["N"] ~ " ug L"^-1), y = NULL)
QP.droop.rmse <- grid.droop.new.rmse %>%
ggplot(aes(minQP1, RMSE)) + geom_point(alpha = 0.3) +
labs(x = expression("minQ"["P"] ~ "in mg P (mg C)"^-1), y = NULL)
QN.droop.rmse <- grid.droop.new.rmse %>%
ggplot(aes(minQN1, RMSE)) + geom_point(alpha = 0.3) +
labs(x = expression("minQ"["N"] ~ "in mg N (mg C)"^-1), y = NULL)
uP.droop.rmse <- grid.droop.new.rmse %>%
ggplot(aes(upP1, RMSE)) + geom_point(alpha = 0.3) +
labs(x = expression("uptake P mg P (mg C)"^-1), y = NULL)
uN.droop.rmse <- grid.droop.new.rmse %>%
ggplot(aes(upN1, RMSE)) + geom_point(alpha = 0.3) +
labs(x = expression("uptake N mg P (mg C)"^-1), y = NULL)
Kp.rmse + Kn.rmse + QP.rmse + QN.rmse + uP.droop.rmse + uN.droop.rmse +
plot_layout(ncol = 6)
best.run.droop <- lapply(1:nrow(corman2), function(i){
# indexing
params.droop["KP1"] = pull(best.parm.droop[1, "KP1"])
params.droop["KN1"] = pull(best.parm.droop[1, "KN1"])
params.droop["minQP1"] = pull(best.parm.droop[1, "minQP1"])
params.droop["minQN1"] = pull(best.parm.droop[1, "minQN1"])
params.droop["upP1"] = pull(best.parm.droop[1, "upP"])
params.droop["upN1"] = pull(best.parm.droop[1, "upN1"])
params.droop["Pin"] = pull(corman2[i, "TP_load"])
params.droop["Nin"] = pull(corman2[i, "TP_load"])
# starting values
y <- c("A1" = 100, "P" = corman2[i, "TP_load"], "N" = corman2[i, "TN_load"],
"QP1" = 0.015,"QN1" = 0.1)
run <- ode(y, times, parms = params.mich, func = droop.single)
return(run[max(times),])
})
best.run.droop <- lapply(1:nrow(corman2), function(i){
# indexing
params.droop["KP1"] = pull(best.parm.droop[1, "KP1"])
params.droop["KN1"] = pull(best.parm.droop[1, "KN1"])
params.droop["minQP1"] = pull(best.parm.droop[1, "minQP1"])
params.droop["minQN1"] = pull(best.parm.droop[1, "minQN1"])
params.droop["upP1"] = pull(best.parm.droop[1, "upP1"])
params.droop["upN1"] = pull(best.parm.droop[1, "upN1"])
params.droop["Pin"] = pull(corman2[i, "TP_load"])
params.droop["Nin"] = pull(corman2[i, "TP_load"])
# starting values
y <- c("A1" = 100, "P" = corman2[i, "TP_load"], "N" = corman2[i, "TN_load"],
"QP1" = 0.015,"QN1" = 0.1)
run <- ode(y, times, parms = params.mich, func = droop.single)
return(run[max(times),])
})
y <- c("A1" = 100, "P" = corman2[i, "TP_load"], "N" = corman2[i, "TN_load"],
"QP1" = 0.015,"QN1" = 0.1)
y
best.run.droop <- lapply(1:nrow(corman2), function(i){
# indexing
params.droop["KP1"] = pull(best.parm.droop[1, "KP1"])
params.droop["KN1"] = pull(best.parm.droop[1, "KN1"])
params.droop["minQP1"] = pull(best.parm.droop[1, "minQP1"])
params.droop["minQN1"] = pull(best.parm.droop[1, "minQN1"])
params.droop["upP1"] = pull(best.parm.droop[1, "upP1"])
params.droop["upN1"] = pull(best.parm.droop[1, "upN1"])
params.droop["Pin"] = pull(corman2[i, "TP_load"])
params.droop["Nin"] = pull(corman2[i, "TP_load"])
# starting values
y <- c("A1" = 100, "P" = pull(corman2[i, "TP_load"]), "N" = pull(corman2[i, "TN_load"]),
"QP1" = 0.015,"QN1" = 0.1)
run <- ode(y, times, parms = params.mich, func = droop.single)
return(run[max(times),])
})
y <- c("A1" = 100, "P" = pull(corman2[i, "TP_load"]), "N" = pull(corman2[i, "TN_load"]),
"QP1" = 0.015,"QN1" = 0.1)
z
y
View(corman2)
best.run.droop <- lapply(1:nrow(corman2), function(i){
# indexing
params.droop["KP1"] = pull(best.parm.droop[1, "KP1"])
params.droop["KN1"] = pull(best.parm.droop[1, "KN1"])
params.droop["minQP1"] = pull(best.parm.droop[1, "minQP1"])
params.droop["minQN1"] = pull(best.parm.droop[1, "minQN1"])
params.droop["upP1"] = pull(best.parm.droop[1, "upP1"])
params.droop["upN1"] = pull(best.parm.droop[1, "upN1"])
params.droop["Pin"] = pull(corman2[i, "TP_load"])
params.droop["Nin"] = pull(corman2[i, "TP_load"])
# starting values
y <- c("A1" = 100, "P" = corman2[i, "TP_load"], "N" = corman2[i, "TN_load"],
"QP1" = 0.015,"QN1" = 0.1)
run <- ode(y, times, parms = params.mich, func = droop.single)
return(run[max(times),])
})
best.run.droop <- lapply(1:nrow(corman2), function(i){
# indexing
params.droop["KP1"] = pull(best.parm.droop[1, "KP1"])
params.droop["KN1"] = pull(best.parm.droop[1, "KN1"])
params.droop["minQP1"] = pull(best.parm.droop[1, "minQP1"])
params.droop["minQN1"] = pull(best.parm.droop[1, "minQN1"])
params.droop["upP1"] = pull(best.parm.droop[1, "upP1"])
params.droop["upN1"] = pull(best.parm.droop[1, "upN1"])
params.droop["Pin"] = pull(corman2[i, "TP_load"])
params.droop["Nin"] = pull(corman2[i, "TP_load"])
# starting values
y <- c("A1" = 100, "P" = corman2[i, "TP_load"], "N" = corman2[i, "TN_load"],
"QP1" = 0.015,"QN1" = 0.1)
run <- ode(y, times, parms = params.droop, func = droop.single)
return(run[max(times),])
})
