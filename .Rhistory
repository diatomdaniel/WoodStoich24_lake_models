labs(x = expression("TP load mg P m"^-3 ~ "lake water day"^-1),
y = expression("GPP mg C L"^-1 ~ "day"^-1))
c3 <- corman2 %>%
ggplot(aes(TN_load, GPP)) +
geom_point() +
labs(x = expression("TN load mg N m"^-3 ~ "lake water day"^-1),
y = expression("GPP mg C L"^-1 ~ "day"^-1))
c1 + c2 + c3 + plot_layout(ncol = 3)
# michaelis menten grid
grid <- expand.grid(
KP1 = seq(1, 20, ),
KN1 = seq(10, 50, 5),
minQN1 = seq(0.1, 1, 0.1),
minQP1 = seq(0.1, 1, 0.1)
)
# repeat grid nrow(corman2) times
grid.new <- grid %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
grid.new$Lake <- rep(corman2$Lake, nrow(grid))
grid.new$GPP <- rep(corman2$GPP, nrow(grid))
grid.new$TN_load <- rep(corman2$TN_load, nrow(grid))
grid.new$TP_load <- rep(corman2$TP_load, nrow(grid))
grid.new$SA <- rep(corman2$SA, nrow(grid))
# droop grid
grid.droop <- expand.grid(
KP1 = seq(1, 20, 1),
KN1 = seq(10, 50, 5),
minQN1 = seq(0.1, 1, 0.1),
minQP1 = seq(0.1, 1, 0.1),
upP1 = c(0.1, 0.4, 0.8),
upN1 = seq(0.05, 1, 1.5)
)
# repeat grid nrow(corman2) times
grid.droop.new <- grid.droop %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
grid.droop.new$Lake <- rep(corman2$Lake, nrow(grid.droop))
grid.droop.new$GPP <- rep(corman2$GPP, nrow(grid.droop))
grid.droop.new$TN_load <- rep(corman2$TN_load, nrow(grid.droop))
grid.droop.new$TP_load <- rep(corman2$TP_load, nrow(grid.droop))
grid.droop.new$SA <- rep(corman2$SA, nrow(grid))
### averages
## michaelis-menten model for mean phytoplankton traits
params.mich <- c(
# lake parameters
SA= NA,		# lake surface area in km2
#zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
#light parameters
I0 = 400, # incident light
kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
# algae physiology parameters
umax1 = 0.665,
lA=0.1,			# mortality rate day-1
v=0.1,			# m d-1; sinking loss of algae
KLight = 166.53, # light half sat constant
KP1 = NA, # phosphorus half sat constant in mg P m^-3 f
QP1 = NA, # algae cell P quota in mg P mg^-1 C^-1
KN1 = NA, # nitrogen half sat constant in mg N m^-3
QN1 = NA # algae cell N quota in mg N mg^-1 C^-1
)
names(params.mich) <- c("SA", "Pin", "Nin", "I0",
"kBg", "kA", "umax1", "lA", "v",
"KLight", "KP1",  "QP1", "KN1",  "QN1")
names(params.mich)
params.mich <- unlist(params.mich)
## droop model for mean phytoplankton traits
params.droop <- c(
# lake parameters
SA= NA,		# lake surface area in km2
#zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
# light parameters
I0 = 400, # surface light
kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
# algae physiology parameters
umax1 = 0.665,
lA=0.1,			# mortality rate day-1
v= 0.1,			# m d-1; sinking loss of algae
KLight = 155.53, # light half sat constant
KP1 = NA, # phosphorus half sat constant in mg P m^-3 f
minQP1 = NA, # algae cell P quota in mg P mg^-1 C^-1 f
upP1 = NA, # max uptake rate P per day in mg P mg C^-1 day^-1
KN1 = NA, # nitrogen half sat constant in mg N m^-3
minQN1 = NA, # algae cell N quota in mg N mg^-1 C^-1 f
upN1 = NA # max uptake rate N per day in mg N mg C^-1 day^-1
)
names(params.droop) <- c("SA", "Pin", "Nin", "I0", "kBg", "kA",
"umax1", "lA", "v", "KLight",
"KP1", "minQP1", "upP1", "KN1",
"minQN1", "upN1")
names(params.droop)
params.droop <- unlist(params.droop)
#takes over an hour to run!!
(start <- Sys.time())
mm.grid <- lapply(1:nrow(grid.new), function(i){
# indexing
params.mich["SA"] = grid.new[i, "SA"]
params.mich["KP1"] = grid.new[i, "KP1"]
params.mich["KN1"] = grid.new[i, "KN1"]
params.mich["QP1"] = grid.new[i, "minQP1"]
params.mich["QN1"] = grid.new[i, "minQN1"]
params.mich["Pin"] = grid.new[i, "TP_load"]
params.mich["Nin"] = grid.new[i, "TN_load"]
# starting values
y <- c("A1" = 100, "P" = grid.new[i, "TP_load"], "N" = grid.new[i, "TN_load"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
# corman data lake volumes
corman.vol <- tibble(
Lake = c("Acton", "Crampton", "EastLong", "Feeagh", "Harp", "Langtjern",
"Lillinonah", "Lillsjoliden", "Mangstrettjarn",
"Mendota", "Morris", "Nastjarn", "Ovre", "Struptjarn", "Trout", "Vortsjarv"),
Depth_m = c(3.9, 5.03, 4.04, 14.50, 13.30, 2, 13, 3.8, 5.3,
12.80, 2.42, 4.20, 4, 3.80, 14.60, 2.80),
SA_km2 = c(2.5, 0.26, 0.03, 3.92, 0.71, 0.23, 6.26, 0.01, 0.02,
39.60, 0.06, 0.01, 0.05, 0.03, 15.70, 270),
DOC_mgL = c(4.3, 4.6, 10.6, 5.6, 5.2, 11.8, NA, 15.5, 11.9, 4.7, 17.3, 8.2, 23.2, 19.9, 2.8, 11.9)) %>%
mutate(volume_m3 = SA_km2 * 1e6 * Depth_m)
# load data
corman2 <- corman
# select columns needed
corman2 <- corman2 %>%
select(Lake, DateTime, GPP, TN_load, TP_load) %>%
drop_na() %>%
mutate(GPP = GPP * 0.375, # convert from O2 to C: 12 mg per mole C/32 mg per mole O2
TN_load = TN_load/1000,
TP_load = TP_load/1000) %>% # divide by 10^3 bc. Corman et al data is in units ug m^-3 and we need mg m^-3
# merge(., corman.vol, by = "Lake") %>%
# mutate(TN_in = TN_load * volume_m3,
#        TP_in = TP_load * volume_m3) %>%
# # caclulate "new" loads for the model
# mutate(TN_load = TN_in/(2 * 1e6),
#        TP_load = TP_in/(2 * 1e6)) %>%
merge(., corman.vol, by = "Lake") %>%
group_by(Lake) %>%
summarize(GPP = median(GPP),
TN_load = median(TN_load),
TP_load = median(TP_load),
SA = median(SA_km2),
DOC_mgL = median(DOC_mgL))
View(corman2)
median(corman2$DOC_mgL)
median(corman2$DOC_mgL, na.rm = T)
# corman data lake volumes
# no DOC for Lillinonah! used median DOC of the data set =
corman.vol <- tibble(
Lake = c("Acton", "Crampton", "EastLong", "Feeagh", "Harp", "Langtjern",
"Lillinonah", "Lillsjoliden", "Mangstrettjarn",
"Mendota", "Morris", "Nastjarn", "Ovre", "Struptjarn", "Trout", "Vortsjarv"),
Depth_m = c(3.9, 5.03, 4.04, 14.50, 13.30, 2, 13, 3.8, 5.3,
12.80, 2.42, 4.20, 4, 3.80, 14.60, 2.80),
SA_km2 = c(2.5, 0.26, 0.03, 3.92, 0.71, 0.23, 6.26, 0.01, 0.02,
39.60, 0.06, 0.01, 0.05, 0.03, 15.70, 270),
DOC_mgL = c(4.3, 4.6, 10.6, 5.6, 5.2, 11.8, 11.8, 15.5, 11.9, 4.7, 17.3, 8.2, 23.2, 19.9, 2.8, 11.9)) %>%
mutate(volume_m3 = SA_km2 * 1e6 * Depth_m)
# load data
corman2 <- corman
# select columns needed
corman2 <- corman2 %>%
select(Lake, DateTime, GPP, TN_load, TP_load) %>%
drop_na() %>%
mutate(GPP = GPP * 0.375, # convert from O2 to C: 12 mg per mole C/32 mg per mole O2
TN_load = TN_load/1000,
TP_load = TP_load/1000) %>% # divide by 10^3 bc. Corman et al data is in units ug m^-3 and we need mg m^-3
# merge(., corman.vol, by = "Lake") %>%
# mutate(TN_in = TN_load * volume_m3,
#        TP_in = TP_load * volume_m3) %>%
# # caclulate "new" loads for the model
# mutate(TN_load = TN_in/(2 * 1e6),
#        TP_load = TP_in/(2 * 1e6)) %>%
merge(., corman.vol, by = "Lake") %>%
group_by(Lake) %>%
summarize(GPP = median(GPP),
TN_load = median(TN_load),
TP_load = median(TP_load),
SA = median(SA_km2),
DOC_mgL = median(DOC_mgL),
z_m = median(Depth_m))
# add calculated zmix
corman2$zmix <- 10^(-0.515 + log10(corman2$DOC_mgL) + 0.115 * log10(2 * sqrt(corman2$SA/pi + 0.991)))
View(corman2)
View(corman2)
rm(list = ls())
knitr::opts_chunk$set(echo = T, message = F, warning = F)
pck <- c("deSolve", "tidyverse", "cowplot", "ggsci", "ggpubr", "ggtern", "patchwork")
lapply(pck, require, character.only = T)
theme_set(theme_cowplot() +
theme(legend.justification = "center",
legend.position = "bottom",
legend.text = element_text(),
legend.title = element_text()))
# load ODE models
# saved in external files for convenience
# Michalis-Menten model
source("models/mich_single_noLight_calc_zmix.R") # michaelis menten kinetics, one algae species; model 1 in Carly's framework
# Droop model
source("models/droop_single_noLight_calc_zmix.R") # droop model, one algae species; model 3 in Carly's framework
# set up scenarios
times <- 1:500
# load data set
corman <- read_csv("data4input/Corman2023 metabolism result.csv")
# corman data lake volumes
# no DOC for Lillinonah! used median DOC of the data set =
corman.vol <- tibble(
Lake = c("Acton", "Crampton", "EastLong", "Feeagh", "Harp", "Langtjern",
"Lillinonah", "Lillsjoliden", "Mangstrettjarn",
"Mendota", "Morris", "Nastjarn", "Ovre", "Struptjarn", "Trout", "Vortsjarv"),
Depth_m = c(3.9, 5.03, 4.04, 14.50, 13.30, 2, 13, 3.8, 5.3,
12.80, 2.42, 4.20, 4, 3.80, 14.60, 2.80),
SA_km2 = c(2.5, 0.26, 0.03, 3.92, 0.71, 0.23, 6.26, 0.01, 0.02,
39.60, 0.06, 0.01, 0.05, 0.03, 15.70, 270),
DOC_mgL = c(4.3, 4.6, 10.6, 5.6, 5.2, 11.8, 11.8, 15.5, 11.9, 4.7, 17.3, 8.2, 23.2, 19.9, 2.8, 11.9)) %>%
mutate(volume_m3 = SA_km2 * 1e6 * Depth_m)
# load data
corman2 <- corman
# select columns needed
corman2 <- corman2 %>%
select(Lake, DateTime, GPP, TN_load, TP_load) %>%
drop_na() %>%
mutate(GPP = GPP * 0.375, # convert from O2 to C: 12 mg per mole C/32 mg per mole O2
TN_load = TN_load/1000,
TP_load = TP_load/1000) %>% # divide by 10^3 bc. Corman et al data is in units ug m^-3 and we need mg m^-3
# merge(., corman.vol, by = "Lake") %>%
# mutate(TN_in = TN_load * volume_m3,
#        TP_in = TP_load * volume_m3) %>%
# # caclulate "new" loads for the model
# mutate(TN_load = TN_in/(2 * 1e6),
#        TP_load = TP_in/(2 * 1e6)) %>%
merge(., corman.vol, by = "Lake") %>%
group_by(Lake) %>%
summarize(GPP = median(GPP),
TN_load = median(TN_load),
TP_load = median(TP_load),
SA = median(SA_km2),
DOC_mgL = median(DOC_mgL),
z_m = median(Depth_m))
# add calculated zmix
corman2$zmix <- 10^(-0.515 + log10(corman2$DOC_mgL) + 0.115 * log10(2 * sqrt(corman2$SA/pi + 0.991)))
# if zmix > z, set zmix to z; this is done in code
c1 <- corman2 %>%
ggplot(aes(GPP)) +
geom_density(col = "black", fill = "grey80") +
geom_vline(xintercept = quantile(corman2$GPP, c(0.0275, 0.5, 0.975)),
col = "red", lty = "dashed") +
labs(x = expression("GPP mg C L"^-1 ~ "day"^-1),
y = "Density")
c2 <- corman2 %>%
ggplot(aes(TP_load, GPP)) +
geom_point() +
labs(x = expression("TP load mg P m"^-3 ~ "lake water day"^-1),
y = expression("GPP mg C L"^-1 ~ "day"^-1))
c3 <- corman2 %>%
ggplot(aes(TN_load, GPP)) +
geom_point() +
labs(x = expression("TN load mg N m"^-3 ~ "lake water day"^-1),
y = expression("GPP mg C L"^-1 ~ "day"^-1))
c1 + c2 + c3 + plot_layout(ncol = 3)
# michaelis menten grid
grid <- expand.grid(
KP1 = seq(1, 20, ),
KN1 = seq(10, 50, 5),
minQN1 = seq(0.1, 1, 0.1),
minQP1 = seq(0.1, 1, 0.1)
)
# repeat grid nrow(corman2) times
grid.new <- grid %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
grid.new$Lake <- rep(corman2$Lake, nrow(grid))
grid.new$GPP <- rep(corman2$GPP, nrow(grid))
grid.new$TN_load <- rep(corman2$TN_load, nrow(grid))
grid.new$TP_load <- rep(corman2$TP_load, nrow(grid))
grid.new$SA <- rep(corman2$SA, nrow(grid))
# droop grid
grid.droop <- expand.grid(
KP1 = seq(1, 20, 1),
KN1 = seq(10, 50, 5),
minQN1 = seq(0.1, 1, 0.1),
minQP1 = seq(0.1, 1, 0.1),
upP1 = c(0.1, 0.4, 0.8),
upN1 = seq(0.05, 1, 1.5)
)
# repeat grid nrow(corman2) times
grid.droop.new <- grid.droop %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
grid.droop.new$Lake <- rep(corman2$Lake, nrow(grid.droop))
grid.droop.new$GPP <- rep(corman2$GPP, nrow(grid.droop))
grid.droop.new$TN_load <- rep(corman2$TN_load, nrow(grid.droop))
grid.droop.new$TP_load <- rep(corman2$TP_load, nrow(grid.droop))
grid.droop.new$SA <- rep(corman2$SA, nrow(grid))
### averages
## michaelis-menten model for mean phytoplankton traits
params.mich <- c(
# lake parameters
SA= NA,		# lake surface area in km2
#zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
DOC = NA,
z = NA,
#light parameters
I0 = 400, # incident light
kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
# algae physiology parameters
umax1 = 0.665,
lA=0.1,			# mortality rate day-1
v=0.1,			# m d-1; sinking loss of algae
KLight = 166.53, # light half sat constant
KP1 = NA, # phosphorus half sat constant in mg P m^-3 f
QP1 = NA, # algae cell P quota in mg P mg^-1 C^-1
KN1 = NA, # nitrogen half sat constant in mg N m^-3
QN1 = NA # algae cell N quota in mg N mg^-1 C^-1
)
names(params.mich) <- c("SA", "Pin", "Nin", "I0",
"kBg", "kA", "umax1", "lA", "v",
"KLight", "KP1",  "QP1", "KN1",  "QN1")
names(params.mich)
params.mich <- unlist(params.mich)
## droop model for mean phytoplankton traits
params.droop <- c(
# lake parameters
SA= NA,		# lake surface area in km2
#zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
DOC = NA,
z = NA,
# light parameters
I0 = 400, # surface light
kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
# algae physiology parameters
umax1 = 0.665,
lA=0.1,			# mortality rate day-1
v= 0.1,			# m d-1; sinking loss of algae
KLight = 155.53, # light half sat constant
KP1 = NA, # phosphorus half sat constant in mg P m^-3 f
minQP1 = NA, # algae cell P quota in mg P mg^-1 C^-1 f
upP1 = NA, # max uptake rate P per day in mg P mg C^-1 day^-1
KN1 = NA, # nitrogen half sat constant in mg N m^-3
minQN1 = NA, # algae cell N quota in mg N mg^-1 C^-1 f
upN1 = NA # max uptake rate N per day in mg N mg C^-1 day^-1
)
names(params.droop) <- c("SA", "Pin", "Nin", "I0", "kBg", "kA",
"umax1", "lA", "v", "KLight",
"KP1", "minQP1", "upP1", "KN1",
"minQN1", "upN1")
names(params.droop)
params.droop <- unlist(params.droop)
#takes over an hour to run!!
(start <- Sys.time())
mm.grid <- lapply(1:nrow(grid.new), function(i){
# indexing
params.mich["SA"] = grid.new[i, "SA"]
params.mich["SA"] = grid.new[i, "DOC_mgL"]
params.mich["z"] = grid.new[i, "z_m"]
params.mich["KP1"] = grid.new[i, "KP1"]
params.mich["KN1"] = grid.new[i, "KN1"]
params.mich["QP1"] = grid.new[i, "minQP1"]
params.mich["QN1"] = grid.new[i, "minQN1"]
params.mich["Pin"] = grid.new[i, "TP_load"]
params.mich["Nin"] = grid.new[i, "TN_load"]
# starting values
y <- c("A1" = 100, "P" = grid.new[i, "TP_load"], "N" = grid.new[i, "TN_load"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
#takes over an hour to run!!
(start <- Sys.time())
mm.grid <- lapply(1:nrow(grid.new), function(i){
# indexing
params.mich["SA"] = grid.new[i, "SA"]
params.mich["DOC"] = grid.new[i, "DOC_mgL"]
params.mich["z"] = grid.new[i, "z_m"]
params.mich["KP1"] = grid.new[i, "KP1"]
params.mich["KN1"] = grid.new[i, "KN1"]
params.mich["QP1"] = grid.new[i, "minQP1"]
params.mich["QN1"] = grid.new[i, "minQN1"]
params.mich["Pin"] = grid.new[i, "TP_load"]
params.mich["Nin"] = grid.new[i, "TN_load"]
# starting values
y <- c("A1" = 100, "P" = grid.new[i, "TP_load"], "N" = grid.new[i, "TN_load"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
# michaelis menten grid
grid <- expand.grid(
KP1 = seq(1, 20, ),
KN1 = seq(10, 50, 5),
minQN1 = seq(0.1, 1, 0.1),
minQP1 = seq(0.1, 1, 0.1)
)
# repeat grid nrow(corman2) times
grid.new <- grid %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
grid.new$Lake <- rep(corman2$Lake, nrow(grid))
grid.new$GPP <- rep(corman2$GPP, nrow(grid))
grid.new$TN_load <- rep(corman2$TN_load, nrow(grid))
grid.new$TP_load <- rep(corman2$TP_load, nrow(grid))
grid.new$SA <- rep(corman2$SA, nrow(grid))
grid.new$DOC_mgL <- rep(corman2$DOC_mgL, nrow(grid))
grid.new$z_m <- rep(corman2$z_m, nrow(grid))
# droop grid
grid.droop <- expand.grid(
KP1 = seq(1, 20, 1),
KN1 = seq(10, 50, 5),
minQN1 = seq(0.1, 1, 0.1),
minQP1 = seq(0.1, 1, 0.1),
upP1 = c(0.1, 0.4, 0.8),
upN1 = seq(0.05, 1, 1.5)
)
# repeat grid nrow(corman2) times
grid.droop.new <- grid.droop %>%
slice(rep(1:n(), each = nrow(corman2)))
# add in corman2 data
grid.droop.new$Lake <- rep(corman2$Lake, nrow(grid.droop))
grid.droop.new$GPP <- rep(corman2$GPP, nrow(grid.droop))
grid.droop.new$TN_load <- rep(corman2$TN_load, nrow(grid.droop))
grid.droop.new$TP_load <- rep(corman2$TP_load, nrow(grid.droop))
grid.droop.new$SA <- rep(corman2$SA, nrow(grid))
grid.droop.new$DOC_mgL <- rep(corman2$DOC_mgL, nrow(grid.droop))
grid.droop.new$z_m <- rep(corman2$z_m, nrow(grid.droop))
### averages
## michaelis-menten model for mean phytoplankton traits
params.mich <- c(
# lake parameters
SA= NA,		# lake surface area in km2
#zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
DOC = NA,
z = NA,
#light parameters
I0 = 400, # incident light
kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
# algae physiology parameters
umax1 = 0.665,
lA=0.1,			# mortality rate day-1
v=0.1,			# m d-1; sinking loss of algae
KLight = 166.53, # light half sat constant
KP1 = NA, # phosphorus half sat constant in mg P m^-3 f
QP1 = NA, # algae cell P quota in mg P mg^-1 C^-1
KN1 = NA, # nitrogen half sat constant in mg N m^-3
QN1 = NA # algae cell N quota in mg N mg^-1 C^-1
)
names(params.mich) <- c("SA", "Pin", "Nin", "I0",
"kBg", "kA", "umax1", "lA", "v",
"KLight", "KP1",  "QP1", "KN1",  "QN1")
names(params.mich)
params.mich <- unlist(params.mich)
## droop model for mean phytoplankton traits
params.droop <- c(
# lake parameters
SA= NA,		# lake surface area in km2
#zmix = 2, # lake mixing depth in m
Pin = NA, # P inflow concentration in mg P m^-3
Nin = NA, # N inflow concentration in mg N m^-3
DOC = NA,
z = NA,
# light parameters
I0 = 400, # surface light
kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
# algae physiology parameters
umax1 = 0.665,
lA=0.1,			# mortality rate day-1
v= 0.1,			# m d-1; sinking loss of algae
KLight = 155.53, # light half sat constant
KP1 = NA, # phosphorus half sat constant in mg P m^-3 f
minQP1 = NA, # algae cell P quota in mg P mg^-1 C^-1 f
upP1 = NA, # max uptake rate P per day in mg P mg C^-1 day^-1
KN1 = NA, # nitrogen half sat constant in mg N m^-3
minQN1 = NA, # algae cell N quota in mg N mg^-1 C^-1 f
upN1 = NA # max uptake rate N per day in mg N mg C^-1 day^-1
)
names(params.droop) <- c("SA", "Pin", "Nin", "I0", "kBg", "kA",
"umax1", "lA", "v", "KLight",
"KP1", "minQP1", "upP1", "KN1",
"minQN1", "upN1")
names(params.droop)
params.droop <- unlist(params.droop)
#takes over an hour to run!!
(start <- Sys.time())
mm.grid <- lapply(1:nrow(grid.new), function(i){
# indexing
params.mich["SA"] = grid.new[i, "SA"]
params.mich["DOC"] = grid.new[i, "DOC_mgL"]
params.mich["z"] = grid.new[i, "z_m"]
params.mich["KP1"] = grid.new[i, "KP1"]
params.mich["KN1"] = grid.new[i, "KN1"]
params.mich["QP1"] = grid.new[i, "minQP1"]
params.mich["QN1"] = grid.new[i, "minQN1"]
params.mich["Pin"] = grid.new[i, "TP_load"]
params.mich["Nin"] = grid.new[i, "TN_load"]
# starting values
y <- c("A1" = 100, "P" = grid.new[i, "TP_load"], "N" = grid.new[i, "TN_load"])
run <- ode(y, times, parms = params.mich, func = mich.single)
return(run[max(times),])
})
# convert to df
mm.grid <- do.call(rbind, mm.grid)
