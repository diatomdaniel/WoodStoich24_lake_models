group_by(minQP1, minQN1, umax1) %>%
summarise(MAE = mean(abs(GPP - est_GPP)), # lower is better
RMSE =  sqrt((mean(GPP - est_GPP)^2)), # lower is better
NSE = 1 - sum((GPP - est_GPP)^2) / sum((GPP - mean(GPP))^2)  # closer to one is better; below 0 is not good
) %>%
mutate(NSE = 1/(2 - NSE)) # normalize NSE to 0 to 1
View(dynamic.grid.search2.metrics)
# calculate error metrics to find the "best" model runs
static.grid.search2.metrics <- static.grid.search2 %>%
group_by(minQP1, minQN1, umax1) %>%
summarise(MAE = mean(abs(GPP - est_GPP)), # lower is better
RMSE =  sqrt((mean(GPP - est_GPP)^2)), # lower is better
NSE = 1 - sum((GPP - est_GPP)^2) / sum((GPP - mean(GPP))^2)  # closer to one is better; below 0 is not good
)  %>%
mutate(NSE = 1/(2 - NSE)) # normalize NSE to 0 to 1
# add ID
static.grid.search2.metrics$model <- "static"
dynamic.grid.search2.metrics$model <- "dynamic"
# add ID
static.grid.search2.metrics$model <- "static"
dynamic.grid.search2.metrics$model <- "dynamic"
# merge
grid.optim <- bind_rows(static.grid.search2.metric, dynamic.grid.search2.metrics)
# merge
grid.optim <- bind_rows(static.grid.search2.metrics, dynamic.grid.search2.metrics)
save("corman_grid_optim.Rdata", grid.optim)
save(grid.optim, "corman_grid_optim.Rdata")
saveRDS(grid.optim, "corman_grid_optim")
saveRDS(grid.optim, "corman_grid_optim.RDS")
corman_grid_optim <- readRDS("C:/Users/DanielGschwentner/Documents/GitHub/WoodStoich24_lake_models/corman_grid_optim.RDS")
corman_grid_optim %>%
gather("Metric", "Value", -minQP1, -minQN1, -umax1, -model) %>%
ggplot(aes(Metric, Value, fill = model)) +
geom_violin()
# model fit and parameterization
corman_grid_optim %>%
gather("Metric", "Value", -minQP1, -minQN1, -umax1, -model) %>%
gather("Trait", "Trait.Value", -Metric, -Value, -model) %>%
ggplot(aes(Trait.Value, Value, col = Metric)) +
facet_wrap(Trait ~ model)
corman_grid_optim %>%
gather("Metric", "Value", -minQP1, -minQN1, -umax1, -model) %>%
gather("Trait", "Trait.Value", -Metric, -Value, -model)
# model fit and parameterization
corman_grid_optim %>%
gather("Metric", "Value", -minQP1, -minQN1, -umax1, -model) %>%
gather("Trait", "Trait.Value", -Metric, -Value, -model) %>%
ggplot(aes(Trait.Value, Value, col = Metric)) +
geom_point() +
facet_wrap(Trait ~ model)
# model fit and parameterization
corman_grid_optim %>%
gather("Metric", "Value", -minQP1, -minQN1, -umax1, -model) %>%
gather("Trait", "Trait.Value", -Metric, -Value, -model) %>%
ggplot(aes(Trait.Value, Value, col = model)) +
geom_point() +
facet_grid(Trait ~ Metric)
# model fit and parameterization
corman_grid_optim %>%
gather("Metric", "Value", -minQP1, -minQN1, -umax1, -model) %>%
gather("Trait", "Trait.Value", -Metric, -Value, -model) %>%
ggplot(aes(Trait.Value, Value, col = model)) +
geom_point() +
ggh4x::facet_grid2(Trait ~ Metric, scales = "free")
# model fit and parameterization
corman_grid_optim %>%
gather("Metric", "Value", -minQP1, -minQN1, -umax1, -model) %>%
gather("Trait", "Trait.Value", -Metric, -Value, -model) %>%
ggplot(aes(Trait.Value, Value, col = model)) +
geom_point() +
ggh4x::facet_grid2(Trait ~ Metric, scales = "free", independent = "all")
# add ID
static.grid.search2.metrics$model <- "static"
dynamic.grid.search2.metrics$model <- "dynamic"
# merge
grid.optim <- bind_rows(static.grid.search2.metrics, dynamic.grid.search2.metrics)
grid.optim$model <- factor(grid.optim$model, levels = c("static", "dynamic"))
saveRDS(grid.optim, "corman_grid_optim.RDS")
load("corman_grid_optim.RDS")
# general overview
corman_grid_optim %>%
gather("Metric", "Value", -minQP1, -minQN1, -umax1, -model) %>%
ggplot(aes(Metric, Value, fill = model)) +
geom_violin()
# model fit and parameterization
corman_grid_optim %>%
gather("Metric", "Value", -minQP1, -minQN1, -umax1, -model) %>%
gather("Trait", "Trait.Value", -Metric, -Value, -model) %>%
ggplot(aes(Trait.Value, Value, col = model)) +
geom_point() +
ggh4x::facet_grid2(Trait ~ Metric, scales = "free", independent = "all")
# add ID
static.grid.search2.metrics$model <- "static"
dynamic.grid.search2.metrics$model <- "dynamic"
# merge
grid.optim <- bind_rows(static.grid.search2.metrics, dynamic.grid.search2.metrics)
grid.optim$model <- factor(grid.optim$model, levels = c("static", "dynamic"))
save(grid.optim, "corman_grid_optim.Rdata")
save(list = grid.optim, file = "corman_grid_optim.Rdata")
grid.optim
save(grid.optim, file = "corman_grid_optim.Rdata")
load("corman_grid_optim.Rdata")
# general overview
corman_grid_optim %>%
gather("Metric", "Value", -minQP1, -minQN1, -umax1, -model) %>%
ggplot(aes(Metric, Value, fill = model)) +
geom_violin()
# model fit and parameterization
corman_grid_optim %>%
gather("Metric", "Value", -minQP1, -minQN1, -umax1, -model) %>%
gather("Trait", "Trait.Value", -Metric, -Value, -model) %>%
ggplot(aes(Trait.Value, Value, col = model)) +
geom_point() +
ggh4x::facet_grid2(Trait ~ Metric, scales = "free", independent = "all")
corman_grid_optim %>% split(.$model) %>% map(summary)
View(static.grid.search2.metrics)
# static model
best.static <- corman_grid_optim %>%
filter(model == "static") %>%
filter(min(MAE) & min(RMSE) & max(NSE))
View(best.static)
# static model
best.static <- corman_grid_optim %>%
filter(model == "static") %>%
filter(min(MAE))
# static model
best.static <- corman_grid_optim %>%
filter(model == "static") %>%
filter(min(MAE))
# static model
best.static <- corman_grid_optim %>%
filter(model == "static") %>%
filter(which.min(MAE))
corman_grid_optim %>%
filter(model == "static")
# static model
best.static <- corman_grid_optim %>%
filter(model == "static") %>%
filter(MAE = min(MAE))
# static model
best.static <- corman_grid_optim %>%
filter(model == "static") %>%
filter(MAE == min(MAE))
filter(MAE == min(MAE) & RMSE == min(RMSE) & NSE == max(NSE)
filter(model == "static") %>%
# static model
best.static <- corman_grid_optim %>%
filter(model == "static") %>%
filter(MAE == min(MAE) & RMSE == min(RMSE) & NSE == max(NSE))
View(best.static)
# dynamic model
best.dynamic <- corman_grid_optim %>%
filter(model != "static") %>%
filter(MAE == min(MAE) & RMSE == min(RMSE) & NSE == max(NSE))
View(best.dynamic)
test.run <- best.static[1,]
test.run
best.static <- static.algae
best.static
test.run
test.run <- best.static[1,]
test.run <- best.static[1,]
# static model
# 400 out of 1,200 runs fit this criterion, --> lots of equifinality
best.static <- corman_grid_optim %>%
filter(model == "static") %>%
filter(MAE == min(MAE) & RMSE == min(RMSE) & NSE == max(NSE))
# dynamic model
# 400 out of 1,200 runs fit this criterion, --> lots of equifinality
best.dynamic <- corman_grid_optim %>%
filter(model != "static") %>%
filter(MAE == min(MAE) & RMSE == min(RMSE) & NSE == max(NSE))
test.run <- best.static[1,]
test.run
best.static <- static.algae
best.static$miNQP1 <- 0.01
best.static$miNQN1 <- 0.01
best.static$umax1 <- 0.8
corman.static <-  lapply(1:nrow(in.grid), function(i) {
best.static["Pin"] = in.grid[i, "TP_in"]
best.static["Nin"] = in.grid[i, "TN_in"]
best.static["DOC"] = in.grid[i, "DOC_mgL"]
best.static["z"] = in.grid[i, "z"]
best.static["SA"] = best.static[i, "SA"]
y <- c("A1" = 100, "P" =in.grid[i, "TP_in"], "N" = in.grid[i, "TN_in"])
run <- ode(y, times, parms = best.static, func = static.stoich.zmix)
return(run[max(times),])
})
best.static
corman.static <-  lapply(1:nrow(in.grid), function(i) {
best.static["Pin"] = in.grid[i, "TP_in"]
best.static["Nin"] = in.grid[i, "TN_in"]
best.static["DOC"] = in.grid[i, "DOC_mgL"]
best.static["z"] = in.grid[i, "z"]
best.static["SA"] = in.grid[i, "SA"]
y <- c("A1" = 100, "P" =in.grid[i, "TP_in"], "N" = in.grid[i, "TN_in"])
run <- ode(y, times, parms = best.static, func = static.stoich.zmix)
return(run[max(times),])
})
best.static["DOC"]
in.grid
1 = 1
i = 1
in.grid[i, "TP_in"]
best.static["Pin"] = in.grid[i, "TP_in"]
best.static["Nin"] = in.grid[i, "TN_in"]
best.static["DOC"] = in.grid[i, "DOC_mgL"]
best.static
best.static["z"] = in.grid[i, "z"]
best.static["SA"] = in.grid[i, "SA"]
y <- c("A1" = 100, "P" =in.grid[i, "TP_in"], "N" = in.grid[i, "TN_in"])
run <- ode(y, times, parms = best.static, func = static.stoich.zmix)
best.static["SA"] = in.grid[i, "SA"]
y <- c("A1" = 100, "P" =in.grid[i, "TP_in"], "N" = in.grid[i, "TN_in"])
run <- ode(y, times, parms = best.static, func = static.stoich.zmix)
best.static
# static model
# 400 out of 1,200 runs fit this criterion, --> lots of equifinality
best.static <- corman_grid_optim %>%
filter(model == "static") %>%
filter(MAE == min(MAE) & RMSE == min(RMSE) & NSE == max(NSE))
# dynamic model
# 400 out of 1,200 runs fit this criterion, --> lots of equifinality
best.dynamic <- corman_grid_optim %>%
filter(model != "static") %>%
filter(MAE == min(MAE) & RMSE == min(RMSE) & NSE == max(NSE))
test.run <- best.static[1,]
test.run
best.static <- static.algae
best.static$miNQP1 <- 0.01
best.static$miNQN1 <- 0.01
best.static$umax1 <- 0.8
best.static
test.run <- best.static[1,]
test.run
# static model
# 400 out of 1,200 runs fit this criterion, --> lots of equifinality
best.static <- corman_grid_optim %>%
filter(model == "static") %>%
filter(MAE == min(MAE) & RMSE == min(RMSE) & NSE == max(NSE))
# dynamic model
# 400 out of 1,200 runs fit this criterion, --> lots of equifinality
best.dynamic <- corman_grid_optim %>%
filter(model != "static") %>%
filter(MAE == min(MAE) & RMSE == min(RMSE) & NSE == max(NSE))
test.run <- best.static[1,]
test.run
best.static <- static.algae
best.static["miNQP1"] <- 0.01
best.static["miNQN1"] <- 0.01
best.static["umax1"] <- 0.8
best.static
x <-  lapply(1:nrow(in.grid), function(i) {
best.static["Pin"] = in.grid[i, "TP_in"]
best.static["Nin"] = in.grid[i, "TN_in"]
best.static["DOC"] = in.grid[i, "DOC_mgL"]
best.static["z"] = in.grid[i, "z"]
best.static["SA"] = in.grid[i, "SA"]
y <- c("A1" = 100, "P" =in.grid[i, "TP_in"], "N" = in.grid[i, "TN_in"])
run <- ode(y, times, parms = best.static, func = static.stoich.zmix)
return(run[max(times),])
})
x
x <- do.call(rbind, x)
x <- as_data_frame(x)
in.grid$best.GPP <- x$GPP
in.grid %>% ggplot(aes(GPP, best.GPP)) + geom_point()
in.grid %>% ggplot(aes(log10(GPP), log10(best.GPP))) + geom_point()
summary(lm(log10(best.GPP) ~ log10(GPP), data = in.grid))
# static model
# 400 out of 1,200 runs fit this criterion, --> lots of equifinality
best.static <- corman_grid_optim %>%
filter(model == "static") %>%
filter(MAE == min(MAE) & RMSE == min(RMSE) & NSE == max(NSE))
# dynamic model
# 400 out of 1,200 runs fit this criterion, --> lots of equifinality
best.dynamic <- corman_grid_optim %>%
filter(model != "static") %>%
filter(MAE == min(MAE) & RMSE == min(RMSE) & NSE == max(NSE))
View(best.static)
# static
best.static.run <- static.algae
best.static.run["miNQP1"] <- 0.01
best.static.run["miNQN1"] <- 0.01
best.static.run["umax1"] <- 0.8
best.static.run <-  lapply(1:nrow(in.grid), function(i) {
best.static["Pin"] = in.grid[i, "TP_in"]
best.static["Nin"] = in.grid[i, "TN_in"]
best.static["DOC"] = in.grid[i, "DOC_mgL"]
best.static["z"] = in.grid[i, "z"]
best.static["SA"] = in.grid[i, "SA"]
y <- c("A1" = 100, "P" =in.grid[i, "TP_in"], "N" = in.grid[i, "TN_in"])
run <- ode(y, times, parms = best.static.run, func = static.stoich.zmix)
return(run[max(times),])
})
# static
best.static.run <- static.algae
best.static.run["miNQP1"] <- 0.01
best.static.run["miNQN1"] <- 0.01
best.static.run["umax1"] <- 0.8
best.static.run <-  lapply(1:nrow(in.grid), function(i) {
best.static.run["Pin"] = in.grid[i, "TP_in"]
best.static.run["Nin"] = in.grid[i, "TN_in"]
best.static.run["DOC"] = in.grid[i, "DOC_mgL"]
best.static.run["z"] = in.grid[i, "z"]
best.static.run["SA"] = in.grid[i, "SA"]
y <- c("A1" = 100, "P" =in.grid[i, "TP_in"], "N" = in.grid[i, "TN_in"])
run <- ode(y, times, parms = best.static.run, func = static.stoich.zmix)
return(run[max(times),])
})
best.static.run <- do.call(rbind, best.static.run)
best.static.run <- as_data_frame(best.static.run)
# combine with initial input data for plotting
best.static.run$obs.GPP <- in.grid$GPP
best.static.run$Lake <- in.grid$Lake
best.static.run$est.GPP <- best.static.run$GPP
# calculate Rsq value
best.static.run %>%
mutate(
log10GPP = ifelse(is.inf(log10(obs.GPP)), NA, log10(obs.GPP)),
log10estGPP = ifelse(is.inf(log10(est.GPP)), NA, log10(est.GPP))
) %>%
lm(log10estGPP ~ log10GPP, data = .) %>%
summary()
best.static.run %>%
mutate(
log10GPP = ifelse(is.inf(log10(obs.GPP)), NA, log10(obs.GPP)),
log10estGPP = ifelse(is.inf(log10(est.GPP)), NA, log10(est.GPP))
)
# calculate Rsq value
best.static.run %>%
mutate(
log10GPP = ifelse(is.infinite(log10(obs.GPP)), NA, log10(obs.GPP)),
log10estGPP = ifelse(is.infinite(log10(est.GPP)), NA, log10(est.GPP))
) %>%
lm(log10estGPP ~ log10GPP, data = .) %>%
summary()
# static
best.static.run <- static.algae
best.static.run["miNQP1"] <- 0.01
best.static.run["miNQN1"] <- 0.01
best.static.run["umax1"] <- 0.8
best.static.run <-  lapply(1:nrow(in.grid), function(i) {
best.static.run["Pin"] = in.grid[i, "TP_in"]
best.static.run["Nin"] = in.grid[i, "TN_in"]
best.static.run["DOC"] = in.grid[i, "DOC_mgL"]
best.static.run["z"] = in.grid[i, "z"]
best.static.run["SA"] = in.grid[i, "SA"]
y <- c("A1" = 100, "P" =in.grid[i, "TP_in"], "N" = in.grid[i, "TN_in"])
run <- ode(y, times, parms = best.static.run, func = static.stoich.zmix)
return(run[max(times),])
})
best.static.run <- do.call(rbind, best.static.run)
best.static.run <- as_data_frame(best.static.run)
# combine with initial input data for plotting
best.static.run$obs.GPP <- in.grid$GPP
best.static.run$Lake <- in.grid$Lake
best.static.run$est.GPP <- best.static.run$GPP
# calculate Rsq value
best.static.run %>%
mutate(
log10GPP = ifelse(is.infinite(log10(obs.GPP)), NA, log10(obs.GPP)),
log10estGPP = ifelse(is.infinite(log10(est.GPP)), NA, log10(est.GPP))
) %>%
lm(log10estGPP ~ log10GPP, data = .) %>%
summary()
# dynamic
best.dynamic.run <- dynamic.algae
best.dynamic.run["miNQP1"] <- 0.01
best.dynamic.run["miNQN1"] <- 0.01
best.dynamic.run["umax1"] <- 0.8
best.dynamic.run <-  lapply(1:nrow(in.grid), function(i) {
best.dynamic.run["Pin"] = in.grid[i, "TP_in"]
best.dynamic.run["Nin"] = in.grid[i, "TN_in"]
best.dynamic.run["DOC"] = in.grid[i, "DOC_mgL"]
best.dynamic.run["z"] = in.grid[i, "z"]
best.dynamic.run["SA"] = in.grid[i, "SA"]
y <- c("A1" = 100, "P" =in.grid[i, "TP_in"], "N" = in.grid[i, "TN_in"], "QP1" = 0.015, "QN1" = 0.1))
# dynamic
best.dynamic.run <- dynamic.algae
best.dynamic.run["miNQP1"] <- 0.01
best.dynamic.run["miNQN1"] <- 0.01
best.dynamic.run["umax1"] <- 0.8
best.dynamic.run <-  lapply(1:nrow(in.grid), function(i) {
best.dynamic.run["Pin"] = in.grid[i, "TP_in"]
best.dynamic.run["Nin"] = in.grid[i, "TN_in"]
best.dynamic.run["DOC"] = in.grid[i, "DOC_mgL"]
best.dynamic.run["z"] = in.grid[i, "z"]
best.dynamic.run["SA"] = in.grid[i, "SA"]
y <- c("A1" = 100, "P" =in.grid[i, "TP_in"], "N" = in.grid[i, "TN_in"], "QP1" = 0.015, "QN1" = 0.1)
run <- ode(y, times, parms = best.dynamic.run, func = dynamic.stoich.zmix)
return(run[max(times),])
})
best.dynamic.run <- do.call(rbind, best.dynamic.run)
best.dynamic.run <- as_data_frame(best.dynamic.run)
# combine with initial input data for plotting
best.dynamic.run$obs.GPP <- in.grid$GPP
best.dynamic.run$Lake <- in.grid$Lake
best.dynamic.run$est.GPP <- best.dynamic.run$GPP
# calculate Rsq value
best.dynamic.run %>%
mutate(
log10GPP = ifelse(is.infinite(log10(obs.GPP)), NA, log10(obs.GPP)),
log10estGPP = ifelse(is.infinite(log10(est.GPP)), NA, log10(est.GPP))
) %>%
lm(log10estGPP ~ log10GPP, data = .) %>%
summary()
(best.run.plt <- bind_rows(
best.static.run, best.dynamic.run
) %>%
mutate(model = rep(c("static", "dynamic"), each = nrow(best.static.run)),
model = factor(model, levels = c("static", "dynamic"))) %>%
ggplot(aes(log10(obs.GPP), log10(est.GPP), pch = Lake)) +
geom_point() +
geom_smooth(method = "lm") +
facet_grid(model~.))
(best.run.plt <- bind_rows(
best.static.run, best.dynamic.run
) %>%
mutate(model = rep(c("static", "dynamic"), each = nrow(best.static.run)),
model = factor(model, levels = c("static", "dynamic"))) %>%
ggplot(aes(log10(obs.GPP), log10(est.GPP), pch = Lake)) +
geom_point() +
geom_smooth(inherit.aes = F, aes(x = log10(obs.GPP), y = log10(est.GPP)), method = "lm") +
facet_grid(model~.))
(best.run.plt <- bind_rows(
best.static.run, best.dynamic.run
) %>%
mutate(model = rep(c("static", "dynamic"), each = nrow(best.static.run)),
model = factor(model, levels = c("static", "dynamic"))) %>%
ggplot(aes(log10(obs.GPP), log10(est.GPP), pch = Lake)) +
geom_point() +
geom_smooth(inherit.aes = F, aes(x = log10(obs.GPP), y = log10(est.GPP)), method = "lm") +
facet_wrap(model~.))
(best.run.plt <- bind_rows(
best.static.run, best.dynamic.run
) %>%
mutate(model = rep(c("static", "dynamic"), each = nrow(best.static.run)),
model = factor(model, levels = c("static", "dynamic"))) %>%
ggplot(aes(log10(obs.GPP), log10(est.GPP), pch = Lake)) +
geom_point() +
geom_smooth(inherit.aes = F, aes(x = log10(obs.GPP), y = log10(est.GPP)), method = "lm") +
facet_wrap(model~.), scales = "free_y")
(best.run.plt <- bind_rows(
best.static.run, best.dynamic.run
) %>%
mutate(model = rep(c("static", "dynamic"), each = nrow(best.static.run)),
model = factor(model, levels = c("static", "dynamic"))) %>%
ggplot(aes(log10(obs.GPP), log10(est.GPP), pch = Lake)) +
geom_point() +
geom_smooth(inherit.aes = F, aes(x = log10(obs.GPP), y = log10(est.GPP)), method = "lm") +
facet_wrap(model~., scales = "free_y"))
(best.run.plt <- bind_rows(
best.static.run, best.dynamic.run
) %>%
mutate(model = rep(c("static", "dynamic"), each = nrow(best.static.run)),
model = factor(model, levels = c("static", "dynamic"))) %>%
ggplot(aes(log10(obs.GPP), log10(est.GPP), pch = Lake)) +
geom_point() +
geom_smooth(inherit.aes = F, aes(x = log10(obs.GPP), y = log10(est.GPP)), method = "lm") +
facet_wrap(model~., scales = "free_y")) +
labs(x = expression("log"[10] ~ "(GPP mg C L"^-1 ~ "day"^-1 ~ ")"),
y = expression("log"[10] ~ "(modelled GPP mg C L"^-1 ~ "day"^-1 ~ ")"),
shape = NULL) +
scale_shape_manual(
values = c(
"Acton" = 0,
"EastLong" = 1,
"Feeagh" = 2,
"Harp" = 3,
"Langtjern" = 4,
"Lillinoah" = 5,
"Lillsjoliden" = 6,
"Mangstrettjarn" = 7,
"Mendota" = 8,
"Morris" = 9,
"Struptjarn" = 10,
"Trout" = 11,
"Vortsjarv" = 12
)
) +
theme(legend.position = "right"))
(best.run.plt <- bind_rows(
best.static.run, best.dynamic.run
) %>%
mutate(model = rep(c("static", "dynamic"), each = nrow(best.static.run)),
model = factor(model, levels = c("static", "dynamic"))) %>%
ggplot(aes(log10(obs.GPP), log10(est.GPP), pch = Lake)) +
geom_point() +
geom_smooth(inherit.aes = F, aes(x = log10(obs.GPP), y = log10(est.GPP)), method = "lm") +
facet_wrap(model~., scales = "free_y") +
labs(x = expression("log"[10] ~ "(GPP mg C L"^-1 ~ "day"^-1 ~ ")"),
y = expression("log"[10] ~ "(modelled GPP mg C L"^-1 ~ "day"^-1 ~ ")"),
shape = NULL) +
scale_shape_manual(
values = c(
"Acton" = 0,
"EastLong" = 1,
"Feeagh" = 2,
"Harp" = 3,
"Langtjern" = 4,
"Lillinoah" = 5,
"Lillsjoliden" = 6,
"Mangstrettjarn" = 7,
"Mendota" = 8,
"Morris" = 9,
"Struptjarn" = 10,
"Trout" = 11,
"Vortsjarv" = 12
)
) +
theme(legend.position = "right"))
