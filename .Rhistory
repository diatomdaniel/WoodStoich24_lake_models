greens.traits.mass.units <- greens.traits.mass.units %>%
mutate(Qmax_mg_N_mg_C = qmax_nit * 14.007/median.C.greens/1000,
Qmax_mg_P_mg_C = qmax_p * 30.974/median.C.greens/1000,
Qmin_mg_N_mg_C = qmin_nit * 14.007/median.C.greens/1000,
Qmin_mg_P_mg_C = qmin_p * 30.974/median.C.greens/1000,
Vmax_mg_N_mg_C = vmax_nit* 14.007/median.C.greens/1000,
Vmax_mg_P_mg_C = vmax_p * 30.974/median.C.greens/1000,
umax_N = mu_nit,
umax_P = mu_p)
# save for later
greens.traits.mass.units2 <- greens.traits.mass.units
# summary
(greens.traits.mass <- greens.traits.mass.units %>%
select(K_P_mgL, K_N_mgL, Qmax_mg_N_mg_C, Qmax_mg_P_mg_C, Qmin_mg_N_mg_C, Qmin_mg_P_mg_C, Vmax_mg_N_mg_C, Vmax_mg_P_mg_C, umax_N, umax_P) %>%
gather("Trait", "trait.value") %>%
drop_na() %>%
group_by(Trait) %>%
summarise(
Mean = mean(trait.value, na.rm = T),
Median = median(trait.value, na.rm = T),
Min = min(trait.value, na.rm = T),
Max = max(trait.value, na.rm = T),
sd = sd(trait.value, na.rm = T),
std.err = sd(trait.value, na.rm = T)/sqrt(n()),
q25 = quantile(trait.value, 0.25, na.rm = T),
q75 = quantile(trait.value, 0.75, na.rm = T),
n = n()
) %>% mutate(taxon = "greens")) %>%
knitr::kable()
cyanos <- selected.traits[selected.traits$taxon == "cyano" & selected.traits$system == "freshwater",]
#summary(cyanos)
(cyanos.traits <- cyanos %>%
select(-species, -taxon, -system) %>%
gather("Trait", "trait.value") %>%
drop_na() %>%
group_by(Trait) %>%
summarise(
Mean = mean(trait.value, na.rm = T),
Median = median(trait.value, na.rm = T),
Min = min(trait.value, na.rm = T),
Max = max(trait.value, na.rm = T),
sd = sd(trait.value, na.rm = T),
std.err = sd(trait.value, na.rm = T)/sqrt(n()),
q25 = quantile(trait.value, 0.25, na.rm = T),
q75 = quantile(trait.value, 0.75, na.rm = T),
n = n()
)) %>%
knitr::kable()
# DIY conversions
cyanos.traits.mass.units <- cyanos %>%
mutate(cell_C_mg = c_per_cell * 12.011/1000,
K_P_mgL = k_p * 30.974/1000,
K_N_mgL = k_nit*14.007/1000)
# for Vmax, Qmax use the median C content for conversion
### for diatoms, this will be median of marine C content!
median.C.cyanos <- median(cyanos.traits.mass.units$cell_C_mg, na.rm = T)
median.C.cyanos
# conversions pt 2
cyanos.traits.mass.units <- cyanos.traits.mass.units %>%
mutate(Qmax_mg_N_mg_C = qmax_nit * 14.007/median.C.greens/1000,
Qmax_mg_P_mg_C = qmax_p * 30.974/median.C.greens/1000,
Qmin_mg_N_mg_C = qmin_nit * 14.007/median.C.greens/1000,
Qmin_mg_P_mg_C = qmin_p * 30.974/median.C.greens/1000,
Vmax_mg_N_mg_C = vmax_nit* 14.007/median.C.greens/1000,
Vmax_mg_P_mg_C = vmax_p * 30.974/median.C.greens/1000,
umax_N = mu_nit,
umax_P = mu_p)
# save for later
cyanos.traits.mass.units2 <- cyanos.traits.mass.units
# summary
(cyanos.traits.mass <- cyanos.traits.mass.units %>%
select(K_P_mgL, K_N_mgL, Qmax_mg_N_mg_C, Qmax_mg_P_mg_C, Qmin_mg_N_mg_C, Qmin_mg_P_mg_C, Vmax_mg_N_mg_C, Vmax_mg_P_mg_C, umax_N, umax_P) %>%
gather("Trait", "trait.value") %>%
drop_na() %>%
group_by(Trait) %>%
summarise(
Mean = mean(trait.value, na.rm = T),
Median = median(trait.value, na.rm = T),
Min = min(trait.value, na.rm = T),
Max = max(trait.value, na.rm = T),
sd = sd(trait.value, na.rm = T),
std.err = sd(trait.value, na.rm = T)/sqrt(n()),
q25 = quantile(trait.value, 0.25, na.rm = T),
q75 = quantile(trait.value, 0.75, na.rm = T),
n = n()
) %>% mutate(taxon = "cyanos")) %>%
knitr::kable()
traits.mass <- do.call(rbind, list(diatoms.traits.mass, greens.traits.mass, cyanos.traits.mass))
head(traits.mass)
(growth.light.summary <- light.umax %>%
select(Taxon, K_light = Iopt, umax) %>%
filter(Taxon %in% c("diatoms", "greens", "cyano")) %>%
gather("Trait", "trait.value", -Taxon) %>%
drop_na() %>%
group_by(Taxon, Trait) %>%
summarise(
Mean = mean(trait.value, na.rm = T),
Median = median(trait.value, na.rm = T),
Min = min(trait.value, na.rm = T),
Max = max(trait.value, na.rm = T),
sd = sd(trait.value, na.rm = T),
std.err = sd(trait.value, na.rm = T)/sqrt(n()),
q25 = quantile(trait.value, 0.25, na.rm = T),
q75 = quantile(trait.value, 0.75, na.rm = T),
n = n()
) %>% mutate(Taxon = ifelse(Taxon == "cyano", "cyanos", Taxon)) %>%
rename(taxon = Taxon)) %>%
knitr::kable()
traits.mass <- rbind(traits.mass, growth.light.summary)
(traits.fig <- traits.mass %>%
ggplot(aes(taxon, Median)) +
geom_point() +
# geom_errorbar(aes(ymin = Median - 1.96 * std.err,
#                   ymax = Median + 1.96 * std.err)) +
geom_errorbar(aes(ymin = q25,
ymax = q75)) +
facet_wrap(Trait~.,scales = "free"))
#save_plot("figures/summary_fig_traits.jpg", traits.fig, base_height = 8, base_width = 12)
# bind together
freshwater.traits <- bind_rows(diatoms.traits.mass.units2, greens.traits.mass.units2, cyanos.traits.mass.units2)
# add max growth rate
umaxes <- light.umax %>%
select(umax, Taxon, Species) %>%
mutate(taxon = ifelse(Taxon == "greens", "green",
ifelse(Taxon == "diatoms", "diatom", Taxon)),
species = Species) %>%
filter(taxon %in% c("diatom", "green", "cyano")) %>%
select(species, taxon, umax)
# bind with original df
freshwater.traits <- bind_rows(freshwater.traits, umaxes)
# select traits of interest
freshwater.traits <- freshwater.traits %>%
select(taxon, species, system, c_per_cell, K_P_mgL, K_N_mgL,
Qmin_mg_P_mg_C, Qmin_mg_N_mg_C,
Vmax_mg_N_mg_C, Vmax_mg_P_mg_C, umax)
# wide to long
freshwater.traits.long <- freshwater.traits %>%
gather("Trait", "Trait.Value", -species, -taxon, -system)
# get summary for n()
freshwater.traits.summary <- freshwater.traits.long %>%
select(-system) %>%
group_by(taxon, Trait) %>%
drop_na() %>%
summarise(n = n(),
Median.Trait.Value = median(Trait.Value, na.rm =T))
# merge n() back into original df
freshwater.traits.long <- merge(freshwater.traits.long, freshwater.traits.summary, by = c("taxon", "Trait"))
# plot
freshwater.traits.long %>%
ggplot() + geom_violin(aes(taxon, log10(Trait.Value))) +
geom_point(aes(taxon, log10(Median.Trait.Value))) + facet_wrap(Trait~.,scales = "free_y")
# save file
#write.csv(freshwater.traits.long, "data4input/overview_freshwater_traits.csv")
View(freshwater.traits.summary)
xxx <- freshwater.traits.long %>%
select(-system) %>%
group_by(Trait) %>%
drop_na() %>%
summarise(n = n(),
Median.Trait.Value = median(Trait.Value, na.rm =T))
View(xxx)
knitr::opts_chunk$set(echo = TRUE)
# load packages
pck <- c("tidyverse", "cowplot", "ggthemes", "wesandersen", "ggpubr")
lapply(pck, require, character.only = T)
# set plotting theme
theme_set(theme_solarized(light=F) +
theme(text = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.title = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white"),
legend.justification = "center",
legend.position = "bottom"))
# data
fresh.traits <- read_csv("data4input/overview_freshwater_traits.csv")[,-1]
# fix names for consistency
# new trait names
new.traits <- tibble(
Trait= c("c_per_cell", "K_P_mgL", "K_N_mgL", "Qmin_mg_P_mg_C", "Qmin_mg_N_mg_C",
"Vmax_mg_P_mg_C", "Vmax_mg_N_mg_C", "umax"),
Trait.new = c("Cell C", "KP", "KN", "minQP", "minQN", "VmaxP", "VmaxN", "umax")) %>%
mutate(
Trait.new = factor(Trait.new, levels = c("Cell C", "KP", "KN", "minQP", "minQN", "VmaxP", "VmaxN", "umax"))
)
# new group names
new.groups <- tibble(
taxon = c("diatom", "green", "cyano"),
taxon.new = factor(c("diatoms", "greens", "cyanos"), levels = c("diatoms", "greens", "cyanos"))
)
# merge back in
fresh.traits <- merge(fresh.traits, new.traits, by = "Trait")
fresh.traits <- merge(fresh.traits, new.groups, by = "taxon")
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = n), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, Inf, label = n), vjust = 1) +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_c() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = "n()") +
theme(legend.position = "right"))
# save figure
#save_plot("figures/freshwater_traits_overview.png", traits.fig, base_width = 10, base_height = 4)
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = n), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, Inf, label = n), vjust = 2) +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_c() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = "n()") +
theme(legend.position = "right"))
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = n), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, Inf, label = n), vjust = -2) +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_c() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = "n()") +
theme(legend.position = "right"))
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = n), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, Inf, label = n), vjust = 1) +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_c() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = "n()") +
theme(legend.position = "right"))
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = n), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, Inf, label = n), vjust = 0.11) +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_c() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = "n()") +
theme(legend.position = "right"))
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = n), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, Inf, label = n), vjust = 2) +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_c() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = "n()") +
theme(legend.position = "right"))
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = n), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, Inf, label = n), vjust = 1) +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_c() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = "n()") +
theme(legend.position = "right"))
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = n), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, Inf, label = n)) +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_c() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = "n()") +
theme(legend.position = "right"))
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = n), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, Inf, label = n), vjust = -1) +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_c() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = "n()") +
theme(legend.position = "right"))
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = n), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, Inf, label = n), vjust = 1, col = "white") +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_c() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = "n()") +
theme(legend.position = "right"))
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = n), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, Inf, label = paste("n = ", n)), vjust = 1, col = "white") +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_c() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = "n()") +
theme(legend.position = "right"))
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = taxon.new), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, Inf, label = paste("n = ", n)), vjust = 1, col = "white") +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
#scale_fill_viridis_c() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = NULL) +
theme(legend.position = "none"))
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = taxon.new), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, Inf, label = paste("n = ", n)), vjust = 1, col = "white") +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_d() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = NULL) +
theme(legend.position = "none"))
# save figure
save_plot("figures/freshwater_traits_overview.png", traits.fig, base_width = 10, base_height = 4)
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = taxon.new), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, -Inf, label = paste("n = ", n)), vjust = 1, col = "white") +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_d() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = NULL) +
theme(legend.position = "none"))
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = taxon.new), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, -Inf, label = paste("n = ", n)),, col = "white") +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_d() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = NULL) +
theme(legend.position = "none"))
(traits.fig <- fresh.traits %>%
ggplot() +
geom_violin(aes(taxon.new, log10(Trait.Value), fill = taxon.new), color = "black") +
geom_point(aes(taxon.new, log10(Median.Trait.Value)), color = "black", size = 2) +
geom_text(aes(taxon.new, -Inf, label = paste("n = ", n)), vjust = -1, col = "white") +
facet_wrap(Trait.new~., scales = "free_y", nrow = 2, ncol = 4) +
scale_fill_viridis_d() +
labs(x = NULL, y = expression("log"[10] ~ "Value"), fill = NULL) +
theme(legend.position = "none"))
xxx <- fresh.traits %>% filter(Trait == "c_per_cell")
View(xxx)
xxx <- fresh.traits %>% filter(Trait == "c_per_cell") %>% drop_na()
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
load("GPP_and_sensitivity.Rdata")
# load packages
pck <- c("deSolve", "tidyverse", "cowplot", "ggthemes", "wesandersen", "ggpubr")
lapply(pck, require, character.only = T)
# set plotting theme
theme_set(theme_solarized(light=F) +
theme(text = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.title = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white"),
legend.justification = "center",
legend.position = "bottom"))
(plt.gpp <- gpp.combined %>%
ggplot(aes(Pin, Nin, fill = log10(GPP))) +
geom_raster() +
# Redfield
geom_abline(intercept =  0, slope = c(16*14.007/30.974),
lty = "dashed", col = "white", lwd = 1, alpha = 0.5) +
geom_abline(data = consump.vctr[consump.vctr$trait == "minQN:minQP",],
aes(slope = slope, intercept = intercept), lwd = 1) +
# Downing and McCauley
# geom_abline(intercept = 0, slope  = c(14, 30),
#             lty = "dashed", col = "black", lwd = 1, alpha = 0.5) +
labs(x = expression("Inflow P ug L"^-1),
y = expression("Inflow N ug L"^-1),
fill = expression("log"[10] ~ "GPP mg C L"^-1 ~ "day"^-1),
lty = NULL) +
facet_grid(model~species) +
scale_fill_viridis_c(breaks = c(-2, -1, 0, 0.5))
) + theme(legend.position = "right")
# create data frame with consumption vectors from traits
consump.vctr <- tibble(
model = rep(c("static", "dynamic"), each = 4),
species = rep(c("average", "diatoms", "greens", "cyanos"), 2),
"KN:KP" = rep(c(0.05/0.0165, 0.064/0.005, 0.036/0.028, 0.033/0.026), 2),
"minQN:minQP" = rep(c(0.09/0.0105, 0.155/0.02, 0.025/0.001, 0.01/0.001), 2),
"VmaxN:VmaxP" = c(rep(NA, 4), c(2.45/0.426, 4/49/0.608, 0.416/0.243, 0.034/1.113))
) %>%
gather("trait", "slope", -model, -species) %>%
mutate(trait = factor(trait, levels = c("KN:KP", "minQN:minQP", "VmaxN:VmaxP")),
model = factor(model, levels = c("static", "dynamic")),
species = factor(species, levels = c("average", "diatoms", "greens", "cyanos")),
intercept = 0)
(plt.gpp <- gpp.combined %>%
ggplot(aes(Pin, Nin, fill = log10(GPP))) +
geom_raster() +
# Redfield
geom_abline(intercept =  0, slope = c(16*14.007/30.974),
lty = "dashed", col = "white", lwd = 1, alpha = 0.5) +
geom_abline(data = consump.vctr[consump.vctr$trait == "minQN:minQP",],
aes(slope = slope, intercept = intercept), lwd = 1) +
# Downing and McCauley
# geom_abline(intercept = 0, slope  = c(14, 30),
#             lty = "dashed", col = "black", lwd = 1, alpha = 0.5) +
labs(x = expression("Inflow P ug L"^-1),
y = expression("Inflow N ug L"^-1),
fill = expression("log"[10] ~ "GPP mg C L"^-1 ~ "day"^-1),
lty = NULL) +
facet_grid(model~species) +
scale_fill_viridis_c(breaks = c(-2, -1, 0, 0.5))
) + theme(legend.position = "right")
#save_plot("figures/GPP_all_species.png", plt.gpp, base_height = 5, base_width = 10)
save_plot("figures/GPP_all_species.png", plt.gpp, base_height = 5, base_width = 10)
gpp.aov.dat <- gpp.combined %>% pivot_wider(id_cols = c(Pin, Nin),
names_from = model,
values_from = GPP)
View(gpp.combined)
View(gpp.aov.dat)
View(gpp.combined)
gpp.aov.dat <- gpp.combined %>% pivot_wider(id_cols = c(Pin, Nin),
names_from = model,
values_from = GPP,
summary_fn = mean)
gpp.aov.dat <- gpp.combined %>% pivot_wider(id_cols = c(Pin, Nin),
names_from = model,
values_from = GPP,
values_fn = mean)
summary(aov(log10(GPP) ~ model, data = gpp.aov.dat))
View(gpp.aov.dat)
summary(aov(log10(GPP) ~ model, data = gpp.combined))
TukeyHSD(aov(log10(GPP) ~ model, data = gpp.combined))
mean(gpp.combined[gpp.combined$model == "static", "GPP"])
mean(gpp.combined[gpp.combined$model == "static", ]$GPP)
mean(gpp.combined[gpp.combined$model != "static", ]$GPP)
# add stoichiometric ratios
gpp.combined$CN_mass <- 1/gpp.combined$QN1
gpp.combined$CP_mass <- 1/gpp.combined$QP1
gpp.combined$NP_mass <- gpp.combined$QN1/gpp.combined$QP1
# to molar
gpp.combined$CN_molar <- (gpp.combined$CN_mass * 14.007)/(1*12.011)
gpp.combined$CP_molar <- (gpp.combined$CP_mass * 30.974)/(1*12.011)
gpp.combined$NP_molar <- (gpp.combined$QN1/14.007)/(gpp.combined$QP1/30.974)
# C:N
plt.cn <- gpp.combined %>%
filter(model == "dynamic") %>%
ggplot(aes(Pin, Nin, fill = log(CN_molar))) +
geom_raster() +
# Redfield
geom_abline(intercept =  0, slope = c(16*14.007/30.974),
lty = "dashed", col = "white", lwd = 1, alpha = 0.5) +
geom_abline(data = consump.vctr[consump.vctr$trait == "minQN:minQP",],
aes(slope = slope, intercept = intercept), lwd = 1) +
# # Downing and McCauley
# geom_abline(intercept = 0, slope  = c(14, 30),
#             lty = "dashed", col = "black", lwd = 1, alpha = 0.5) +
labs(#x = expression("Inflow P ug L"^-1),
x = NULL,
y = expression("Inflow N ug L"^-1),
fill = "log cell C:N (molar)",
lty = NULL) +
facet_grid(.~species) +
scale_fill_viridis_c() +
theme(legend.position = "right")
# C:P
plt.cp <- gpp.combined %>%
filter(model == "dynamic") %>%
ggplot(aes(Pin, Nin, fill = log(CP_molar) )) +
geom_raster() +
# Redfield
geom_abline(intercept =  0, slope = c(16*14.007/30.974),
lty = "dashed", col = "white", lwd = 1, alpha = 0.5)  +
geom_abline(data = consump.vctr[consump.vctr$trait == "minQN:minQP",],
aes(slope = slope, intercept = intercept), lwd = 1) +
# # Downing and McCauley
# geom_abline(intercept = 0, slope  = c(14, 30),
#             lty = "dashed", col = "black", lwd = 1, alpha = 0.5) +
labs(#x = expression("Inflow P ug L"^-1),
x = NULL,
y = expression("Inflow N ug L"^-1),
fill = "log cell C:P (molar)",
lty = NULL) +
facet_grid(.~species) +
scale_fill_viridis_c() +
theme(legend.position = "right")
# N:P
plt.np <- gpp.combined %>%
filter(model == "dynamic") %>%
ggplot(aes(Pin, Nin, fill = log(NP_molar))) +
geom_raster() +
# Redfield
geom_abline(intercept =  0, slope = c(16*14.007/30.974),
lty = "dashed", col = "white", lwd = 1, alpha = 0.5) +
geom_abline(data = consump.vctr[consump.vctr$trait == "minQN:minQP",],
aes(slope = slope, intercept = intercept), lwd = 1) +
# # Downing and McCauley
# geom_abline(intercept = 0, slope  = c(14, 30),
#             lty = "dashed", col = "black", lwd = 1, alpha = 0.5) +
labs(x = expression("Inflow P ug L"^-1),
y = expression("Inflow N ug L"^-1),
fill = "Log cell N:P (molar)",
lty = NULL) +
facet_grid(.~species) +
scale_fill_viridis_c() +
theme(legend.position = "right")
plt.cnp <- ggarrange(plotlist = list(plt.cn, plt.cp, plt.np),
align = "hv", labels = c("a", "b", "c"),
nrow = 3, ncol = 1)
plt.cnp
save_plot("figures/CNP_all_species.png", plt.cnp, base_height = 7.5, base_width = 10)
4 * 8
75 * 35
75 * 35/49
100 * 40 + 36 * 40
100 * 40 + 36 * 40/1000
(100 * 40 + 36 * 40)/1000
