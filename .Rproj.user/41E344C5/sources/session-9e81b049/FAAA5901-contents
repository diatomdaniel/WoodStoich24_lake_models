---
title: "framework GPP in lake ecosystems and phytoplankton stoichiometry"
author: "Daniel Gschwentner"
date: "2024-07-16"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Introduction

### Experiment 1

We explored how co-varying nutrient loads influence lake gross primary production (GPP) and phytoplankton stoichiometry. We explored GPP across a range of inflow P concentrations from 0.005 to 0.500 g P m^-3^ and inflow N concentrations from 0.005 to 1000 g N m^-3^ (**We can update these values with more realistic ranges from the literature**). We ran simulations for these loads for models including static and flexible representations of phytoplankton stoichiometry.

-   We hypothesized that increasing N and P loads would result in higher rates of GPP but that GPP would be constrained by the relative supply of N and P. That is GPP should be low at extremely high and low inflow N:P ratios. We hypothesized that luxury uptake of N and P would result in more complex patterns of GPP.

-   We hypothesized that phytoplankton N:P would increase and decrease respectively with increasing inflow N and P concentrations, and that the ability for luxury uptake of N and P would produce extremely high and low N:P phytoplankton stoichiometry.

### Experiment 2

We explored how GPP varied as inflow concentrations of P and N changed in correlated ways (i.e. N:P is fixed). We ran scenarios in which we increased inflow P concentrations from 0.005 to 0.500 g P m^-3^ and varied inflow concentrations at N:P mass ratios of 90.44, 22.61, 7.24, 2.26 (molar ratios of 200, 50, 16, 5).

-   We hypothesized that we would observe the highest levels of GPP when loads where stoichiometrically balanced (i.e. close to Redfield ratio of 7.24 N:P by mass), and that GPP would decrease with increasing and decreasing N:P from Redfield.

### Experiment 3

We examined how different phytoplankton groups influenced GPP. For this, we re-ran simulations from experiments 1 and 2 with models populated with 3 phytoplankton groups (diatoms, green algae, cyanobacteria) which have different trait values.

Diatoms, greens, cyanos comparison

### Experiment 4

Explore variation in phytoplankton traits; still working on this.

## Setup

The chunks in this section load packages, models and data needed to run the models.

```{r setup environment and load traits, include=F, warning=F, message=F}
pck <- c("deSolve", "tidyverse", "cowplot", "ggsci", "ggpubr", "ggtern")
lapply(pck, require, character.only = T)
theme_set(theme_cowplot() + 
            theme(legend.justification = "center",
                  legend.position = "bottom", 
                  legend.text = element_text(),
                  legend.title = element_text()))
# load ODE models 
# saved in external files for convenience
# Michalis-Menten model
source("models/mich_single_noLight.R") # michaelis menten kinetics, one algae species; model 1 in Carly's framework
# Droop model
source("models/droop_single_noLight.R") # droop model, one algae species; model 3 in Carly's framework

# load file with phytoplankton traits
traits <- read_csv("data4input/phyto_traits4models_21June2024.csv")[,-1]

# set up scenarios
times <- 1:500

```

This chunk creates lists of parameters needed to run the models. In total, there are 8 parameter lists:

-   Michaelis-Menten model for average, diatom, greens and cyano traits

-   Droop model for average, diatom, greens and cyano traits

These parameter lists require the table with phytoplankton traits from [Edwards et al., 2016](https://figshare.com/articles/dataset/Data_Paper_Data_Paper/3562857?file=5635515) data set. The code will need to be updated if the format of the table changes in any way.

```{r set up phytoplankton traits, include=F, message=F, warning=F}

### averages

## michaelis-menten model for mean phytoplankton traits
params.mich <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3
  
  #light parameters
  I0 = 400, # incident light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl

  # algae physiology parameters
  umax1 = traits[12, "average"],
  lA=0.1,			# mortality rate day-1
  v=0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "average"], # light half sat constant 
  KP1 = traits[2, "average"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  QP1 = traits[6, "average"], # algae cell P quota in mg P mg^-1 C^-1
  KN1 = traits[1, "average"] * 1000, # nitrogen half sat constant in mg N m^-3 
  QN1 = traits[5, "average"] # algae cell N quota in mg N mg^-1 C^-1 
)
names(params.mich) <- c("SA", "zmix", "Pin", "Nin", "I0", 
                        "kBg", "kA", "umax1", "lA", "v", 
                        "KLight", "KP1",  "QP1", "KN1",  "QN1")
names(params.mich)
params.mich <- unlist(params.mich)

## droop model for mean phytoplankton traits

params.droop <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3

  # light parameters
  I0 = 400, # surface light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
 
  # algae physiology parameters
  umax1 = traits[12, "average"],
  lA=0.1,			# mortality rate day-1
  v= 0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "average"], # light half sat constant 
  KP1 = traits[2, "average"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  minQP1 = traits[6, "average"], # algae cell P quota in mg P mg^-1 C^-1 f
  upP1 = traits[4, "average"], # max uptake rate P per day in mg P mg C^-1 day^-1 
  KN1 = traits[1, "average"] * 1000, # nitrogen half sat constant in mg N m^-3 
  minQN1 = traits[5, "average"], # algae cell N quota in mg N mg^-1 C^-1 f
  upN1 = traits[3, "average"] # max uptake rate N per day in mg N mg C^-1 day^-1 
)



names(params.droop) <- c("SA", "zmix", "Pin", "Nin", "I0", "kBg", "kA",
                             "umax1", "lA", "v", "KLight", 
                             "KP1", "minQP1", "upP1", "KN1",
                             "minQN1", "upN1")
names(params.droop)
params.droop <- unlist(params.droop)

### diatoms

## michaelis menten model for diatom traits

diatoms.mich <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3
  
  # light parameters
  I0 = 400, # incident light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl

  # algae physiology parameters
  umax1 = traits[12, "diatoms"],
  lA=0.1,			# mortality rate day-1
  v=0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "diatoms"], # light half sat constant 
  KP1 = traits[2, "diatoms"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  QP1 = traits[6, "diatoms"], # algae cell P quota in mg P mg^-1 C^-1
  KN1 = traits[1, "diatoms"] * 1000, # nitrogen half sat constant in mg N m^-3 
  QN1 = traits[5, "diatoms"] # algae cell N quota in mg N mg^-1 C^-1 
)
names(diatoms.mich) <- c("SA", "zmix", "Pin", "Nin", "I0", 
                        "kBg", "kA", "umax1", "lA", "v", 
                        "KLight", "KP1",  "QP1", "KN1",  "QN1")
names(diatoms.mich)
diatoms.mich <- unlist(diatoms.mich)

## droop model for diatom traits

diatoms.droop <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3

  # light parameters
  I0 = 400, # surface light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl

  # algae physiology parameters
  umax1 = traits[12, "diatoms"],
  lA=0.1,			# mortality rate day-1
  v= 0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "diatoms"], # light half sat constant 
  KP1 = traits[2, "diatoms"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  minQP1 = traits[6, "diatoms"], # algae cell P quota in mg P mg^-1 C^-1 f
  upP1 = traits[4, "diatoms"], # max uptake rate P per day in mg P mg C^-1 day^-1 
  KN1 = traits[1, "diatoms"] * 1000, # nitrogen half sat constant in mg N m^-3 
  minQN1 = traits[5, "diatoms"], # algae cell N quota in mg N mg^-1 C^-1 f
  upN1 = traits[3, "diatoms"] # max uptake rate N per day in mg N mg C^-1 day^-1 
)



names(diatoms.droop) <- c("SA", "zmix", "Pin", "Nin", "I0", "kBg", "kA",
                             "umax1", "lA", "v", "KLight", 
                             "KP1", "minQP1", "upP1", "KN1",
                             "minQN1", "upN1")
names(diatoms.droop)
diatoms.droop <- unlist(diatoms.droop)

### green algae

## michaelis menten model for green algae traits

greens.mich <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3
  
  # light parameters
  I0 = 400, # incident light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl

  # algae physiology parameters
  umax1 = traits[12, "greens"],
  lA=0.1,			# mortality rate day-1
  v=0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "greens"], # light half sat constant 
  KP1 = traits[2, "greens"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  QP1 = traits[6, "greens"], # algae cell P quota in mg P mg^-1 C^-1
  KN1 = traits[1, "greens"] * 1000, # nitrogen half sat constant in mg N m^-3 
  QN1 = traits[5, "greens"] # algae cell N quota in mg N mg^-1 C^-1 
)
names(greens.mich) <- c("SA", "zmix", "Pin", "Nin", "I0", 
                        "kBg", "kA", "umax1", "lA", "v", 
                        "KLight", "KP1",  "QP1", "KN1",  "QN1")
names(greens.mich)
greens.mich <- unlist(greens.mich)

## droop model for green algae traits

greens.droop <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3

  # light parameters
  I0 = 400, # surface light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
 
  # algae physiology parameters
  umax1 = traits[12, "greens"],
  lA=0.1,			# mortality rate day-1
  v= 0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "greens"], # light half sat constant 
  KP1 = traits[2, "greens"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  minQP1 = traits[6, "greens"], # algae cell P quota in mg P mg^-1 C^-1 f
  upP1 = traits[4, "greens"], # max uptake rate P per day in mg P mg C^-1 day^-1 
  KN1 = traits[1, "greens"] * 1000, # nitrogen half sat constant in mg N m^-3 
  minQN1 = traits[5, "greens"], # algae cell N quota in mg N mg^-1 C^-1 f
  upN1 = traits[3, "greens"] # max uptake rate N per day in mg N mg C^-1 day^-1 
)



names(greens.droop) <- c("SA", "zmix", "Pin", "Nin", "I0", "kBg", "kA",
                             "umax1", "lA", "v", "KLight", 
                             "KP1", "minQP1", "upP1", "KN1",
                             "minQN1", "upN1")
names(greens.droop)
greens.droop <- unlist(greens.droop)

### cyanobacteria

## michaelis menten model for green algae traits

cyanos.mich <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3
  
  # light parameters
  I0 = 400, # incident light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl

  # algae physiology parameters
  umax1 = traits[12, "cyanos"],
  lA=0.1,			# mortality rate day-1
  v=0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "cyanos"], # light half sat constant 
  KP1 = traits[2, "cyanos"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  QP1 = traits[6, "cyanos"], # algae cell P quota in mg P mg^-1 C^-1
  KN1 = traits[1, "cyanos"] * 1000, # nitrogen half sat constant in mg N m^-3 
  QN1 = traits[5, "cyanos"] # algae cell N quota in mg N mg^-1 C^-1 
)
names(cyanos.mich) <- c("SA", "zmix", "Pin", "Nin", "I0", 
                        "kBg", "kA", "umax1", "lA", "v", 
                        "KLight", "KP1",  "QP1", "KN1",  "QN1")
names(cyanos.mich)
cyanos.mich <- unlist(cyanos.mich)

## droop model for green algae traits

cyanos.droop <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3

  # light parameters
  I0 = 400, # surface light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
 
  # algae physiology parameters
  umax1 = traits[12, "cyanos"],
  lA=0.1,			# mortality rate day-1
  v= 0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "cyanos"], # light half sat constant 
  KP1 = traits[2, "cyanos"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  minQP1 = traits[6, "cyanos"], # algae cell P quota in mg P mg^-1 C^-1 f
  upP1 = traits[4, "cyanos"], # max uptake rate P per day in mg P mg C^-1 day^-1 
  KN1 = traits[1, "cyanos"] * 1000, # nitrogen half sat constant in mg N m^-3 
  minQN1 = traits[5, "cyanos"], # algae cell N quota in mg N mg^-1 C^-1 f
  upN1 = traits[3, "cyanos"] # max uptake rate N per day in mg N mg C^-1 day^-1 
)



names(cyanos.droop) <- c("SA", "zmix", "Pin", "Nin", "I0", "kBg", "kA",
                             "umax1", "lA", "v", "KLight", 
                             "KP1", "minQP1", "upP1", "KN1",
                             "minQN1", "upN1")
names(cyanos.droop)
cyanos.droop <- unlist(cyanos.droop)

```

## Running models (can ignore this)

The next couple of code chunks run the models for the different simulations/experiments described in the introduction section. They shouldn't produce any visible output, and you shouldn't have to touch any of the code.

### Experiment 1

Run models using Michaelis-Menten and Droop formulation and **average** phytoplankton traits across simulatenously varying N and P loads.

```{r run models for experiment 1, include=F, message=F, warning=F}

# nutrient loads
# P = 0.005 to 0.150 g m^-3 = 5 to 150 mg m^-3
# N = 0.005 to 0.150 g m^-3 = 5 to 150 mg m^-3
exp1.loads <- expand.grid(Pin = seq(5, 500,20),
                                Nin = seq(5, 1000, 20))

## michaelis-menten model
# apply over scenarios
exp1.mich <- lapply(1:nrow(exp1.loads), function(i) {
  params.mich["Pin"] = exp1.loads[i, "Pin"]
  params.mich["Nin"] = exp1.loads[i, "Nin"]
  y <- c("A1" = 100,
         "P" = exp1.loads[i, "Pin"],
         "N" = exp1.loads[i, "Nin"])
  
  run <- ode(y, times, parms = params.mich, func = mich.single)
  return(run[max(times),])
  
})

exp1.mich <- do.call(rbind, exp1.mich)
exp1.mich <- as_data_frame(exp1.mich)
exp1.mich$Pin <- exp1.loads$Pin
exp1.mich$Nin <- exp1.loads$Nin

## droop model
# apply over scearions
exp1.droop <- lapply(1:nrow(exp1.loads), function(i) {
  params.droop["Pin"] = exp1.loads[i, "Pin"]
  params.droop["Nin"] = exp1.loads[i, "Nin"]
  y <- c("A1" = 100,
         "P" = exp1.loads[i, "Pin"],
         "N" = exp1.loads[i, "Nin"],
         "QP1" = 0.015,
         "QN1" = 0.1)
  
  run <- ode(y, times, parms = params.droop, func = droop.single)
  return(run[max(times),])
  
})

exp1.droop <- do.call(rbind, exp1.droop)
exp1.droop <- as_data_frame(exp1.droop)
exp1.droop$Pin <- exp1.loads$Pin
exp1.droop$Nin <- exp1.loads$Nin

## combine data sets for plotting
exp1.data <- bind_rows(
  exp1.mich %>% mutate(model = "Michaelis-Menten"),
  exp1.droop %>% mutate(model = "Droop")
) %>%
  mutate(model = factor(model, levels = c("Michaelis-Menten", "Droop")))


```


### Experiment 2

Run models using Michaelis-Menten and Droop formulation and **average** phytoplankton traits across varying P loads and **fixed** N:P stoichiometry of 90.44, 22.61, 7.24, 2.26 by mass..

```{r run models for experiment 2, include=F, message=F, warning=F}

# nutrient loads
# P = 0.005 to 0.150 g m^-3 = 5 to 150 mg m^-3
# N:P = 22.61, 13.57, 9.04, 7.24, 4.52, 2.26  by mass
exp2.loads <- expand.grid(Pin = seq(5, 500,10),
                                NP_inflow = c(90.44, 22.61, 7.24, 2.26))
exp2.loads$Nin <- exp2.loads$Pin * exp2.loads$NP_inflow

## michaelis-menten model
# apply over scenarios
exp2.mich <- lapply(1:nrow(exp2.loads), function(i) {
  params.mich["Pin"] = exp2.loads[i, "Pin"]
  params.mich["Nin"] = exp2.loads[i, "Nin"]
  y <- c("A1" = 100,
         "P" = exp2.loads[i, "Pin"],
         "N" = exp2.loads[i, "Nin"])
  
  run <- ode(y, times, parms = params.mich, func = mich.single)
  return(run[max(times),])
  
})

exp2.mich <- do.call(rbind, exp2.mich)
exp2.mich <- as_data_frame(exp2.mich)
exp2.mich$Pin <- exp2.loads$Pin
exp2.mich$NP_inflow <- exp2.loads$NP_inflow

## droop model
# apply over scearions
exp2.droop <- lapply(1:nrow(exp2.loads), function(i) {
  params.droop["Pin"] = exp2.loads[i, "Pin"]
  params.droop["Nin"] = exp2.loads[i, "Nin"]
  y <- c("A1" = 100,
         "P" = exp2.loads[i, "Pin"],
         "N" = exp2.loads[i, "Nin"],
         "QP1" = 0.015,
         "QN1" = 0.1)
  
  run <- ode(y, times, parms = params.droop, func = droop.single)
  return(run[max(times),])
  
})

exp2.droop <- do.call(rbind, exp2.droop)
exp2.droop <- as_data_frame(exp2.droop)
exp2.droop$Pin <- exp2.loads$Pin
exp2.droop$NP_inflow <- exp2.loads$NP_inflow

## combine data sets for plotting
exp2.data <- bind_rows(
  exp2.mich %>% mutate(model = "Michaelis-Menten"),
  exp2.droop %>% mutate(model = "Droop")
) %>%
  mutate(model = factor(model, levels = c("Michaelis-Menten", "Droop")))

```


### Experiment 3

Experiment 3 re-runs experiments 1 and 2 for the three phytoplankton groups.

#### Experiment 3 pt 1

```{r run models for experiment 3 pt1, include=F, message=F, warning=F}


# nutrient loads
# P = 0.005 to 0.150 g m^-3 = 5 to 150 mg m^-3
# N = 0.005 to 0.150 g m^-3 = 5 to 150 mg m^-3
exp3.loads <- expand.grid(Pin = seq(5, 500,20),
                                Nin = seq(5, 1000, 20))

## michaelis-menten model
# apply over scenarios and algal groups
exp.3.mich <-  lapply(list(diatoms.mich, greens.mich, cyanos.mich), function(x) {
  params <- x
  lapply(1:nrow(exp3.loads), function(i) {
    params["Pin"] = exp3.loads[i, "Pin"]
    params["Nin"] = exp3.loads[i, "Nin"]
    y <- c("A1" = 100, "P" = exp3.loads[i, "Pin"],"N" = exp3.loads[i, "Nin"])
    run <- ode(y, times, parms = params, func = mich.single)
    return(run[max(times),])
  })
})
exp3.mich.diatoms <- as_data_frame(do.call(rbind, exp.3.mich[[1]]))
exp3.mich.greens <- as_data_frame(do.call(rbind, exp.3.mich[[2]]))
exp3.mich.cyanos <- as_data_frame(do.call(rbind, exp.3.mich[[3]]))

## droop model
# apply over scenarios and algal groups
exp.3.droop <-  lapply(list(diatoms.droop, greens.droop, cyanos.droop), function(x) {
  params <- x
  lapply(1:nrow(exp3.loads), function(i) {
    params["Pin"] = exp3.loads[i, "Pin"]
    params["Nin"] = exp3.loads[i, "Nin"]
    y <- c("A1" = 100, "P" = exp3.loads[i, "Pin"],"N" = exp3.loads[i, "Nin"],
           "QP1" = 0.015, "QN1" = 0.1)
    run <- ode(y, times, parms = params, func = droop.single)
    return(run[max(times),])
  })
})
exp3.droop.diatoms <- as_data_frame(do.call(rbind, exp.3.droop[[1]]))
exp3.droop.greens <- as_data_frame(do.call(rbind, exp.3.droop[[2]]))
exp3.droop.cyanos <- as_data_frame(do.call(rbind, exp.3.droop[[3]]))

# combine everything into a data frame
exp3.data <- bind_rows(
  exp3.mich.diatoms, exp3.mich.greens, exp3.mich.cyanos,
  exp3.droop.diatoms, exp3.droop.greens, exp3.droop.cyanos
) %>%
  mutate(model = rep(c("Michaelis-Menten", "Droop"), each = nrow(exp3.loads) * 3), 
         species = rep(c("Diatoms", "Greens", "Cyanos", "Diatoms", "Greens", "Cyanos"), 
                       each = nrow(exp3.loads)),
         Pin = rep(exp3.loads$Pin, 6), 
         Nin = rep(exp3.loads$Nin, 6)) %>%
  mutate(model = factor(model, levels = c("Michaelis-Menten", "Droop")), 
         species = factor(species, levels = c("Diatoms", "Greens", "Cyanos")))

```

#### Experiment 3 pt 2

```{r run models for experiment 3 pt2, include=F, message=F, warning=F}

# nutrient loads
# P = 0.005 to 0.150 g m^-3 = 5 to 150 mg m^-3
# N:P = 22.61, 13.57, 9.04, 7.24, 4.52, 2.26  by mass
exp3.loads2 <- expand.grid(Pin = seq(5, 500,10),
                                NP_inflow = c(90.44, 22.61, 7.24, 2.26))
exp3.loads2$Nin <- exp3.loads2$Pin * exp3.loads2$NP_inflow

## michaelis-menten model
# apply over scenarios and algal groups
exp.3.mich2 <-  lapply(list(diatoms.mich, greens.mich, cyanos.mich), function(x) {
  params <- x
  lapply(1:nrow(exp3.loads2), function(i) {
    params["Pin"] = exp3.loads2[i, "Pin"]
    params["Nin"] = exp3.loads2[i, "Nin"]
    y <- c("A1" = 100, "P" = exp3.loads2[i, "Pin"],"N" = exp3.loads2[i, "Nin"])
    run <- ode(y, times, parms = params, func = mich.single)
    return(run[max(times),])
  })
})
exp3.mich2.diatoms <- as_data_frame(do.call(rbind, exp.3.mich2[[1]]))
exp3.mich2.greens <- as_data_frame(do.call(rbind, exp.3.mich2[[2]]))
exp3.mich2.cyanos <- as_data_frame(do.call(rbind, exp.3.mich2[[3]]))

## droop model
# apply over scenarios and algal groups
exp.3.droop2 <-  lapply(list(diatoms.droop, greens.droop, cyanos.droop), function(x) {
  params <- x
  lapply(1:nrow(exp3.loads2), function(i) {
    params["Pin"] = exp3.loads2[i, "Pin"]
    params["Nin"] = exp3.loads2[i, "Nin"]
    y <- c("A1" = 100, "P" = exp3.loads2[i, "Pin"],"N" = exp3.loads2[i, "Nin"],
           "QP1" = 0.015, "QN1" = 0.1)
    run <- ode(y, times, parms = params, func = droop.single)
    return(run[max(times),])
  })
})
exp3.droop2.diatoms <- as_data_frame(do.call(rbind, exp.3.droop2[[1]]))
exp3.droop2.greens <- as_data_frame(do.call(rbind, exp.3.droop2[[2]]))
exp3.droop2.cyanos <- as_data_frame(do.call(rbind, exp.3.droop2[[3]]))

# combine everything into a data frame
exp3.data2 <- bind_rows(
  exp3.mich2.diatoms, exp3.mich2.greens, exp3.mich2.cyanos,
  exp3.droop2.diatoms, exp3.droop2.greens, exp3.droop2.cyanos
) %>%
  mutate(model = rep(c("Michaelis-Menten", "Droop"), each = nrow(exp3.loads2) * 3), 
         species = rep(c("Diatoms", "Greens", "Cyanos", "Diatoms", "Greens", "Cyanos"), 
                       each = nrow(exp3.loads2)),
         Pin = rep(exp3.loads2$Pin, 6), 
         Nin = rep(exp3.loads2$Nin, 6),
         NP_inflow = rep(exp3.loads2$NP_inflow, 6)) %>%
  mutate(model = factor(model, levels = c("Michaelis-Menten", "Droop")), 
         species = factor(species, levels = c("Diatoms", "Greens", "Cyanos")))


```


## Output

### Output for experiment 1

Lake GPP increased with N and P inflow concentrations. Clear stoichiometric patterns for both model expressions where extreme inflow N:P ratios result in nutrient limitation. The areas of the plot where limitation occurs fall very close to the Redfield ratio (white line in figures). This is pretty cool but not necessarily novel? The Michaelis-Menten model creates step-wise changes in GPP whereas the Droop model is "smoother". 

The changes in seston C:N are pretty intuitive: decreasing N:P of the inflow increases C:N (i.e. phytos accumulate C but not N, become strongly N limited), and vice versa for increasing N:P and C:P. There is a relatively narrow range of C:N compared to C:P or even N:P. 

I think these results generically support stoichiometric theory; imbalanced N:P supply results in luxury uptake of the non-limiting nutrient; nutrient limitation increases C:X ratios.

```{r plot output for experiment 1, echo=F, message=F, warning=F, fig.height=5, fig.width=9}

## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
  ggplot(aes(Pin, Nin, fill = A1)) + 
  geom_raster() + 
  facet_wrap(model~., ncol = 2, nrow = 1) + 
  geom_abline(intercept = 0, slope = 16*14.007/30.974, 
              lty = "dashed", col = "white", lwd = 1) + 
  labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
       fill = expression("GPP mg C m"^-2 ~ "day"^-1)) + 
  scale_fill_viridis_b(option = "C"))

## plot N:P for experiment 1
# QN
fig.exp1.np1 <- exp1.data %>%
  filter(model == "Droop") %>%
  ggplot(aes(Pin, Nin, fill = 1/QN1)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = 16*14.007/30.974, 
              lty = "dashed", col = "white", lwd = 1) + 
  labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
       fill = "Cell C:N mass") + 
  scale_fill_viridis_b(option = "C")
# QP
fig.exp1.np2 <- exp1.data %>%
  filter(model == "Droop") %>%
  ggplot(aes(Pin, Nin, fill = 1/QP1)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = 16*14.007/30.974, 
              lty = "dashed", col = "white", lwd = 1) + 
  labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
       fill = "Cell C:P mass") + 
  scale_fill_viridis_b(option = "C")
# N:P
fig.exp1.np3 <- exp1.data %>%
  filter(model == "Droop") %>%
  mutate(N_P_cell = QN1/QP1) %>%
  ggplot(aes(Pin, Nin, fill = N_P_cell)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = 16*14.007/30.974, 
              lty = "dashed", col = "white", lwd = 1) + 
  labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
       fill = expression("Cell N:P mass")) + 
  scale_fill_viridis_b(option = "C")
# merge to produce figure
fig.exp1.np <- ggarrange(
  plotlist = list(fig.exp1.np1, fig.exp1.np2, fig.exp1.np3),
  nrow = 1, ncol = 3, align = "hv", labels = c("a", "b", "c"))
fig.exp1.np

```

### Output for experiment 2

__Note: For some reason the legend isn't rendering in my Markdown file. FYI the color legend shows increasing N:P of the inflow/supply by mass.__

This is where stuff gets interesting! 
While GPP increases with P inflow concentrations, stoichiometry constrains increases in biomass once the N:P of the inflow exceeds 23 by mass in biomass (approximately 50 by moles)! There should be a fourth line in orange in the first figure which overlaps with the yellow line.
The Droop model produces lower estimates of GPP on average.

Changes in seston stoichiometey show homeostasis with increasing P inflow concentrations! This also varies with the N:P of the inflow. Higher inflow N:P generally result in higher C:N, C:P and N:P.

```{r plot output for experiment 2, echo=F, message=F, warning=F, fig.height=5, fig.width=9}

## plot GPP for experiment 1
(fig.exp2.gpp <- exp2.data %>%
  ggplot(aes(Pin, A1, col = NP_inflow, group = NP_inflow)) + 
  geom_line(lwd = 1) + 
  facet_wrap(model~., ncol = 2, nrow = 1) + 
  labs(x = expression("Inflow P mg m"^-3), y = expression("GPP mg C m"^-2 ~ "day"^-1),
       col = "Inflow N:P (mass)") + 
  scale_color_viridis_b(option = "C", breaks = round(c(90.44, 22.61, 7.24, 2.26)), 0))

## plot N:P for experiment 2
# QN
fig.exp2.np1 <- exp2.data %>%
  filter(model == "Droop") %>%
  ggplot(aes(Pin, 1/QN1, col = NP_inflow, group = NP_inflow)) + 
  geom_line(lwd = 1) + 
  labs(x = expression("Inflow P mg m"^-3), y = "Cell C:N mass",
       col = "Inflow N:P (mass)") + 
  scale_color_viridis_b(option = "C", breaks = round(c(90.44, 22.61, 7.24, 2.26)), 0)
# QP
fig.exp2.np2 <- exp2.data %>%
  filter(model == "Droop") %>%
  ggplot(aes(Pin, 1/QP1, col = NP_inflow, group = NP_inflow)) + 
  geom_line(lwd = 1) + 
  labs(x = expression("Inflow P mg m"^-3), y ="Cell C:P mass",
       col = "Inflow N:P (mass)") + 
  scale_color_viridis_b(option = "C", breaks = round(c(90.44, 22.61, 7.24, 2.26)), 0)
# N:P
fig.exp2.np3 <- exp2.data %>%
  filter(model == "Droop") %>%
  mutate(N_P_cell = QN1/QP1) %>%
  ggplot(aes(Pin, N_P_cell, col = NP_inflow, group = NP_inflow)) + 
  geom_line(lwd = 1) + 
  labs(x = expression("Inflow P mg m"^-3), y = "Cell N:P mass",
       col = "Inflow N:P (mass)")  + 
  scale_color_viridis_b(option = "C", breaks = round(c(90.44, 22.61, 7.24, 2.26)), 0)
# merge to produce figure
fig.exp2.np <- ggarrange(
  plotlist = list(fig.exp2.np1, fig.exp2.np2, fig.exp2.np3),
  nrow = 1, ncol = 3, align = "hv", labels = c("a", "b", "c"))
fig.exp2.np

```

### Output for experiment 3


```{r plot figures for experiment3 pt1, echo=F, warning=F, message=F}

# plot GPP for experiment 3
(fig.exp3.gpp <- exp3.data %>%
  ggplot(aes(Pin, Nin, fill = A1)) + 
  geom_raster() + 
  facet_grid(model~species) + 
  geom_abline(intercept = 0, slope = 16*14.007/30.974, 
              lty = "dashed", col = "white", lwd = 1) + 
  labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
       fill = expression("GPP mg C m"^-2 ~ "day"^-1)) + 
  scale_fill_viridis_b(option = "C"))


```

```{r plot figures for experiment3 pt1v2, echo=F, warning=F, message=F, fig.height=10, fig.width=8}
## plot N:P for experiment 3
# QN
fig.exp3.np1 <- exp3.data %>%
  filter(model == "Droop") %>%
  ggplot(aes(Pin, Nin, fill = QN1/1)) + 
  geom_raster() + 
  facet_wrap(species~.) + 
  geom_abline(intercept = 0, slope = 16*14.007/30.974, 
              lty = "dashed", col = "white", lwd = 1) + 
  labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
       fill = "C:N mass") + 
  scale_fill_viridis_b(option = "C")
# QP
fig.exp3.np2 <- exp3.data %>%
  filter(model == "Droop") %>%
  ggplot(aes(Pin, Nin, fill = 1/QP1)) + 
  geom_raster() + 
  facet_wrap(species~.) + 
  geom_abline(intercept = 0, slope = 16*14.007/30.974, 
              lty = "dashed", col = "white", lwd = 1) + 
  labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
       fill = "C:P mass") + 
  scale_fill_viridis_b(option = "C")
# N:P
fig.exp3.np3 <- exp3.data %>%
  filter(model == "Droop") %>%
  mutate(N_P_cell = (QN1/14.007)/(QP1/30.974)) %>%
  ggplot(aes(Pin, Nin, fill = N_P_cell)) + 
  geom_raster() + 
  facet_wrap(species~.) + 
  geom_abline(intercept = 0, slope = 16, 
              lty = "dashed", col = "white", lwd = 1) + 
  labs(x = expression("Inflow P mg m"^-3), y = expression("Inflow N mg m"^-3),
       fill = expression("N:P mass")) + 
  scale_fill_viridis_b(option = "C")
# merge to produce figure
fig.exp3.np <- ggarrange(
  plotlist = list(fig.exp3.np1, fig.exp3.np2, fig.exp3.np3),
  nrow = 3, ncol = 1, align = "hv", labels = c("a", "b", "c"))
fig.exp3.np
```


```{r plot output for experiment3 pt2, echo=F, message=F, warning=F, fig.height=5, fig.width=9}

## plot GPP for experiment 3 pt 2
(fig.exp3.pt.2gpp <- exp3.data2 %>%
  ggplot(aes(Pin, A1, col = NP_inflow, group = NP_inflow, pch = species)) + 
  geom_point() + 
  facet_grid(model~species) + 
  labs(x = expression("Inflow P mg m"^-3), y = expression("GPP mg C m"^-2 ~ "day"^-1),
       color = "Inflow N:P (mass)") + 
  scale_color_viridis_b(option = "C", breaks = round(c(90.44, 22.61, 7.24, 2.26)), 0))

## plot N:P for experiment 3 pt2
# QN
fig.exp3.pt2.np1 <- exp3.data2 %>%
  filter(model == "Droop") %>%
  ggplot(aes(Pin, 1/QN1, col = NP_inflow, group = NP_inflow, pch = species)) + 
  geom_point() + 
  #facet_wrap(species~.) + 
  labs(x = expression("Inflow P mg m"^-3), y = "Cell C:N mass",
       col = "Inflow N:P (mass)") + 
  scale_color_viridis_b(option = "C", breaks = round(c(90.44, 22.61, 7.24, 2.26)), 0)
# QP
fig.exp3.pt2.np2 <- exp3.data2 %>%
  filter(model == "Droop") %>%
  ggplot(aes(Pin, 1/QP1, col = NP_inflow, group = NP_inflow, pch = species)) + 
  geom_point() + 
  #facet_wrap(species~.) + 
  labs(x = expression("Inflow P mg m"^-3), y = "Cell C:P mass",
       col = "Inflow N:P (mass)") + 
  scale_color_viridis_b(option = "C", breaks = round(c(90.44, 22.61, 7.24, 2.26)), 0)
# N:P
fig.exp3.pt2.np3 <- exp3.data2 %>%
  filter(model == "Droop") %>%
  mutate(N_P_cell = QN1/QP1) %>%
  ggplot(aes(Pin, N_P_cell, col = NP_inflow, group = NP_inflow, pch = species)) + 
  geom_point() + 
  #facet_wrap(species~.) + 
  labs(x = expression("Inflow P mg m"^-3), y = "Cell N:P mass",
       col = "Inflow N:P (mass)")  + 
  scale_color_viridis_b(option = "C", breaks = round(c(90.44, 22.61, 7.24, 2.26)), 0)
# merge to produce figure
fig.exp3.pt2.np <- ggarrange(
  plotlist = list(fig.exp3.pt2.np1, fig.exp3.pt2.np2, fig.exp3.pt2.np3),
  nrow = 1, ncol = 3, align = "hv", labels = c("a", "b", "c"))
fig.exp3.pt2.np

```

## Ternary plots

I managed to generate ternary plots from the model outputs using the 'ggtern' package. Not sure how informative these figures are; the Redfield ratio is included as a back dot in each of the plots, and you can see how observations move towards or away from Redfield depending on the scenario.

```{r data set up for ternary plots, include=F, message=F, warning=F}

# add the average phytoplankton stoichiometry to the species traits
# load simulations
tern.data1 <- bind_rows(
  exp1.data %>% filter(model == "Droop") %>% mutate(species = "Average"),
  exp3.data %>% filter(model == "Droop")) %>% 
  mutate(species = factor(species, 
                          levels = c("Average", "Diatoms", "Greens", "Cyanos")),
         # reframe ratios
         "C:N" = 1/QN1, 
         "C:P" = 1/QP1, 
         "N:P" = QN1/QP1)

# add the average phytoplankton stoichiometry to the species traits
# stoichiometry simulations
tern.data2 <- bind_rows(
   exp2.data %>% filter(model == "Droop") %>% mutate(species = "Average"),
   exp3.data2 %>% filter(model == "Droop")) %>% 
  mutate(species = factor(species, 
                          levels = c("Average", "Diatoms", "Greens", "Cyanos")),
         # reframe ratios
         "C:N" = 1/QN1, 
         "C:P" = 1/QP1, 
         "N:P" = QN1/QP1)

```

```{r generate ternarey plots, echo=F, message=F, warning=F}
# load simulations
(fig.loads.tern <- tern.data1 %>%
  ggtern() + 
  geom_point(aes(`C:N`, `C:P`, `N:P`, col = Pin)) + 
  # manually add Refield ratio
  geom_point(aes((106*12.001)/(16*14.007), 
                 (106 * 12.001)/(1*30.974), 
                 (16*14.007)/(1*30.974))) + 
  scale_color_viridis_b(option = "C") + 
  facet_wrap(species~., nrow = 2, ncol = 2))

# stoichiometry simulations
(fig.stoich.tern <- tern.data2 %>%
    mutate(NP_inflow2 = paste0("N:P in = ", round(NP_inflow, 0))) %>%
     ggtern() + 
  geom_point(aes(`C:N`, `C:P`, `N:P`, col = Pin)) + 
  # manually add Refield ratio
  geom_point(aes((106*12.001)/(16*14.007), 
                 (106 * 12.001)/(1*30.974), 
                 (16*14.007)/(1*30.974))) + 
  scale_color_viridis_b(option = "C") + 
  facet_grid(species~NP_inflow2))

```
