---
title: "Sensitivity analysis model parameters noLight"
author: "Daniel Gschwentner"
date: "2024-08-20"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(include = F)
```

## Overview

Code to perform sensitivity analysis of algal physiology parameters for Michaelis-Menten (static stoichiometry) and Droop (dynamic/flexible stoichiometry) models.

## Setup

```{r packages, echo = F, message=F, warning=F, results = "hide"}
# load packages
pck <- c("deSolve", "tidyverse", "cowplot", "ggsci", "ggthemes") 
lapply(pck, require, character.only = T)
# set plotting theme
theme_set(theme_solarized(light=F) + 
          theme(text = element_text(color = "white"), 
                axis.text = element_text(color = "white"),
                axis.title = element_text(color = "white"),
                legend.text = element_text(color = "white"),
                legend.title = element_text(color = "white"),
                legend.justification = "center", 
                legend.position = "bottom"))

# load ODE models 
# saved in external files for convenience
# Michalis-Menten model
source("models/mich_single_noLight.R") # michaelis menten kinetics, one algae species; model 1 in Carly's framework
# Droop model
source("models/droop_single_noLight.R") # droop model, one algae species; model 3 in Carly's framework
```

For the models I am using the average parameter values from the table below. These parameters are from [Edwards et al., 2016](https://figshare.com/articles/dataset/Data_Paper_Data_Paper/3562857?file=5635515).

```{r load traits, echo = F, include=T}
# trait data
# median values
traits <- read_csv("data4input/phyto_traits4models_21June2024.csv")[,-1]
knitr::kable(traits, caption = "Trait parameters")

```

### Model setup

Code chunk below creates grid of inflow N and P concentrations across which the model is run

```{r create grid of nutrient inflow scenarios}

# timesteps
times <- 1:2000
# for troubleshooting
times <- 1:1000
# loads
# Olson&Jones use 20 to 500 for P. Use similar values
# for TP: TP from 2018-219 NLA stream assement ranges from 2 to 950 ugL with 25th and 7th percentiles of 23 and 133 ugL. DG, August 2024
# for TN: TN from 2018-2019 NLA Stream Assessment ranges from 22 to 22,000 ugL with 25th and 75th percentiles of 300 and 14,000 ug L; DG, August 2024
loads <- expand.grid(Pin = seq(20, 500, 50 ) ,
                     Nin = seq(500,15000,500))

# for trouble-shooting use a smaller grid
loads <- expand.grid(Pin = seq(20, 500, 100) ,
                     Nin = seq(500,15000, 500))

```

Chunk sets model parameters for static model

```{r michaelis-menten model setup}

params.mich <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3
  
  # light parameters
  I0 = 400, # incident light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl

  # algae physiology parameters
  umax1 = traits[12, "average"],
  lA=0.1,			# mortality rate day-1
  v=0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "average"], # light half sat constant 
  KP1 = traits[2, "average"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  QP1 = traits[6, "average"], # algae cell P quota in mg P mg^-1 C^-1
  KN1 = traits[1, "average"] * 1000, # nitrogen half sat constant in mg N m^-3 
  QN1 = traits[5, "average"] # algae cell N quota in mg N mg^-1 C^-1 
)
names(params.mich) <- c("SA", "zmix", "Pin", "Nin", "I0", 
                        "kBg", "kA", "umax1", "lA", "v", 
                        "KLight", "KP1",  "QP1", "KN1",  "QN1")
names(params.mich)
params.mich <- unlist(params.mich)

```

Chunk sets model parameters for dynamic model

```{r droop model parameter setup}
params.droop <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3

  # light parameters
  I0 = 400, # surface light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
 
  # algae physiology parameters
  umax1 = traits[12, "average"],
  lA=0.1,			# mortality rate day-1
  v= 0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "average"], # light half sat constant 
  KP1 = traits[2, "average"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  minQP1 = traits[6, "average"], # algae cell P quota in mg P mg^-1 C^-1 f
  upP1 = traits[4, "average"], # max uptake rate P per day in mg P mg C^-1 day^-1 
  KN1 = traits[1, "average"] * 1000, # nitrogen half sat constant in mg N m^-3 
  minQN1 = traits[5, "average"], # algae cell N quota in mg N mg^-1 C^-1 f
  upN1 = traits[3, "average"] # max uptake rate N per day in mg N mg C^-1 day^-1 
)



names(params.droop) <- c("SA", "zmix", "Pin", "Nin", "I0", "kBg", "kA",
                             "umax1", "lA", "v", "KLight", 
                             "KP1", "minQP1", "upP1", "KN1",
                             "minQN1", "upN1")
names(params.droop)
params.droop <- unlist(params.droop)
```

## Run baseline simulations

### Michaelis Menten model

Iterate over nutrient loads to generate baseline GPP values

```{r michaelis menten baselines}

baselines.mich <- lapply(1:nrow(loads), function(i) {
  params.mich["Pin"] = loads[i, "Pin"]
  params.mich["Nin"] = loads[i, "Nin"]
  y <- c("A1" = 100,
         "P" = loads[i, "Pin"],
         "N" = loads[i, "Nin"])
  
  run <- ode(y, times, parms = params.mich, func = mich.single)
  return(run[max(times),])
  
})

baselines.mich <- do.call(rbind, baselines.mich)
baselines.mich <- as_data_frame(baselines.mich)
baselines.mich$Pin <- loads$Pin
baselines.mich$Nin <- loads$Nin

```

### Droop models

Iterate over nutrient loads to generate baseline GPP values

```{r}
baselines.droop <- lapply(1:nrow(loads), function(i) {
  params.droop["Pin"] = loads[i, "Pin"]
  params.droop["Nin"] = loads[i, "Nin"]
  y <- c("A1" = 100,
         "P" = loads[i, "Pin"],
         "N" = loads[i, "Nin"],
         "QP1" = 0.015,
         "QN1" = 0.1)
  
  run <- ode(y, times, parms = params.droop, func = droop.single)
  return(run[max(times),])
  
})

baselines.droop <- do.call(rbind, baselines.droop)
baselines.droop <- as_data_frame(baselines.droop)
baselines.droop$Pin <- loads$Pin
baselines.droop$Nin <- loads$Nin


```

## Sensitivity analysis

### Michaelis-Menten models

Increase and decrease algal physiology parameters by +/-10% and store the output. Calculate log10 response ratio as an indicator of change (i.e. log10(new value/baseline value))

Code chunk below varies parameters by +10%

```{r michales menten pt1}
# iterate over parameters
sim.mich.1 <- lapply(list("KP1","QP1", "KN1", "QN1"), function(f) {
  params.mich[f] <- params.mich[f] * 1.1
  # iterate over loads
  sim.1 <- lapply(1:nrow(loads), function(i) {
    params.mich["Pin"] = loads[i, "Pin"]
    params.mich["Nin"] = loads[i, "Nin"]
    y <- c("A1" = 100, "P" = loads[i, "Pin"], "N" = loads[i, "Nin"])
    run <- ode(y, times, parms = params.mich, func = mich.single)
    return(run[max(times),])
  })
  # add meta-data
  sim.1 <- do.call(rbind, sim.1)
  sim.1 <- as_data_frame(sim.1)
  sim.1$Pin <- loads$Pin
  sim.1$Nin <- loads$Nin
  # add info on the parameter that was varied
  sim.1$param <- f
  return(sim.1)
})
sim.mich.1 <- do.call(rbind, sim.mich.1)
sim.mich.1$scenario <- "+10%"


```

Code chunk below varies parameters by -10%

```{r michales menten pt2}
# iterate over parameters
sim.mich.2 <- lapply(list("KP1", "QP1", "KN1", "QN1"), function(f) {
  params.mich[f] <- params.mich[f] * 0.9
  # iterate over loads
  sim.1 <- lapply(1:nrow(loads), function(i) {
    params.mich["Pin"] = loads[i, "Pin"]
    params.mich["Nin"] = loads[i, "Nin"]
    y <- c("A1" = 100, "P" = loads[i, "Pin"], "N" = loads[i, "Nin"])
    run <- ode(y, times, parms = params.mich, func = mich.single)
    return(run[max(times),])
  })
  # add meta-data
  sim.1 <- do.call(rbind, sim.1)
  sim.1 <- as_data_frame(sim.1)
  sim.1$Pin <- loads$Pin
  sim.1$Nin <- loads$Nin
  sim.1$param <- f
  return(sim.1)
})
sim.mich.2 <- do.call(rbind, sim.mich.2)
sim.mich.2$scenario <- "-10%"


```

merge data sets for plotting and calculate log10 response ratios

```{r merge data sets and fix names}

# merge scenarios
sim.mich <- rbind(sim.mich.1, sim.mich.2)
colnames(sim.mich) <- c("time", "A1.sim", "P.sim", "N.sim", "GPP.sim",
                        "Pin", "Nin", "param", "scenario")
sim.mich <- merge(sim.mich, baselines.mich, 
                  by = c("Pin", "Nin", "time"))
# calculate percent change relative to baseline
sim.mich$change2baseline <- sim.mich$GPP.sim * 100/sim.mich$GPP - 100
sim.mich$log10RR <- log10(sim.mich$GPP.sim /sim.mich$GPP)

# determine min/max change
# note that this code doesn't tell us about direction of change, only the magnitude
sim.mich.metrics <- sim.mich %>%
  mutate(log10RR =  abs(log10RR)) %>% 
  pivot_wider(id_cols = c(Pin, Nin, scenario),
              names_from = param, 
              values_from = log10RR)
colnames(sim.mich.metrics)
sim.mich.metrics[,-c(1, 2, 3)] <- apply(sim.mich.metrics[,-c(1, 2, 3)], 2, abs)
# drop first two rows as they contain NANs
sim.mich.metrics <- sim.mich.metrics[-c(1, 2),]
sim.mich.metrics$max.change <- colnames(sim.mich.metrics[-c(1,2,3)])[apply(sim.mich.metrics[,-c(1,2,3)], 1, which.max)]


```

### Droop models

Increase and decrease algal physiology parameters by +/-10% and store the output. Calculate log10 response ratio as an indicator of change (i.e. log10(new value/baseline value))

Code chunk below varies parameters by +10%


```{r droop pt 1}
# iterate over parameters
sim.droop.1 <- lapply(list("KP1","KN1", "upP1", "upN1", 
                           "minQP1", "minQN1"), function(f) {
  params.droop[f] <- params.droop[f] * 1.1
  # iterate over loads
  sim.1 <- lapply(1:nrow(loads), function(i) {
    params.droop["Pin"] = loads[i, "Pin"]
    params.droop["Nin"] = loads[i, "Nin"]
    y <- c("A1" = 100, "P" = loads[i, "Pin"], "N" = loads[i, "Nin"],
           "QP1" = 0.015,"QN1" = 0.1)
    run <- ode(y, times, parms = params.droop, func = droop.single)
    return(run[max(times),])
  })
  # add meta-data
  sim.1 <- do.call(rbind, sim.1)
  sim.1 <- as_data_frame(sim.1)
  sim.1$Pin <- loads$Pin
  sim.1$Nin <- loads$Nin
  # add info on the parameter that was varied
  sim.1$param <- f
  return(sim.1)
})
sim.droop.1 <- do.call(rbind, sim.droop.1)
sim.droop.1$scenario <- "+10%"

```

decrease paramter value by 10%

```{r droop pt2}

# iterate over parameters
sim.droop.2 <- lapply(list("KP1","KN1", "upP1", "upN1", 
                           "minQP1", "minQN1"), function(f) {
  params.droop[f] <- params.droop[f] * 0.9
  # iterate over loads
  sim.1 <- lapply(1:nrow(loads), function(i) {
    params.droop["Pin"] = loads[i, "Pin"]
    params.droop["Nin"] = loads[i, "Nin"]
    y <- c("A1" = 100, "P" = loads[i, "Pin"], "N" = loads[i, "Nin"],
           "QP1" = 0.015,"QN1" = 0.1)
    run <- ode(y, times, parms = params.droop, func = droop.single)
    return(run[max(times),])
  })
  # add meta-data
  sim.1 <- do.call(rbind, sim.1)
  sim.1 <- as_data_frame(sim.1)
  sim.1$Pin <- loads$Pin
  sim.1$Nin <- loads$Nin
  # add info on the parameter that was varied
  sim.1$param <- f
  return(sim.1)
})
sim.droop.2 <- do.call(rbind, sim.droop.2)
sim.droop.2$scenario <- "-10%"

```

merge data sets for plotting

```{r merge data sets and fix names droop model}
# merge scenarios
sim.droop <- rbind(sim.droop.1, sim.droop.2)
colnames(sim.droop) <- c("time", "A1.sim", "P.sim", "N.sim", "GPP.sim",
                        "QP.sim", "QN.sim", "Pin", "Nin", 
                        "param", "scenario")
sim.droop <- merge(sim.droop, baselines.droop, 
                  by = c("Pin", "Nin", "time"))
# calculate percent change relative to baseline
# for algal biomass
sim.droop$change2baseline.gpp <- sim.droop$GPP.sim * 100/sim.droop$GPP - 100
sim.droop$log10RR.gpp <- log10(sim.droop$GPP.sim/sim.droop$GPP)
# for cell P content
sim.droop$log10RR.QP <- log10(sim.droop$QP.sim/sim.droop$QP1)
# for cell N content
sim.droop$log10RR.QN <- log10(sim.droop$QN.sim/sim.droop$QN1)

# determine min/max change
# note that this code doesn't tell us about direction of change, only the magnitude
sim.droop.metrics.gpp <- sim.droop %>% 
  mutate(log10RR.gpp =  abs(log10RR.gpp)) %>% 
  pivot_wider(id_cols = c(Pin, Nin, scenario),
              names_from = param, 
              values_from = log10RR.gpp)
colnames(sim.droop.metrics.gpp)
sim.droop.metrics.gpp[,-c(1, 2, 3)] <- apply(sim.droop.metrics.gpp[,-c(1, 2, 3)], 2, abs)
sim.droop.metrics.gpp$max.change <- colnames(sim.droop.metrics.gpp[-c(1,2,3)])[apply(sim.droop.metrics.gpp[,-c(1,2,3)], 1, which.max)]

# for QP
sim.droop.metrics.QP <- sim.droop %>% 
  mutate(log10RR.QP =  abs(log10RR.QP)) %>% 
  pivot_wider(id_cols = c(Pin, Nin, scenario),
              names_from = param, 
              values_from = log10RR.QP)
colnames(sim.droop.metrics.QP)
sim.droop.metrics.QP[,-c(1, 2, 3)] <- apply(sim.droop.metrics.QP[,-c(1, 2, 3)], 2, abs)
sim.droop.metrics.QP$max.change <- colnames(sim.droop.metrics.QP[-c(1,2,3)])[apply(sim.droop.metrics.QP[,-c(1,2,3)], 1, which.max)]

# for QN
sim.droop.metrics.QN <- sim.droop %>%
  mutate(log10RR.QN =  abs(log10RR.QN)) %>%
  pivot_wider(id_cols = c(Pin, Nin, scenario),
              names_from = param, 
              values_from = log10RR.QN)
colnames(sim.droop.metrics.QN)
sim.droop.metrics.QN[,-c(1, 2, 3)] <- apply(sim.droop.metrics.QN[,-c(1, 2, 3)], 2, abs)
sim.droop.metrics.QN$max.change <- colnames(sim.droop.metrics.QN[-c(1,2,3)])[apply(sim.droop.metrics.QN[,-c(1,2,3)], 1, which.max)]

```

save files for easy loading in future

```{r save files}

# 
# save(list = c("sim.mich", "sim.mich.metrics", "sim.droop", "sim.droop.metrics.gpp",
#               "sim.droop.metrics.QN", "sim.droop.metrics.QP"),
#      file = "sensitivity_analysis_temp_file.Rdata")
# load("sensitivity_analysis_temp_file.Rdata")


```

## Summary

### Michaelis-Menten

create plot of log10 response ratio/GPP in response to change in parameter value

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

mich.menten.1 <- sim.mich %>%
  #filter(Pin > 20, Nin > 20) %>% 
  ggplot(aes(Pin, Nin, fill = log10RR)) + 
  geom_raster() + 
 # Redfield
  geom_abline(intercept = 0, slope =  c(16*14.007/30.974), 
              lty = "dashed", col = "white", lwd = 1) +
  # Downing and McCauley
  geom_abline(intercept = 0, slope  = c(14, 30), 
              lty = "dashed", col = "black", lwd = 1) + 
  facet_grid(scenario ~ param) + 
 scale_fill_viridis_c() + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1), 
       fill = expression("log"[10] ~ "RR"))

mich.menten.1 

# save_plot("figures/sensitivity_analysis_mm.png", mich.menten.1, 
#           base_height = 4, base_width = 9, dpi = 400)

```

plot which trait generates the largest change in GPP

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

mich.menten.2 <- sim.mich.metrics %>%
  ggplot(aes(Pin, Nin, fill = max.change)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_wrap(scenario~.,ncol = 2) + 
  scale_fill_viridis_d(option = "H") + 
  scale_x_continuous(breaks = c(10, 250, 500)) + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1), 
       fill = "max. change")


mich.menten.2
```


### Droop models

create plot of log10 response ratio/GPP in response to change in parameter value
note: there is something weird going on here because all simulations come back with the same result...not sure why this is happening as does not occur in the static model (maybe a result of model structure?)

```{r dpi=500, fig.width=7, fig.height = 3, include=T}
droop.gpp <- sim.droop %>%
  ggplot(aes(Pin, Nin, fill = log10RR.gpp)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_grid(scenario ~ param) + 
  scale_fill_viridis_c() + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1), 
       fill = expression("log"[10] ~ "RR GPP"))

droop.gpp

```

plot change in cell QP 

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

droop.QP <- sim.droop %>%
  ggplot(aes(Pin, Nin, fill = log10RR.QP)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_grid(scenario ~ param) + 
  scale_fill_viridis_c() + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1), 
       fill = expression("log"[10] ~ "RR QP"))

droop.QP

```

plot change in cell QN 

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

droop.QN <- sim.droop %>%
  ggplot(aes(Pin, Nin, fill = log10RR.QN)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_grid(scenario ~ param) + 
  scale_fill_viridis_c() + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1), 
       fill = expression("log"[10] ~ "RR QN"))

droop.QN

```
```
plot which variable generates largest change in GPP

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

droop.max.gpp <- sim.droop.metrics.gpp %>%
  ggplot(aes(Pin, Nin, fill = max.change)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_wrap(scenario~., ncol = 2) + 
  scale_fill_viridis_d() + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1), 
       fill = expression("max. change GPP"))

droop.max.gpp

```

plot which variable results in largest change in QN

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

droop.max.QN <- sim.droop.metrics.QN %>%
  ggplot(aes(Pin, Nin, fill = max.change)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_wrap(scenario~., ncol = 2) + 
  scale_fill_viridis_d() + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1), 
       fill = expression("max. change QN"))

droop.max.QN
```

plot which variable results in largest change in QP

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

droop.max.QP <- sim.droop.metrics.QP %>%
  ggplot(aes(Pin, Nin, fill = max.change)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_wrap(scenario~., ncol = 2) + 
  scale_fill_viridis_d() + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1), 
       fill = expression("max. change QP"))

droop.max.QP
```

## Prt 2 of sensitivity analysis

Run models across grids of inflow N and P while varying trait parameters simultaneously

Still in progress so code isn't completed or commented very well.

```{r}
# new model grid with inflow and trait parameter data
new.grid <- expand.grid(Pin =  c(20, 50, 100),# seq(5, 100, 25 ) ,
                        NP_inflow = c(5:10),
                        KP1 = seq(1, 10, 2), # 1
                        #QP1 = seq(0.01, 0.1, 0.01), # 0.1
                       QP1 = c(0.01, 0.05, 0.1),
                       KN1 = seq(5, 50, 5), # 5
                        QN1 = c(0.01, 0.05, 0.1))
                        #QN1 = seq(0.01, 0.1, 0.01)) # 0.1
new.grid$Nin <- new.grid$Pin * new.grid$NP_inflow

# run model
mm.grid.analysis <- lapply(1:nrow(new.grid), function(i) {
  params.mich["Pin"] = new.grid[i, "Pin"]
  params.mich["Nin"] = new.grid[i, "Nin"]
  params.mich["KP1"] = new.grid[i, "KP1"]
  params.mich["QP1"] = new.grid[i, "QP1"]
  params.mich["KN1"] = new.grid[i, "KN1"]
  params.mich["QN1"] = new.grid[i, "QN1"]
  y <- c("A1" = 100,
         "P" = new.grid[i, "Pin"],
         "N" = new.grid[i, "Nin"])
  
  run <- ode(y, times, parms = params.mich, func = mich.single)
  return(run[max(times),])
  
})


# add meta-data
mm.grid.analysis <- do.call(rbind, mm.grid.analysis)
mm.grid.analysis <- as_data_frame(mm.grid.analysis)
mm.grid.analysis$Pin <- new.grid$Pin
mm.grid.analysis$Nin <- new.grid$Nin
mm.grid.analysis$NP_inflow <- new.grid$NP_inflow
mm.grid.analysis$KP1 <- new.grid$KP1
mm.grid.analysis$QP1 <- new.grid$QP1
mm.grid.analysis$KN1 <- new.grid$KN1
mm.grid.analysis$QN1 <- new.grid$QN1


# plot
mm.grid.plt <- mm.grid.analysis %>% 
  select(GPP, Pin, NP_inflow, KP1, KN1, QP1, QN1) %>% 
  gather("Trait", "Value", -GPP,  -Pin, -NP_inflow) %>%
  ggplot() +
  geom_point(aes(x = Value, y = GPP, col = Pin, alpha = NP_inflow), size = 2) + 
  facet_wrap(Trait~., scales = "free_x") + 
  scale_color_viridis_c() + 
  labs(x = "Trait value", y = expression("GPP mg C L"^-1 ~ "day"^-1), 
       col = expression("Inflow P ug L"^-1), alpha = "Inflow N:P") + 
  theme(legend.position="bottom", legend.box="vertical", legend.margin=margin())

mm.grid.plt

save_plot("figures/grid_analysis_mm.png", mm.grid.plt, 
          base_height = 4, base_width = 5, dpi = 400)

```
