---
title: "Sensitivity analysis model parameters noLight"
author: "Daniel Gschwentner"
date: "2024-08-20"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(include = F)
```

## Overview

Code to perform sensitivity analysis of algal physiology parameters for Michaelis-Menten and Droop models.

## Setup

```{r packages, echo = F, message=F, warning=F, results = "hide"}

pck <- c("deSolve", "tidyverse", "cowplot", "ggsci")
lapply(pck, require, character.only = T)
theme_set(theme_cowplot() + theme(legend.justification = "center"))
# load ODE models 
# saved in external files for convenience
# Michalis-Menten model
source("models/mich_single_noLight.R") # michaelis menten kinetics, one algae species; model 1 in Carly's framework
# Droop model
source("models/droop_single_noLight.R") # droop model, one algae species; model 3 in Carly's framework
```

For the models I am using the average parameter values from the table below. These parameters are from [Edwards et al., 2016](https://figshare.com/articles/dataset/Data_Paper_Data_Paper/3562857?file=5635515).

```{r load traits, echo = F, include=T}
# trait data
# median values
traits <- read_csv("data4input/phyto_traits4models_21June2024.csv")[,-1]
knitr::kable(traits, caption = "Trait parameters")

```

### Model setup

```{r create grid of nutrient inflow scenarios}

# timesteps
times <- 1:2000
# for troubleshooting
times <- 1:1000
# loads
# Olson&Jones use 20 to 500 for P. Use similar values
# for TP: TP from 2018-219 NLA stream assement ranges from 2 to 950 ugL with 25th and 7th percentiles of 23 and 133 ugL. DG, August 2024
# for TN: TN from 2018-2019 NLA Stream Assessment ranges from 22 to 22,000 ugL with 25th and 75th percentiles of 300 and 14,000 ug L; DG, August 2024
loads <- expand.grid(Pin = seq(20, 500, 50 ) ,
                     Nin = seq(100,15000,500))

# for trouble-shooting use a smaller grid
loads <- expand.grid(Pin = c(20, 50, 100, 500) ,
                     Nin = c(500, 1000, 2000, 5000))

```

```{r michaelis-menten model setup}

params.mich <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3
  
  # light parameters
  I0 = 400, # incident light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl

  # algae physiology parameters
  umax1 = traits[12, "average"],
  lA=0.1,			# mortality rate day-1
  v=0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "average"], # light half sat constant 
  KP1 = traits[2, "average"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  QP1 = traits[6, "average"], # algae cell P quota in mg P mg^-1 C^-1
  KN1 = traits[1, "average"] * 1000, # nitrogen half sat constant in mg N m^-3 
  QN1 = traits[5, "average"] # algae cell N quota in mg N mg^-1 C^-1 
)
names(params.mich) <- c("SA", "zmix", "Pin", "Nin", "I0", 
                        "kBg", "kA", "umax1", "lA", "v", 
                        "KLight", "KP1",  "QP1", "KN1",  "QN1")
names(params.mich)
params.mich <- unlist(params.mich)

```

```{r droop model parameter setup}
params.droop <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3

  # light parameters
  I0 = 400, # surface light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
 
  # algae physiology parameters
  umax1 = traits[12, "average"],
  lA=0.1,			# mortality rate day-1
  v= 0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "average"], # light half sat constant 
  KP1 = traits[2, "average"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  minQP1 = traits[6, "average"], # algae cell P quota in mg P mg^-1 C^-1 f
  upP1 = traits[4, "average"], # max uptake rate P per day in mg P mg C^-1 day^-1 
  KN1 = traits[1, "average"] * 1000, # nitrogen half sat constant in mg N m^-3 
  minQN1 = traits[5, "average"], # algae cell N quota in mg N mg^-1 C^-1 f
  upN1 = traits[3, "average"] # max uptake rate N per day in mg N mg C^-1 day^-1 
)



names(params.droop) <- c("SA", "zmix", "Pin", "Nin", "I0", "kBg", "kA",
                             "umax1", "lA", "v", "KLight", 
                             "KP1", "minQP1", "upP1", "KN1",
                             "minQN1", "upN1")
names(params.droop)
params.droop <- unlist(params.droop)
```

## Run baseline models

### Michaelis Menten model

```{r michaelis menten baselines}

baselines.mich <- lapply(1:nrow(loads), function(i) {
  params.mich["Pin"] = loads[i, "Pin"]
  params.mich["Nin"] = loads[i, "Nin"]
  y <- c("A1" = 100,
         "P" = loads[i, "Pin"],
         "N" = loads[i, "Nin"])
  
  run <- ode(y, times, parms = params.mich, func = mich.single)
  return(run[max(times),])
  
})

baselines.mich <- do.call(rbind, baselines.mich)
baselines.mich <- as_data_frame(baselines.mich)
baselines.mich$Pin <- loads$Pin
baselines.mich$Nin <- loads$Nin

```

### Droop models

```{r}
baselines.droop <- lapply(1:nrow(loads), function(i) {
  params.droop["Pin"] = loads[i, "Pin"]
  params.droop["Nin"] = loads[i, "Nin"]
  y <- c("A1" = 100,
         "P" = loads[i, "Pin"],
         "N" = loads[i, "Nin"],
         "QP1" = 0.015,
         "QN1" = 0.1)
  
  run <- ode(y, times, parms = params.droop, func = droop.single)
  return(run[max(times),])
  
})

baselines.droop <- do.call(rbind, baselines.droop)
baselines.droop <- as_data_frame(baselines.droop)
baselines.droop$Pin <- loads$Pin
baselines.droop$Nin <- loads$Nin


```

## Sensitivity analysis

### Michaelis-Menten models

Increase and decrease algal physiology parameters by +/-10% and store the output. Calculate the change relative to baseline conditions across TN and TP loads.

Code chunk below varies parameters by +10%

```{r michales menten pt1}
# iterate over parameters
sim.mich.1 <- lapply(list("KP1","QP1", "KN1", "QN1"), function(f) {
  params.mich[f] <- params.mich[f] * 1.1
  # iterate over loads
  sim.1 <- lapply(1:nrow(loads), function(i) {
    params.mich["Pin"] = loads[i, "Pin"]
    params.mich["Nin"] = loads[i, "Nin"]
    y <- c("A1" = 100, "P" = loads[i, "Pin"], "N" = loads[i, "Nin"])
    run <- ode(y, times, parms = params.mich, func = mich.single)
    return(run[max(times),])
  })
  # add meta-data
  sim.1 <- do.call(rbind, sim.1)
  sim.1 <- as_data_frame(sim.1)
  sim.1$Pin <- loads$Pin
  sim.1$Nin <- loads$Nin
  # add info on the parameter that was varied
  sim.1$param <- f
  return(sim.1)
})
sim.mich.1 <- do.call(rbind, sim.mich.1)
sim.mich.1$scenario <- "+10%"


```

Code chunk below varies parameters by -10%\
(there is probably a more elegant way to do this but this simple approach works for now.

```{r michales menten pt2}
# iterate over parameters
sim.mich.2 <- lapply(list("KP1", "QP1", "KN1", "QN1"), function(f) {
  params.mich[f] <- params.mich[f] * 0.9
  # iterate over loads
  sim.1 <- lapply(1:nrow(loads), function(i) {
    params.mich["Pin"] = loads[i, "Pin"]
    params.mich["Nin"] = loads[i, "Nin"]
    y <- c("A1" = 100, "P" = loads[i, "Pin"], "N" = loads[i, "Nin"])
    run <- ode(y, times, parms = params.mich, func = mich.single)
    return(run[max(times),])
  })
  # add meta-data
  sim.1 <- do.call(rbind, sim.1)
  sim.1 <- as_data_frame(sim.1)
  sim.1$Pin <- loads$Pin
  sim.1$Nin <- loads$Nin
  sim.1$param <- f
  return(sim.1)
})
sim.mich.2 <- do.call(rbind, sim.mich.2)
sim.mich.2$scenario <- "-10%"


```

The code chunk below re-formats the data and merges the simulations with the baseline runs. I've calculated the relative change from the simulation to the baseline for a given TN and TP load as

$$
\Delta_{biomass\%} = \frac{sensitivity_i * 100\%}{baseline}
$$

where $\Delta_{biomass}$ is the relative change in biomass, baseline is the baseline biomass, and sensitivity~i~ is the biomass for a given parameter in the sensitivity analysis.

In addition, I calculated which parameter results in the maximum change in biomass relative to the baseline. It is important to note that this doesn't tell us the direction of change just the magnitude of change.

```{r merge data sets and fix names}

# merge scenarios
sim.mich <- rbind(sim.mich.1, sim.mich.2)
colnames(sim.mich) <- c("time", "A1.sim", "P.sim", "N.sim", "GPP.sim",
                        "Pin", "Nin", "param", "scenario")
sim.mich <- merge(sim.mich, baselines.mich, 
                  by = c("Pin", "Nin", "time"))
# calculate percent change relative to baseline
sim.mich$change2baseline <- sim.mich$GPP.sim * 100/sim.mich$GPP - 100

# determine min/max change
# note that this code doesn't tell us about direction of change, only the magnitude
sim.mich.metrics <- sim.mich %>%
  mutate(change2baseline2 =  abs(change2baseline)) %>% 
  pivot_wider(id_cols = c(Pin, Nin, scenario),
              names_from = param, 
              values_from = change2baseline2) 
colnames(sim.mich.metrics)
sim.mich.metrics[,-c(1, 2, 3)] <- apply(sim.mich.metrics[,-c(1, 2, 3)], 2, abs)
# drop first two rows as they contain NANs
sim.mich.metrics <- sim.mich.metrics[-c(1, 2),]
sim.mich.metrics$max.change <- colnames(sim.mich.metrics[-c(1,2,3)])[apply(sim.mich.metrics[,-c(1,2,3)], 1, which.max)]


```

### Droop models

Increase and decrease algal physiology parameters by +/-10% and store the output. Calculate the change relative to baseline conditions across TN and TP loads.

```{r droop pt 1}
# iterate over parameters
sim.droop.1 <- lapply(list("KP1","KN1", "upP1", "upN1", 
                           "minQP1", "minQN1"), function(f) {
  params.droop[f] <- params.droop[f] * 1.1
  # iterate over loads
  sim.1 <- lapply(1:nrow(loads), function(i) {
    params.droop["Pin"] = loads[i, "Pin"]
    params.droop["Nin"] = loads[i, "Nin"]
    y <- c("A1" = 100, "P" = loads[i, "Pin"], "N" = loads[i, "Nin"],
           "QP1" = 0.015,"QN1" = 0.1)
    run <- ode(y, times, parms = params.droop, func = droop.single)
    return(run[max(times),])
  })
  # add meta-data
  sim.1 <- do.call(rbind, sim.1)
  sim.1 <- as_data_frame(sim.1)
  sim.1$Pin <- loads$Pin
  sim.1$Nin <- loads$Nin
  # add info on the parameter that was varied
  sim.1$param <- f
  return(sim.1)
})
sim.droop.1 <- do.call(rbind, sim.droop.1)
sim.droop.1$scenario <- "+10%"

```

```{r droop pt2}

# iterate over parameters
sim.droop.2 <- lapply(list("KP1","KN1", "upP1", "upN1", 
                           "minQP1", "minQN1"), function(f) {
  params.droop[f] <- params.droop[f] * 0.9
  # iterate over loads
  sim.1 <- lapply(1:nrow(loads), function(i) {
    params.droop["Pin"] = loads[i, "Pin"]
    params.droop["Nin"] = loads[i, "Nin"]
    y <- c("A1" = 100, "P" = loads[i, "Pin"], "N" = loads[i, "Nin"],
           "QP1" = 0.015,"QN1" = 0.1)
    run <- ode(y, times, parms = params.droop, func = droop.single)
    return(run[max(times),])
  })
  # add meta-data
  sim.1 <- do.call(rbind, sim.1)
  sim.1 <- as_data_frame(sim.1)
  sim.1$Pin <- loads$Pin
  sim.1$Nin <- loads$Nin
  # add info on the parameter that was varied
  sim.1$param <- f
  return(sim.1)
})
sim.droop.2 <- do.call(rbind, sim.droop.2)
sim.droop.2$scenario <- "-10%"

```

The code chunk below re-formats the data and merges the simulations with the baseline runs. I've calculated the relative change from the simulation to the baseline for a given TN and TP load as

$$ \Delta_{biomass\%} = \frac{sensitivity_i * 100%}{baseline} $$

where $\Delta_{biomass}$ is the relative change in biomass, baseline is the baseline biomass, and sensitivity~i~ is the biomass for a given parameter in the sensitivity analysis.

In addition, I calculated which parameter results in the maximum change in biomass relative to the baseline. It is important to note that this doesn't tell us the direction of change just the magnitude of change.

```{r merge data sets and fix names droop model}
# merge scenarios
sim.droop <- rbind(sim.droop.1, sim.droop.2)
colnames(sim.droop) <- c("time", "A1.sim", "P.sim", "N.sim", "GPP.sim",
                        "QP.sim", "QN.sim", "Pin", "Nin", 
                        "param", "scenario")
sim.droop <- merge(sim.droop, baselines.droop, 
                  by = c("Pin", "Nin", "time"))
# calculate percent change relative to baseline
# for algal biomass
sim.droop$change2baseline.gpp <- sim.droop$GPP.sim * 100/sim.droop$GPP - 100
# for cell P content
sim.droop$change2baseline.QP <- sim.droop$QP.sim * 100/sim.droop$QP1 - 100
# for cell N content
sim.droop$change2baseline.QN <- sim.droop$QN.sim * 100/sim.droop$QN1 - 100

# determine min/max change
# note that this code doesn't tell us about direction of change, only the magnitude
sim.droop.metrics.gpp <- sim.droop %>% 
  mutate(change2baseline2 =  abs(change2baseline.gpp)) %>% 
  pivot_wider(id_cols = c(Pin, Nin, scenario),
              names_from = param, 
              values_from = change2baseline2)
colnames(sim.droop.metrics.gpp)
sim.droop.metrics.gpp[,-c(1, 2, 3)] <- apply(sim.droop.metrics.gpp[,-c(1, 2, 3)], 2, abs)
sim.droop.metrics.gpp$max.change <- colnames(sim.droop.metrics.gpp[-c(1,2,3)])[apply(sim.droop.metrics.gpp[,-c(1,2,3)], 1, which.max)]

# for QP
sim.droop.metrics.QP <- sim.droop %>% 
  mutate(change2baseline2 =  abs(change2baseline.QP)) %>% 
  pivot_wider(id_cols = c(Pin, Nin, scenario),
              names_from = param, 
              values_from = change2baseline2)
colnames(sim.droop.metrics.QP)
sim.droop.metrics.QP[,-c(1, 2, 3)] <- apply(sim.droop.metrics.QP[,-c(1, 2, 3)], 2, abs)
sim.droop.metrics.QP$max.change <- colnames(sim.droop.metrics.QP[-c(1,2,3)])[apply(sim.droop.metrics.QP[,-c(1,2,3)], 1, which.max)]

# for QN
sim.droop.metrics.QN <- sim.droop %>%
  mutate(change2baseline2 =  abs(change2baseline.QN)) %>%
  pivot_wider(id_cols = c(Pin, Nin, scenario),
              names_from = param, 
              values_from = change2baseline2)
colnames(sim.droop.metrics.QN)
sim.droop.metrics.QN[,-c(1, 2, 3)] <- apply(sim.droop.metrics.QN[,-c(1, 2, 3)], 2, abs)
sim.droop.metrics.QN$max.change <- colnames(sim.droop.metrics.QN[-c(1,2,3)])[apply(sim.droop.metrics.QN[,-c(1,2,3)], 1, which.max)]

```

```{r save files}


save(list = c("sim.mich", "sim.mich.metrics", "sim.droop", "sim.droop.metrics.gpp",
              "sim.droop.metrics.QN", "sim.droop.metrics.QP"),
     file = "sensitivity_analysis_temp_file.Rdata")
load("sensitivity_analysis_temp_file.Rdata")


```

## Summary

### Michaelis-Menten

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

mich.menten.1 <- sim.mich %>%
  #filter(Pin > 20, Nin > 20) %>% 
  ggplot(aes(Pin, Nin, fill = change2baseline)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_grid(scenario ~ param) + 
  #scale_fill_viridis_c(option = "H") + 
  # scale_fill_viridis_b(breaks = c(
  #   -100, -50, 0, 10, 50, 100, 500, 1000
  # ), option = "H") + 
 scale_fill_viridis_c() + 
  labs(x = "P in ppm", y = "N in ppm", fill = "% change")

mich.menten.1 

```

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

mich.menten.2 <- sim.mich.metrics %>%
  ggplot(aes(Pin, Nin, fill = max.change)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_wrap(scenario~.,ncol = 2) + 
  scale_fill_viridis_d(option = "H") + 
  scale_x_continuous(breaks = c(10, 250, 500)) + 
  labs(x = "P in ppm", y = "N in ppm", fill = "max. change")

mich.menten.2
```

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

# mich.menten.3 <- sim.mich %>%
#     ggplot(aes(param, change2baseline)) + 
#     geom_violin() + 
#     facet_wrap(scenario~., scales = "free") + 
#     labs(x = NULL, y = "relative change")
# 
# mich.menten.3

```

#### Conclusion for Michaelis-Menten models

### Droop models

```{r dpi=500, fig.width=7, fig.height = 3, include=T}
droop.gpp <- sim.droop %>%
  ggplot(aes(Pin, Nin, fill = change2baseline.gpp)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_grid(scenario ~ param) + 
  #scale_fill_viridis_c(option = "H") + 
    scale_fill_viridis_b(breaks = c(
    -100, -50, 0, 10, 50, 100, 500, 1000
  ), option = "H") + 
  scale_x_continuous(breaks = c(10, 250, 500)) + 
  labs(x = "P in ppm", y = "N in ppm", fill = "% change")
droop.gpp

```

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

droop.QP <- sim.droop %>%
  ggplot(aes(Pin, Nin, fill = change2baseline.QP)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_grid(scenario ~ param) + 
  #scale_fill_viridis_c(option = "H") + 
    scale_fill_viridis_b(breaks = c(
    -100, -50, 0, 10, 50, 100, 500, 1000
  ), option = "H") + 
  scale_x_continuous(breaks = c(10, 250, 500)) + 
  labs(x = "P in ppm", y = "N in ppm", fill = "% change")

droop.QP
```

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

droop.QN <- sim.droop %>%
  ggplot(aes(Pin, Nin, fill = change2baseline.QN)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_grid(scenario ~ param) + 
  #scale_fill_viridis_c(option = "H") + 
    scale_fill_viridis_b(breaks = c(
    -100, -50, 0, 10, 50, 100, 500, 1000
  ), option = "H") + 
  scale_x_continuous(breaks = c(10, 250, 500)) + 
  labs(x = "P in ppm", y = "N in ppm", fill = "% change")

droop.QN

```

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

droop.max.gpp <- sim.droop.metrics.gpp %>%
  ggplot(aes(Pin, Nin, fill = max.change)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_wrap(scenario~., ncol = 2) + 
  scale_fill_viridis_d(option = "H") + 
  scale_x_continuous(breaks = c(10, 250, 500)) + 
  labs(x = "P in ppm", y = "N in ppm", fill = "max. change")

droop.max.gpp

```

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

droop.max.QP <- sim.droop.metrics.QP %>%
  ggplot(aes(Pin, Nin, fill = max.change)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_grid(scenario~.) + 
  facet_wrap(scenario~., ncol = 2) + 
  scale_fill_viridis_d(option = "H") + 
  scale_x_continuous(breaks = c(10, 250, 500)) + 
  labs(x = "P in ppm", y = "N in ppm", fill = "max. change")

droop.max.QP

```

```{r dpi=500, fig.width=7, fig.height = 3, include=T}

droop.max.QN <- sim.droop.metrics.QN %>%
  ggplot(aes(Pin, Nin, fill = max.change)) + 
  geom_raster() + 
  geom_abline(intercept = 0, slope = (16 * 14.007)/30.974,
              lwd = 1, lty = "dashed", col = "white") + 
  facet_wrap(scenario~., ncol = 2) + 
  #scale_fill_viridis_d(option = "H") + 
  scale_x_continuous(breaks = c(10, 250, 500)) + 
  labs(x = "P in ppm", y = "N in ppm", fill = "max. change")

droop.max.QN

```

## Prt 2 of sensitivity analysis

-   Run models across grids of inflow N and P while varying trait parameters

```{r}
# new model grid with inflow and trait parameter data
new.grid <- expand.grid(Pin =  100,# seq(5, 100, 25 ) ,
                        Nin = 500, #seq(5,500, 50), 
                        KP1 = seq(1, 10, 5), # 1
                        QP1 = seq(0.01, 0.1, 0.5), # 0.1
                        KN1 = seq(5, 50, 10), # 5
                        QN1 = seq(0.01, 0.1, 0.5)) # 0.1

# run model
mm.grid.analysis <- lapply(1:nrow(new.grid), function(i) {
  params.mich["Pin"] = new.grid[i, "Pin"]
  params.mich["Nin"] = new.grid[i, "Nin"]
  params.mich["KP1"] = new.grid[i, "KP1"]
  params.mich["QP1"] = new.grid[i, "QP1"]
  params.mich["KN1"] = new.grid[i, "KN1"]
  params.mich["QN1"] = new.grid[i, "QN1"]
  y <- c("A1" = 100,
         "P" = new.grid[i, "Pin"],
         "N" = new.grid[i, "Nin"])
  
  run <- ode(y, times, parms = params.mich, func = mich.single)
  return(run[max(times),])
  
})

# add meta-data
mm.grid.analysis <- do.call(rbind, mm.grid.analysis)
mm.grid.analysis <- as_data_frame(mm.grid.analysis)
mm.grid.analysis$Pin <- new.grid$Pin
mm.grid.analysis$Nin <- new.grid$Nin
mm.grid.analysis$KP1 <- new.grid$KP1
mm.grid.analysis$QP1 <- new.grid$QP1
mm.grid.analysis$KN1 <- new.grid$KN1
mm.grid.analysis$QN1 <- new.grid$QN1

# plot
mm.grid.analysis %>% select(5:11) %>% 
  gather("Trait", "Value", -GPP, -Nin, -Pin) %>%
  ggplot(aes(Value, GPP)) + 
  geom_point() + 
  facet_wrap(Trait~., scales = "free_x")
```

```{r}
params.mich <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3
  
  # light parameters
  I0 = 400, # incident light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl

  # algae physiology parameters
  umax1 = traits[12, "average"],
  lA=0.1,			# mortality rate day-1
  v=0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "average"], # light half sat constant 
  KP1 = traits[2, "average"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  QP1 = traits[6, "average"], # algae cell P quota in mg P mg^-1 C^-1
  KN1 = traits[1, "average"] * 1000, # nitrogen half sat constant in mg N m^-3 
  QN1 = traits[5, "average"] # algae cell N quota in mg N mg^-1 C^-1 
)
names(params.mich) <- c("SA", "zmix", "Pin", "Nin", "I0", 
                        "kBg", "kA", "umax1", "lA", "v", 
                        "KLight", "KP1",  "QP1", "KN1",  "QN1")
names(params.mich)
params.mich <- unlist(params.mich)
```
