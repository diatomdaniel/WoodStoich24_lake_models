---
title: "framework GPP in lake ecosystems and phytoplankton stoichiometry"
author: "Daniel Gschwentner"
date: "2024-07-16"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

### Notes for Daniel, others

-   Use mass N:P ratios of 14, 30 to indicate N and P limitation; see (Downing and McCauley)[https://aslopubs.onlinelibrary.wiley.com/doi/pdf/10.4319/lo.1992.37.5.0936]


## Introduction

#### Objectives/research questions:

1.  How does lake gross primary production (GPP) vary across N and P loads and N:P stoichiometry?

2.  How does model structure (Michaelis-Menten/static stoichiometry vs. Droop/plastic stoichiometry) influence patterns of lake GPP across N and P loads and N:P stoichiometry?

3.  Explore how algae physiology influences GPP. Do physiological differences between main groups of algae (blue-greens, greens and diatoms) influence patterns of GPP in lakes? If so, what physiological variables are driving this variation (see also sensitivity analysis)?


## Setup

The chunks in this section load packages, models and data needed to run the models.

```{r setup environment and load traits, include=F, warning=F, message=F}
pck <- c("deSolve", "tidyverse", "cowplot", "ggthemes", "wesandersen", "ggpubr", "ggtern")
lapply(pck, require, character.only = T)
theme_set(theme_solarized(light=F) + 
          theme(text = element_text(color = "white"), 
                axis.text = element_text(color = "white"),
                axis.title = element_text(color = "white"),
                legend.text = element_text(color = "white"),
                legend.title = element_text(color = "white"),
                legend.justification = "center", 
                legend.position = "bottom"))

# load ODE models 
# saved in external files for convenience
# Michalis-Menten model
source("models/mich_single_noLight.R") # michaelis menten kinetics, one algae species; model 1 in Carly's framework
# Droop model
source("models/droop_single_noLight.R") # droop model, one algae species; model 3 in Carly's framework

# load file with phytoplankton traits
traits <- read_csv("data4input/phyto_traits4models_21June2024.csv")[,-1]

# set up scenarios
times <- 1:2000
times <- 1:1000 # for troubleshooting, initial runs

```

This chunk creates lists of parameters needed to run the models. In total, there are 8 parameter lists:

-   Michaelis-Menten model for average, diatom, greens and cyano traits

-   Droop model for average, diatom, greens and cyano traits

These parameter lists require the table with phytoplankton traits from [Edwards et al., 2016](https://figshare.com/articles/dataset/Data_Paper_Data_Paper/3562857?file=5635515) data set. The code will need to be updated if the format of the table changes in any way.

```{r set up phytoplankton traits, include=F, message=F, warning=F}

### averages

## michaelis-menten model for mean phytoplankton traits
params.mich <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3
  
  #light parameters
  I0 = 400, # incident light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl

  # algae physiology parameters
  umax1 = traits[12, "average"],
  lA=0.1,			# mortality rate day-1
  v=0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "average"], # light half sat constant 
  KP1 = traits[2, "average"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  QP1 = traits[6, "average"], # algae cell P quota in mg P mg^-1 C^-1
  KN1 = traits[1, "average"] * 1000, # nitrogen half sat constant in mg N m^-3 
  QN1 = traits[5, "average"] # algae cell N quota in mg N mg^-1 C^-1 
)
names(params.mich) <- c("SA", "zmix", "Pin", "Nin", "I0", 
                        "kBg", "kA", "umax1", "lA", "v", 
                        "KLight", "KP1",  "QP1", "KN1",  "QN1")
names(params.mich)
params.mich <- unlist(params.mich)

## droop model for mean phytoplankton traits

params.droop <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3

  # light parameters
  I0 = 400, # surface light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
 
  # algae physiology parameters
  umax1 = traits[12, "average"],
  lA=0.1,			# mortality rate day-1
  v= 0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "average"], # light half sat constant 
  KP1 = traits[2, "average"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  minQP1 = traits[6, "average"], # algae cell P quota in mg P mg^-1 C^-1 f
  upP1 = traits[4, "average"], # max uptake rate P per day in mg P mg C^-1 day^-1 
  KN1 = traits[1, "average"] * 1000, # nitrogen half sat constant in mg N m^-3 
  minQN1 = traits[5, "average"], # algae cell N quota in mg N mg^-1 C^-1 f
  upN1 = traits[3, "average"] # max uptake rate N per day in mg N mg C^-1 day^-1 
)



names(params.droop) <- c("SA", "zmix", "Pin", "Nin", "I0", "kBg", "kA",
                             "umax1", "lA", "v", "KLight", 
                             "KP1", "minQP1", "upP1", "KN1",
                             "minQN1", "upN1")
names(params.droop)
params.droop <- unlist(params.droop)

### diatoms

## michaelis menten model for diatom traits

diatoms.mich <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3
  
  # light parameters
  I0 = 400, # incident light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl

  # algae physiology parameters
  umax1 = traits[12, "diatoms"],
  lA=0.1,			# mortality rate day-1
  v=0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "diatoms"], # light half sat constant 
  KP1 = traits[2, "diatoms"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  QP1 = traits[6, "diatoms"], # algae cell P quota in mg P mg^-1 C^-1
  KN1 = traits[1, "diatoms"] * 1000, # nitrogen half sat constant in mg N m^-3 
  QN1 = traits[5, "diatoms"] # algae cell N quota in mg N mg^-1 C^-1 
)
names(diatoms.mich) <- c("SA", "zmix", "Pin", "Nin", "I0", 
                        "kBg", "kA", "umax1", "lA", "v", 
                        "KLight", "KP1",  "QP1", "KN1",  "QN1")
names(diatoms.mich)
diatoms.mich <- unlist(diatoms.mich)

## droop model for diatom traits

diatoms.droop <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3

  # light parameters
  I0 = 400, # surface light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl

  # algae physiology parameters
  umax1 = traits[12, "diatoms"],
  lA=0.1,			# mortality rate day-1
  v= 0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "diatoms"], # light half sat constant 
  KP1 = traits[2, "diatoms"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  minQP1 = traits[6, "diatoms"], # algae cell P quota in mg P mg^-1 C^-1 f
  upP1 = traits[4, "diatoms"], # max uptake rate P per day in mg P mg C^-1 day^-1 
  KN1 = traits[1, "diatoms"] * 1000, # nitrogen half sat constant in mg N m^-3 
  minQN1 = traits[5, "diatoms"], # algae cell N quota in mg N mg^-1 C^-1 f
  upN1 = traits[3, "diatoms"] # max uptake rate N per day in mg N mg C^-1 day^-1 
)



names(diatoms.droop) <- c("SA", "zmix", "Pin", "Nin", "I0", "kBg", "kA",
                             "umax1", "lA", "v", "KLight", 
                             "KP1", "minQP1", "upP1", "KN1",
                             "minQN1", "upN1")
names(diatoms.droop)
diatoms.droop <- unlist(diatoms.droop)

### green algae

## michaelis menten model for green algae traits

greens.mich <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3
  
  # light parameters
  I0 = 400, # incident light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl

  # algae physiology parameters
  umax1 = traits[12, "greens"],
  lA=0.1,			# mortality rate day-1
  v=0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "greens"], # light half sat constant 
  KP1 = traits[2, "greens"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  QP1 = traits[6, "greens"], # algae cell P quota in mg P mg^-1 C^-1
  KN1 = traits[1, "greens"] * 1000, # nitrogen half sat constant in mg N m^-3 
  QN1 = traits[5, "greens"] # algae cell N quota in mg N mg^-1 C^-1 
)
names(greens.mich) <- c("SA", "zmix", "Pin", "Nin", "I0", 
                        "kBg", "kA", "umax1", "lA", "v", 
                        "KLight", "KP1",  "QP1", "KN1",  "QN1")
names(greens.mich)
greens.mich <- unlist(greens.mich)

## droop model for green algae traits

greens.droop <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3

  # light parameters
  I0 = 400, # surface light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
 
  # algae physiology parameters
  umax1 = traits[12, "greens"],
  lA=0.1,			# mortality rate day-1
  v= 0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "greens"], # light half sat constant 
  KP1 = traits[2, "greens"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  minQP1 = traits[6, "greens"], # algae cell P quota in mg P mg^-1 C^-1 f
  upP1 = traits[4, "greens"], # max uptake rate P per day in mg P mg C^-1 day^-1 
  KN1 = traits[1, "greens"] * 1000, # nitrogen half sat constant in mg N m^-3 
  minQN1 = traits[5, "greens"], # algae cell N quota in mg N mg^-1 C^-1 f
  upN1 = traits[3, "greens"] # max uptake rate N per day in mg N mg C^-1 day^-1 
)



names(greens.droop) <- c("SA", "zmix", "Pin", "Nin", "I0", "kBg", "kA",
                             "umax1", "lA", "v", "KLight", 
                             "KP1", "minQP1", "upP1", "KN1",
                             "minQN1", "upN1")
names(greens.droop)
greens.droop <- unlist(greens.droop)

### cyanobacteria

## michaelis menten model for green algae traits

cyanos.mich <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3
  
  # light parameters
  I0 = 400, # incident light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl

  # algae physiology parameters
  umax1 = traits[12, "cyanos"],
  lA=0.1,			# mortality rate day-1
  v=0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "cyanos"], # light half sat constant 
  KP1 = traits[2, "cyanos"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  QP1 = traits[6, "cyanos"], # algae cell P quota in mg P mg^-1 C^-1
  KN1 = traits[1, "cyanos"] * 1000, # nitrogen half sat constant in mg N m^-3 
  QN1 = traits[5, "cyanos"] # algae cell N quota in mg N mg^-1 C^-1 
)
names(cyanos.mich) <- c("SA", "zmix", "Pin", "Nin", "I0", 
                        "kBg", "kA", "umax1", "lA", "v", 
                        "KLight", "KP1",  "QP1", "KN1",  "QN1")
names(cyanos.mich)
cyanos.mich <- unlist(cyanos.mich)

## droop model for green algae traits

cyanos.droop <- c(
  # lake parameters
  SA= 1,		# lake surface area in km2
  zmix = 2, # lake mixing depth in m
  Pin = NA, # P inflow concentration in mg P m^-3
  Nin = NA, # N inflow concentration in mg N m^-3

  # light parameters
  I0 = 400, # surface light
  kBg= 0.1,		# background light attenuation (m-1)/(g C m-3); 0.1-5.6 from Jager & Diehl
  kA=0.0003, # algal light attenuation (m-1)/(mg C m-3); 0.0003 from Jager & Diehl
 
  # algae physiology parameters
  umax1 = traits[12, "cyanos"],
  lA=0.1,			# mortality rate day-1
  v= 0.1,			# m d-1; sinking loss of algae
  KLight = traits[11, "cyanos"], # light half sat constant 
  KP1 = traits[2, "cyanos"] * 1000, # phosphorus half sat constant in mg P m^-3 f
  minQP1 = traits[6, "cyanos"], # algae cell P quota in mg P mg^-1 C^-1 f
  upP1 = traits[4, "cyanos"], # max uptake rate P per day in mg P mg C^-1 day^-1 
  KN1 = traits[1, "cyanos"] * 1000, # nitrogen half sat constant in mg N m^-3 
  minQN1 = traits[5, "cyanos"], # algae cell N quota in mg N mg^-1 C^-1 f
  upN1 = traits[3, "cyanos"] # max uptake rate N per day in mg N mg C^-1 day^-1 
)



names(cyanos.droop) <- c("SA", "zmix", "Pin", "Nin", "I0", "kBg", "kA",
                             "umax1", "lA", "v", "KLight", 
                             "KP1", "minQP1", "upP1", "KN1",
                             "minQN1", "upN1")
names(cyanos.droop)
cyanos.droop <- unlist(cyanos.droop)

```

## Running models (can ignore this)

The next couple of code chunks run the models for the different simulations/experiments described in the introduction section. They shouldn't produce any visible output, and you shouldn't have to touch any of the code.

### Experiment 1

Run models using Michaelis-Menten and Droop formulation and **average** phytoplankton traits across simulatenously varying N and P loads.

#### Model runs

```{r run models for experiment 1, include=F, message=F, warning=F}

# nutrient loads
# N, P = 5 to 1000 mg L^-1; 1 mg L^-1 = 1000 mg m^-1
# 100 for now, will increase later
# loads
# Olson&Jones use 20 to 500 for P. Use similar values
# for TP: TP from 2018-219 NLA stream assessment ranges from 2 to 950 ugL with 25th and 7th percentiles of 23 and 133 ugL. DG, August 2024
# for TN: TN from 2018-2019 NLA Stream Assessment ranges from 22 to 22,000 ugL with 25th and 75th percentiles of 300 and 14,000 ug L; DG, August 2024
exp1.loads <- expand.grid(Pin = seq(20, 500, 50 ) ,
                     Nin = seq(100,15000,500))

## michaelis-menten model
# apply over scenarios
sys.time1 <- Sys.time()
exp1.mich <- lapply(1:nrow(exp1.loads), function(i) {
  params.mich["Pin"] = exp1.loads[i, "Pin"]
  params.mich["Nin"] = exp1.loads[i, "Nin"]
  y <- c("A1" = 100,
         "P" = exp1.loads[i, "Pin"],
         "N" = exp1.loads[i, "Nin"])
  
  run <- ode(y, times, parms = params.mich, func = mich.single)
  return(run[max(times),])
  
})
sys.time2 <- Sys.time()
sys.time2 - sys.time1
exp1.mich <- do.call(rbind, exp1.mich)
exp1.mich <- as_data_frame(exp1.mich)
exp1.mich$Pin <- exp1.loads$Pin
exp1.mich$Nin <- exp1.loads$Nin

## droop model
# apply over scearions
exp1.droop <- lapply(1:nrow(exp1.loads), function(i) {
  params.droop["Pin"] = exp1.loads[i, "Pin"]
  params.droop["Nin"] = exp1.loads[i, "Nin"]
  y <- c("A1" = 100,
         "P" = exp1.loads[i, "Pin"],
         "N" = exp1.loads[i, "Nin"],
         "QP1" = 0.015,
         "QN1" = 0.1)
  
  run <- ode(y, times, parms = params.droop, func = droop.single)
  return(run[max(times),])
  
})

exp1.droop <- do.call(rbind, exp1.droop)
exp1.droop <- as_data_frame(exp1.droop)
exp1.droop$Pin <- exp1.loads$Pin
exp1.droop$Nin <- exp1.loads$Nin

## combine data sets for plotting
exp1.data <- bind_rows(
  exp1.mich %>% mutate(model = "Michaelis-Menten"),
  exp1.droop %>% mutate(model = "Droop")
) %>%
  mutate(model = factor(model, levels = c("Michaelis-Menten", "Droop")))


```

#### Output

Notes: 

- GPP higher for Michaelis-Menten than for Droop model
- strong stoichiometric relationship between GPP and nutrient load stoichiometry: GPP is generally highest when loads have an N:P aproaching the Redfield ratio
  - indicated by N and P limitation "below" and "above" 16:1 line
  - however ZNGIs don't 100% match the Redfield ratio, suggests some wiggle room but ideal load stoichiometry should fall within this region.
- Downing and McCauley suggest N and P limitation below and above N:P ratios of 14, 30; does not entirely match with our results; isoclines from ZNGIs indicate N and P limitation at much lower ratios (would be great to extract value of these isoclines and check out their N:P ratios)
- cell C:N:P changes predictably with nutrient loads; at low N:P loads C:N increases and vice versa for C:P. For both C:N and C:P, changes in cell quotas seem to match the Redfield ratio; however, this is not the case for cell N:P for which Downing and McCauley's ratios appear to align better with changes in cell quotas. 

```{r code chunk for summary and notes, include = F}
range(exp1.data$GPP)
mean(exp1.data$GPP)

range(exp1.data[exp1.data$model == "Michaelis-Menten", ]$GPP)
median(exp1.data[exp1.data$model == "Michaelis-Menten", ]$GPP)

range(exp1.data[exp1.data$model == "Droop", ]$GPP)
median(exp1.data[exp1.data$model == "Droop", ]$GPP)


```

```{r plot output for experiment 1, echo=F, message=F, warning=F, fig.height=5, fig.width=10}

## plot GPP for experiment 1
(fig.exp1.gpp <- exp1.data %>%
  ggplot(aes(Pin, Nin, fill = GPP)) + 
  geom_raster() + 
  facet_wrap(model~., ncol = 2, nrow = 1) + 
  # Redfield
  geom_vline(xintercept =  c(16*14.007/30.974), 
              lty = "dashed", col = "white", lwd = 1) +
  # Downing and McCauley
  geom_vline(xintercept = c(14, 30), 
              lty = "dashed", col = "black", lwd = 1) + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1),
       fill = expression("GPP mg C L"^-1 ~ "day"^-1)) +
  scale_fill_viridis_c()) 


## plot N:P for experiment 1
# QN
fig.exp1.np1 <- exp1.data %>%
  filter(model == "Droop") %>%
  ggplot(aes(Pin, Nin, fill = 1/QN1)) + 
  geom_raster() + 
  # Redfield
  geom_vline(xintercept =  c(16*14.007/30.974), 
              lty = "dashed", col = "white", lwd = 1) +
  # Downing and McCauley
  geom_vline(xintercept = c(14, 30), 
              lty = "dashed", col = "black", lwd = 1) + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1),
       fill = "Cell C:N mass") + 
  scale_fill_viridis_c()
# QP
fig.exp1.np2 <- exp1.data %>%
  filter(model == "Droop") %>%
  ggplot(aes(Pin, Nin, fill = 1/QP1)) + 
  geom_raster() + 
 # Redfield
  geom_vline(xintercept =  c(16*14.007/30.974), 
              lty = "dashed", col = "white", lwd = 1) +
  # Downing and McCauley
  geom_vline(xintercept = c(14, 30), 
              lty = "dashed", col = "black", lwd = 1) + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1),
       fill = "Cell C:P mass") + 
  scale_fill_viridis_c()
# N:P
fig.exp1.np3 <- exp1.data %>%
  filter(model == "Droop") %>%
  mutate(N_P_cell = QN1/QP1) %>%
  ggplot(aes(Pin, Nin, fill = N_P_cell)) + 
  geom_raster() + 
  # Redfield
  geom_vline(xintercept =  c(16*14.007/30.974), 
              lty = "dashed", col = "white", lwd = 1) +
  # Downing and McCauley
  geom_vline(xintercept = c(14, 30), 
              lty = "dashed", col = "black", lwd = 1) + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1),
       fill = expression("Cell N:P mass")) + 
  scale_fill_viridis_c()
# merge to produce figure
fig.exp1.cnp <- ggarrange(
  plotlist = list(fig.exp1.np1, fig.exp1.np2, fig.exp1.np3),
  nrow = 1, ncol = 3, align = "hv", labels = c("a", "b", "c"))
fig.exp1.cnp

# save files for now, will re-run this each time
save_plot("figures/GPP_framework_exp1_GPP.png", fig.exp1.gpp, 
          base_height = 4, base_width = 9, dpi = 400)
save_plot("figures/GPP_framework_exp1_CNP.png", fig.exp1.cnp, 
          base_height = 4, base_width = 9, dpi = 400)
```

### Experiment 2

Run models using Michaelis-Menten and Droop formulation and **average** phytoplankton traits across varying P loads and **fixed** N:P stoichiometry.

#### Model runs

```{r run models for experiment 2, include=F, message=F, warning=F}

# nutrient loads
# P = 5 to 1000 mg L^-1; 1 mg L^-1 = 0.001 mg m^-1
# N:P = 22.61, 13.57, 9.04, 7.24, 4.52, 2.26  by mass
exp2.loads <- expand.grid(Pin = seq(20,500, 50),
                          NP_inflow = seq(5, 100, 5))
exp2.loads$Nin <- exp2.loads$Pin * exp2.loads$NP_inflow

## michaelis-menten model
# apply over scenarios
exp2.mich <- lapply(1:nrow(exp2.loads), function(i) {
  params.mich["Pin"] = exp2.loads[i, "Pin"]
  params.mich["Nin"] = exp2.loads[i, "Nin"]
  y <- c("A1" = 100,
         "P" = exp2.loads[i, "Pin"],
         "N" = exp2.loads[i, "Nin"])
  
  run <- ode(y, times, parms = params.mich, func = mich.single)
  return(run[max(times),])
  
})

exp2.mich <- do.call(rbind, exp2.mich)
exp2.mich <- as_data_frame(exp2.mich)
exp2.mich$Pin <- exp2.loads$Pin
exp2.mich$NP_inflow <- exp2.loads$NP_inflow

## droop model
# apply over scearions
exp2.droop <- lapply(1:nrow(exp2.loads), function(i) {
  params.droop["Pin"] = exp2.loads[i, "Pin"]
  params.droop["Nin"] = exp2.loads[i, "Nin"]
  y <- c("A1" = 100,
         "P" = exp2.loads[i, "Pin"],
         "N" = exp2.loads[i, "Nin"],
         "QP1" = 0.015,
         "QN1" = 0.1)
  
  run <- ode(y, times, parms = params.droop, func = droop.single)
  return(run[max(times),])
  
})

exp2.droop <- do.call(rbind, exp2.droop)
exp2.droop <- as_data_frame(exp2.droop)
exp2.droop$Pin <- exp2.loads$Pin
exp2.droop$NP_inflow <- exp2.loads$NP_inflow

## combine data sets for plotting
exp2.data <- bind_rows(
  exp2.mich %>% mutate(model = "Michaelis-Menten"),
  exp2.droop %>% mutate(model = "Droop")
) %>%
  mutate(model = factor(model, levels = c("Michaelis-Menten", "Droop")))


```

#### Output

```{r plot figures for experiment2, fig.width=9, fig.height=4}

fig.exp2.gpp <- exp2.data %>%
  ggplot() +
  geom_line(aes(NP_inflow, GPP, col = Pin, group = Pin), lwd = .75) + 
  geom_point(aes(NP_inflow, GPP ,fill = Pin), size = 2, pch = 21, col = "white") + 
  # Redfield
  geom_vline(xintercept =  c(16*14.007/30.974), 
              lty = "dashed", col = "white", lwd = 1) +
  # Downing and McCauley
  geom_vline(xintercept = c(14, 30), 
              lty = "dashed", col = "black", lwd = 1) + 
  facet_wrap(model~.) + 
  scale_x_continuous(breaks = c(5, 25, 50, 75, 100)) + 
  scale_color_viridis_c()  +
  scale_fill_viridis_c() + 
  guides(fill = "none") + 
  labs(x = "Inflow N:P (mass)", 
       y = expression("GPP mg C L"^-1 ~ "day"^-1), 
       col = expression("Inflow P ug L"^-1))

fig.exp2.gpp

# changes in C:N:P
# plot inflow N:P against cell N:P
fig.exp2.cnp <- exp2.data %>%
  filter(model == "Droop") %>%
  mutate("C:N" = 1/QN1,"C:P" = 1/QP1, "N:P" = QN1/QP1) %>%
  select(`C:N`, `C:P`, `N:P`,Pin, NP_inflow) %>%
  gather("seston", "value", -Pin, -NP_inflow) %>%
  mutate(seston = factor(seston, levels = c("C:N", "C:P", "N:P"))) %>% 
  ggplot() + 
  geom_line(aes(NP_inflow, value, col = Pin, group = Pin), lwd = .75) + 
  geom_point(aes(NP_inflow, value,fill = Pin), size = 2, pch = 21, col = "white") + 
   # Redfield
  geom_vline(xintercept =  c(16*14.007/30.974), 
              lty = "dashed", col = "white", lwd = 1) +
  # Downing and McCauley
  geom_vline(xintercept = c(14, 30), 
              lty = "dashed", col = "black", lwd = 1) + 
  facet_wrap(seston~., scales = "free_y") + 
  labs(x = "N:P inflow (mass)",
       y = "Cell C:N:P (mass)",
       col = expression("Inflow P ug L"^-1), 
       fill = NULL) +
  scale_x_continuous(breaks = c(5, 25, 50, 75, 100)) + 
  scale_fill_viridis_c() + 
  scale_color_viridis_c() + 
  guides(fill = "none")
fig.exp2.cnp


save_plot("figures/GPP_framework_exp2_gpp.png", fig.exp2.gpp, 
          base_height = 4, base_width = 9, dpi = 400)
save_plot("figures/GPP_framework_exp2_cno.png", fig.exp2.cnp, 
          base_height = 4, base_width = 9, dpi = 400)

```




### Experiment 3

#### Model runs

Experiment 3 pt 1

```{r run models for experiment 3 pt1, include=F, message=F, warning=F}


# nutrient loads
# Olson&Jones use 20 to 500 for P. Use similar values
# for TP: TP from 2018-219 NLA stream assessment ranges from 2 to 950 ugL with 25th and 7th percentiles of 23 and 133 ugL. DG, August 2024
# for TN: TN from 2018-2019 NLA Stream Assessment ranges from 22 to 22,000 ugL with 25th and 75th percentiles of 300 and 14,000 ug L; DG, August 2024
exp3.loads <- expand.grid(Pin = seq(20, 500, 50),
                                Nin = seq(100, 15000, 500))


## michaelis-menten model
# apply over scenarios and algal groups
exp.3.mich <-  lapply(list(diatoms.mich, greens.mich, cyanos.mich), function(x) {
  params <- x
  lapply(1:nrow(exp3.loads), function(i) {
    params["Pin"] = exp3.loads[i, "Pin"]
    params["Nin"] = exp3.loads[i, "Nin"]
    y <- c("A1" = 100, "P" = exp3.loads[i, "Pin"],"N" = exp3.loads[i, "Nin"])
    run <- ode(y, times, parms = params, func = mich.single)
    return(run[max(times),])
  })
})
exp3.mich.diatoms <- as_data_frame(do.call(rbind, exp.3.mich[[1]]))
exp3.mich.greens <- as_data_frame(do.call(rbind, exp.3.mich[[2]]))
exp3.mich.cyanos <- as_data_frame(do.call(rbind, exp.3.mich[[3]]))

## droop model
# apply over scenarios and algal groups
exp.3.droop <-  lapply(list(diatoms.droop, greens.droop, cyanos.droop), function(x) {
  params <- x
  lapply(1:nrow(exp3.loads), function(i) {
    params["Pin"] = exp3.loads[i, "Pin"]
    params["Nin"] = exp3.loads[i, "Nin"]
    y <- c("A1" = 100, "P" = exp3.loads[i, "Pin"],"N" = exp3.loads[i, "Nin"],
           "QP1" = 0.015, "QN1" = 0.1)
    run <- ode(y, times, parms = params, func = droop.single)
    return(run[max(times),])
  })
})
exp3.droop.diatoms <- as_data_frame(do.call(rbind, exp.3.droop[[1]]))
exp3.droop.greens <- as_data_frame(do.call(rbind, exp.3.droop[[2]]))
exp3.droop.cyanos <- as_data_frame(do.call(rbind, exp.3.droop[[3]]))

# combine everything into a data frame
exp3.data <- bind_rows(
  exp3.mich.diatoms, exp3.mich.greens, exp3.mich.cyanos,
  exp3.droop.diatoms, exp3.droop.greens, exp3.droop.cyanos
) %>%
  mutate(model = rep(c("Michaelis-Menten", "Droop"), each = nrow(exp3.loads) * 3), 
         species = rep(c("Diatoms", "Greens", "Cyanos", "Diatoms", "Greens", "Cyanos"), 
                       each = nrow(exp3.loads)),
         Pin = rep(exp3.loads$Pin, 6), 
         Nin = rep(exp3.loads$Nin, 6)) %>%
  mutate(model = factor(model, levels = c("Michaelis-Menten", "Droop")), 
         species = factor(species, levels = c("Diatoms", "Greens", "Cyanos")))

```

Experiment 3 pt 2

```{r run models for experiment 3 pt2, include=F, message=F, warning=F}

# nutrient loads
# P = 0.005 to 0.150 g m^-3 = 5 to 150 mg m^-3
# N:P = 22.61, 13.57, 9.04, 7.24, 4.52, 2.26  by mass
exp3.loads2 <- expand.grid(Pin = seq(20,500, 50),
                          NP_inflow = seq(5, 100, 5))
exp3.loads2$Nin <- exp2.loads$Pin * exp2.loads$NP_inflow


## michaelis-menten model
# apply over scenarios and algal groups
exp.3.mich2 <-  lapply(list(diatoms.mich, greens.mich, cyanos.mich), function(x) {
  params <- x
  lapply(1:nrow(exp3.loads2), function(i) {
    params["Pin"] = exp3.loads2[i, "Pin"]
    params["Nin"] = exp3.loads2[i, "Nin"]
    y <- c("A1" = 100, "P" = exp3.loads2[i, "Pin"],"N" = exp3.loads2[i, "Nin"])
    run <- ode(y, times, parms = params, func = mich.single)
    return(run[max(times),])
  })
})
exp3.mich2.diatoms <- as_data_frame(do.call(rbind, exp.3.mich2[[1]]))
exp3.mich2.greens <- as_data_frame(do.call(rbind, exp.3.mich2[[2]]))
exp3.mich2.cyanos <- as_data_frame(do.call(rbind, exp.3.mich2[[3]]))

## droop model
# apply over scenarios and algal groups
exp.3.droop2 <-  lapply(list(diatoms.droop, greens.droop, cyanos.droop), function(x) {
  params <- x
  lapply(1:nrow(exp3.loads2), function(i) {
    params["Pin"] = exp3.loads2[i, "Pin"]
    params["Nin"] = exp3.loads2[i, "Nin"]
    y <- c("A1" = 100, "P" = exp3.loads2[i, "Pin"],"N" = exp3.loads2[i, "Nin"],
           "QP1" = 0.015, "QN1" = 0.1)
    run <- ode(y, times, parms = params, func = droop.single)
    return(run[max(times),])
  })
})
exp3.droop2.diatoms <- as_data_frame(do.call(rbind, exp.3.droop2[[1]]))
exp3.droop2.greens <- as_data_frame(do.call(rbind, exp.3.droop2[[2]]))
exp3.droop2.cyanos <- as_data_frame(do.call(rbind, exp.3.droop2[[3]]))

# combine everything into a data frame
exp3.data2 <- bind_rows(
  exp3.mich2.diatoms, exp3.mich2.greens, exp3.mich2.cyanos,
  exp3.droop2.diatoms, exp3.droop2.greens, exp3.droop2.cyanos
) %>%
  mutate(model = rep(c("Michaelis-Menten", "Droop"), each = nrow(exp3.loads2) * 3), 
         species = rep(c("Diatoms", "Greens", "Cyanos", "Diatoms", "Greens", "Cyanos"), 
                       each = nrow(exp3.loads2)),
         Pin = rep(exp3.loads2$Pin, 6), 
         Nin = rep(exp3.loads2$Nin, 6),
         NP_inflow = rep(exp3.loads2$NP_inflow, 6)) %>%
  mutate(model = factor(model, levels = c("Michaelis-Menten", "Droop")), 
         species = factor(species, levels = c("Diatoms", "Greens", "Cyanos")))


```

#### Output

```{r}
# plot GPP for experiment 3
(fig.exp3.gpp <- exp3.data %>%
  ggplot(aes(Pin, Nin, fill = GPP)) + 
  geom_raster() + 
  facet_grid(model~species) + 
# Redfield
  geom_abline(intercept = 0, slope =  c(16*14.007/30.974), 
              lty = "dashed", col = "white", lwd = 1) +
  # Downing and McCauley
  geom_abline(intercept = 0, slope = c(14, 30), 
              lty = "dashed", col = "black", lwd = 1) + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1),
       fill = expression("GPP mg C L"^-1 ~ "day"^-1)) + 
  scale_fill_viridis_c())


# plot cellular C:N:P for scenarios
# QN
fig.exp3.cn <- exp3.data %>%
  filter(model == "Droop") %>%
  ggplot(aes(Pin, Nin, fill = 1/QN1)) + 
  geom_raster() + 
  # Redfield
  geom_abline(intercept = 0, slope =  c(16*14.007/30.974), 
              lty = "dashed", col = "white", lwd = 1) +
  # Downing and McCauley
  geom_abline(intercept = 0, slope = c(14, 30), 
              lty = "dashed", col = "black", lwd = 1) + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1),
       fill = "Cell C:N mass") + 
  facet_wrap(species~., nrow = 3) + 
  scale_fill_viridis_c()
fig.exp3.cn
# QP
fig.exp3.cp <- exp3.data %>%
  filter(model == "Droop") %>%
  ggplot(aes(Pin, Nin, fill = 1/QP1)) + 
  geom_raster() + 
  # Redfield
  geom_abline(intercept = 0, slope =  c(16*14.007/30.974), 
              lty = "dashed", col = "white", lwd = 1) +
  # Downing and McCauley
  geom_abline(intercept = 0, slope = c(14, 30), 
              lty = "dashed", col = "black", lwd = 1) + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1),
       fill = "Cell C:P mass") + 
  facet_wrap(species~., nrow = 3) + 
  scale_fill_viridis_c()
fig.exp3.cp
# N:P
fig.exp3.np <- exp3.data %>%
  filter(model == "Droop") %>%
  ggplot(aes(Pin, Nin, fill = QN1/QP1)) + 
  geom_raster() + 
  # Redfield
  geom_abline(intercept = 0, slope =  c(16*14.007/30.974), 
              lty = "dashed", col = "white", lwd = 1) +
  # Downing and McCauley
  geom_abline(intercept = 0, slope = c(14, 30), 
              lty = "dashed", col = "black", lwd = 1) + 
  labs(x = expression("Inflow P ug L"^-1), y = expression("Inflow N ug L"^-1),
       fill = "Cell N:P mass") + 
  facet_wrap(species~., nrow = 3) + 
  scale_fill_viridis_c()
fig.exp3.np
# merge to produce figure
fig.exp3.cnp <- ggarrange(
  plotlist = list(fig.exp3.cn, fig.exp3.cp, fig.exp3.np),
  nrow = 1, ncol = 3, align = "hv", labels = c("a", "b", "c"))
fig.exp3.cnp


save_plot("figures/GPP_framework_exp3_gpp.png", fig.exp3.gpp, 
          base_height = 5, base_width = 9, dpi = 400)
save_plot("figures/GPP_framework_exp3_cnp.png", fig.exp3.cnp, 
          base_height = 5, base_width = 9, dpi = 400)


# changes in C:N:P
# plot inflow N:P against cell N:P
fig.exp3.cnp.data <-  exp3.data2 %>%
  filter(model == "Droop") %>%
  mutate("C:N" = 1/QN1,"C:P" = 1/QP1, "N:P" = QN1/QP1) %>%
  select(`C:N`, `C:P`, `N:P`,Pin, NP_inflow, species) %>%
  gather("seston", "value", -Pin, -NP_inflow, -species) %>%
  mutate(seston = factor(seston, levels = c("C:N", "C:P", "N:P")))

fig.exp3.cnp.inflow <- ggplot() + 
  # diatoms
  geom_line(data = fig.exp3.cnp.data[fig.exp3.cnp.data$species == "Diatoms",],
            aes(x = NP_inflow, y = value, col = Pin, group = Pin), lwd = .75) +
  geom_point(data = fig.exp3.cnp.data[fig.exp3.cnp.data$species == "Diatoms",],
             aes(x = NP_inflow, y = value,fill = Pin, pch = species),
             pch = 21, size = 2, col = "white") +
  # green-algae
  geom_line(data = fig.exp3.cnp.data[fig.exp3.cnp.data$species == "Greens",],
            aes(x = NP_inflow, y = value, col = Pin, group = Pin), lwd = .75) +
  geom_point(data = fig.exp3.cnp.data[fig.exp3.cnp.data$species == "Greens",],
             aes(x = NP_inflow, y = value,fill = Pin, pch = species),
             pch = 22, size = 2, col = "white") +
  # cyanobacteria
  geom_line(data = fig.exp3.cnp.data[fig.exp3.cnp.data$species == "Cyanos",],
            aes(x = NP_inflow, y = value, col = Pin, group = Pin), lwd = .75) +
  geom_point(data = fig.exp3.cnp.data[fig.exp3.cnp.data$species == "Cyanos",],
             aes(x = NP_inflow, y = value,fill = Pin, pch = species),
             pch = 23, size = 2, col = "white") +
   # Redfield
  geom_vline(xintercept =  c(16*14.007/30.974), 
              lty = "dashed", col = "white", lwd = 1) +
  # Downing and McCauley
  geom_vline(xintercept = c(14, 30), 
              lty = "dashed", col = "black", lwd = 1) + 
  facet_wrap(seston~., scales = "free_y") + 
  labs(x = "N:P inflow (mass)",
       y = "Cell C:N:P (mass)",
       col = expression("Inflow P ug L"^-1), 
       fill = NULL) +
  scale_x_continuous(breaks = c(5, 25, 50, 75, 100)) + 
  scale_fill_viridis_c() + 
  scale_color_viridis_c() + 
  scale_shape_manual(
    values = c("21" = "Diatoms", "22" = "Greens", "23" = "Cyanos")) + 
  guides(fill = "none") 
fig.exp3.cnp.inflow

save_plot("figures/GPP_framework_exp3_cnp_inflow.png", fig.exp3.cnp.inflow, 
          base_height = 4, base_width = 9, dpi = 400)

```



```{r create temp storage object for re-loading models in future}

save(list = c("exp1.data", "exp2.data", "exp3.data", "exp3.data2"),
     file = "GPP_framework_temp_file.Rdata")
load("GPP_framework_temp_file.Rdata")


```

